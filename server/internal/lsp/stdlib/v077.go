// Code generated by stdlib_indexer, DO NOT EDIT.
package stdlib

import (
	symbols "github.com/pherrymason/c3-lsp/pkg/symbols"
	symbolstable "github.com/pherrymason/c3-lsp/pkg/symbols_table"
)

func Load_v077_stdlib() symbolstable.UnitModules {
	docId := "_stdlib"
	moduleCollection := map[string]*symbols.Module{
		"libc":                                     symbols.NewModuleBuilder("libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build(),
		"libc::errno":                              symbols.NewModuleBuilder("libc::errno", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build(),
		"libc::os":                                 symbols.NewModuleBuilder("libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build(),
		"libc::termios":                            symbols.NewModuleBuilder("libc::termios", "<stdlib-path>/libc/termios.c3").WithoutSourceCode().Build(),
		"std::ascii":                               symbols.NewModuleBuilder("std::ascii", "<stdlib-path>/ascii.c3").WithDocs(symbols.NewDocCommentBuilder("This module is scheduled for removal, use std::core::ascii").Build()).WithoutSourceCode().Build(),
		"std::atomic":                              symbols.NewModuleBuilder("std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithoutSourceCode().Build(),
		"std::atomic::types":                       symbols.NewModuleBuilder("std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build(),
		"std::bits":                                symbols.NewModuleBuilder("std::bits", "<stdlib-path>/bits.c3").WithoutSourceCode().Build(),
		"std::collections::anylist":                symbols.NewModuleBuilder("std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithoutSourceCode().Build(),
		"std::collections::bitset":                 symbols.NewModuleBuilder("std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "SIZE > 0 : \"The size of the bitset in bits must be at least 1\"").Build()).WithoutSourceCode().Build(),
		"std::collections::blockingqueue":          symbols.NewModuleBuilder("std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithoutSourceCode().Build(),
		"std::collections::elastic_array":          symbols.NewModuleBuilder("std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "MAX_SIZE >= 1 : `The size must be at least 1 element big.`").Build()).WithoutSourceCode().Build(),
		"std::collections::enummap":                symbols.NewModuleBuilder("std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Enum.kindof == TypeKind.ENUM : \"Only enums may be used with an enummap\"").Build()).WithoutSourceCode().Build(),
		"std::collections::enumset":                symbols.NewModuleBuilder("std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Enum.kindof == TypeKind.ENUM : \"Only enums may be used with an enumset\"").Build()).WithoutSourceCode().Build(),
		"std::collections::growablebitset":         symbols.NewModuleBuilder("std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Type.kindof == UNSIGNED_INT").Build()).WithoutSourceCode().Build(),
		"std::collections::interfacelist":          symbols.NewModuleBuilder("std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Type.kindof == INTERFACE || Type.kindof == ANY : \"The kind of an interfacelist must be an interface or `any`\"").Build()).WithoutSourceCode().Build(),
		"std::collections::linkedlist":             symbols.NewModuleBuilder("std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build(),
		"std::collections::list":                   symbols.NewModuleBuilder("std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build(),
		"std::collections::list_common":            symbols.NewModuleBuilder("std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithoutSourceCode().Build(),
		"std::collections::map":                    symbols.NewModuleBuilder("std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined((Key){}.hash()) : `No .hash function found on the key`").Build()).WithoutSourceCode().Build(),
		"std::collections::maybe":                  symbols.NewModuleBuilder("std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build(),
		"std::collections::object":                 symbols.NewModuleBuilder("std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build(),
		"std::collections::pair":                   symbols.NewModuleBuilder("std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue":          symbols.NewModuleBuilder("std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::priorityqueue::private": symbols.NewModuleBuilder("std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build(),
		"std::collections::range":                  symbols.NewModuleBuilder("std::collections::range", "<stdlib-path>/collections/range.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Type.is_ordered : \"The type must be ordered\"").Build()).WithoutSourceCode().Build(),
		"std::collections::ringbuffer":             symbols.NewModuleBuilder("std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "Type.kindof == ARRAY : \"Required an array type\"").Build()).WithoutSourceCode().Build(),
		"std::collections::set":                    symbols.NewModuleBuilder("std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined((Value){}.hash()) : `No .hash function found on the value`").Build()).WithoutSourceCode().Build(),
		"std::collections::triple":                 symbols.NewModuleBuilder("std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::collections::tuple":                  symbols.NewModuleBuilder("std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build(),
		"std::core::array::slice":                  symbols.NewModuleBuilder("std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithoutSourceCode().Build(),
		"std::core::ascii":                         symbols.NewModuleBuilder("std::core::ascii", "<stdlib-path>/core/ascii.c3").WithDocs(symbols.NewDocCommentBuilder("This module contains utils for handling ASCII characters. They only operate on\ncharacters corresponding to 0-127.").Build()).WithoutSourceCode().Build(),
		"std::core::bitorder":                      symbols.NewModuleBuilder("std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build(),
		"std::core::builtin":                       symbols.NewModuleBuilder("std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithoutSourceCode().Build(),
		"std::core::cinterop":                      symbols.NewModuleBuilder("std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithoutSourceCode().Build(),
		"std::core::cpudetect":                     symbols.NewModuleBuilder("std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build(),
		"std::core::dstring":                       symbols.NewModuleBuilder("std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build(),
		"std::core::env":                           symbols.NewModuleBuilder("std::core::env", "<stdlib-path>/core/env.c3").WithoutSourceCode().Build(),
		"std::core::main_stub":                     symbols.NewModuleBuilder("std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithoutSourceCode().Build(),
		"std::core::mem":                           symbols.NewModuleBuilder("std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build(),
		"std::core::mem::alignment":                symbols.NewModuleBuilder("std::core::mem::alignment", "<stdlib-path>/core/mem.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mem::@constant_is_power_of_2(ALIGNMENT) : \"The alignment must be a power of 2\"").Build()).WithoutSourceCode().Build(),
		"std::core::mem::allocator":                symbols.NewModuleBuilder("std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithoutSourceCode().Build(),
		"std::core::mem::mempool":                  symbols.NewModuleBuilder("std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithoutSourceCode().Build(),
		"std::core::mem::rc":                       symbols.NewModuleBuilder("std::core::mem::rc", "<stdlib-path>/core/refcount.c3").WithoutSourceCode().Build(),
		"std::core::mem::ref":                      symbols.NewModuleBuilder("std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithDocs(symbols.NewDocCommentBuilder("Ref provides a general *external* ref counted wrapper for a pointer. For convenience, a ref count of 0\nmeans the reference is still valid.\n\nWhen the rc drops to -1, it will first run the dealloc function on the underlying pointer (if it exists),\nthen free the pointer and the atomic variable assuming that they are allocated using the Allocator in the Ref.").WithContract("@require", "!$defined(Type.dealloc) ||| $defined(Type.dealloc(&&(Type){})) : \"'dealloc' must only take a pointer to the underlying type\"").WithContract("@require", "!$defined(Type.dealloc) ||| $typeof((Type){}.dealloc()) ==  void : \"'dealloc' must return 'void'\"").Build()).WithoutSourceCode().Build(),
		"std::core::mem::vm":                       symbols.NewModuleBuilder("std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithDocs(symbols.NewDocCommentBuilder("The VM module holds code for working with virtual memory on supported platforms (currently Win32 and Posix)").Build()).WithoutSourceCode().Build(),
		"std::core::mem::volatile":                 symbols.NewModuleBuilder("std::core::mem::volatile", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build(),
		"std::core::runtime":                       symbols.NewModuleBuilder("std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build(),
		"std::core::sanitizer":                     symbols.NewModuleBuilder("std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build(),
		"std::core::sanitizer::asan":               symbols.NewModuleBuilder("std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build(),
		"std::core::string":                        symbols.NewModuleBuilder("std::core::string", "<stdlib-path>/core/string_escape.c3").WithDocs(symbols.NewDocCommentBuilder("This module provides functionality for escaping and unescaping strings\nwith standard C-style escape sequences, similar to what's used in JSON\nand other string literals.").Build()).WithoutSourceCode().Build(),
		"std::core::string::ansi":                  symbols.NewModuleBuilder("std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithoutSourceCode().Build(),
		"std::core::string::conv":                  symbols.NewModuleBuilder("std::core::string::conv", "<stdlib-path>/core/conv.c3").WithoutSourceCode().Build(),
		"std::core::string::iterator":              symbols.NewModuleBuilder("std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build(),
		"std::core::test":                          symbols.NewModuleBuilder("std::core::test", "<stdlib-path>/core/test.c3").WithDocs(symbols.NewDocCommentBuilder("Unit test module\n\nThis module provides a toolset of macros for running unit test checks \n\nExample:\n```c3\nmodule sample::m;\nimport std::io;\n\nfaultdef DIVISION_BY_ZERO;\n\nfn double? divide(int a, int b)\n{\n\tif (b == 0) return MathError.DIVISION_BY_ZERO?;\n\treturn (double)(a) / (double)(b);\n}\n\nfn void? test_div() @test\n{\n\ttest::eq(2, divide(6, 3)!);\n\ttest::ne(1, 2);\n\ttest::ge(3, 3);\n\ttest::gt(2, divide(3, 3)!);\n\ttest::lt(2, 3);\n\ttest::le(2, 3);\n\ttest::eq_approx(m::divide(1, 3)!, 0.333, places: 3);\n\ttest::@check(2 == 2, \"divide: %d\", divide(6, 3)!);\n\ttest::@error(m::divide(3, 0), MathError.DIVISION_BY_ZERO);\n}\n\n```").Build()).WithoutSourceCode().Build(),
		"std::core::types":                         symbols.NewModuleBuilder("std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build(),
		"std::core::values":                        symbols.NewModuleBuilder("std::core::values", "<stdlib-path>/core/values.c3").WithoutSourceCode().Build(),
		"std::crypto":                              symbols.NewModuleBuilder("std::crypto", "<stdlib-path>/crypto/crypto.c3").WithoutSourceCode().Build(),
		"std::crypto::aes128":                      symbols.NewModuleBuilder("std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").WithoutSourceCode().Build(),
		"std::crypto::aes192":                      symbols.NewModuleBuilder("std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").WithoutSourceCode().Build(),
		"std::crypto::aes256":                      symbols.NewModuleBuilder("std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").WithoutSourceCode().Build(),
		"std::crypto::dh":                          symbols.NewModuleBuilder("std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithoutSourceCode().Build(),
		"std::crypto::rc4":                         symbols.NewModuleBuilder("std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build(),
		"std::encoding":                            symbols.NewModuleBuilder("std::encoding", "<stdlib-path>/encoding/encoding.c3").WithoutSourceCode().Build(),
		"std::encoding::base32":                    symbols.NewModuleBuilder("std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build(),
		"std::encoding::base64":                    symbols.NewModuleBuilder("std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build(),
		"std::encoding::csv":                       symbols.NewModuleBuilder("std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build(),
		"std::encoding::hex":                       symbols.NewModuleBuilder("std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithoutSourceCode().Build(),
		"std::encoding::json":                      symbols.NewModuleBuilder("std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build(),
		"std::experimental::scheduler":             symbols.NewModuleBuilder("std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithoutSourceCode().Build(),
		"std::hash::a5hash":                        symbols.NewModuleBuilder("std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").WithoutSourceCode().Build(),
		"std::hash::adler32":                       symbols.NewModuleBuilder("std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build(),
		"std::hash::crc32":                         symbols.NewModuleBuilder("std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build(),
		"std::hash::crc64":                         symbols.NewModuleBuilder("std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build(),
		"std::hash::fnv32a":                        symbols.NewModuleBuilder("std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithoutSourceCode().Build(),
		"std::hash::fnv64a":                        symbols.NewModuleBuilder("std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithoutSourceCode().Build(),
		"std::hash::hmac":                          symbols.NewModuleBuilder("std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithoutSourceCode().Build(),
		"std::hash::komi":                          symbols.NewModuleBuilder("std::hash::komi", "<stdlib-path>/hash/komi.c3").WithoutSourceCode().Build(),
		"std::hash::metro128":                      symbols.NewModuleBuilder("std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithoutSourceCode().Build(),
		"std::hash::metro64":                       symbols.NewModuleBuilder("std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithoutSourceCode().Build(),
		"std::hash::sha1":                          symbols.NewModuleBuilder("std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build(),
		"std::hash::sha256":                        symbols.NewModuleBuilder("std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithoutSourceCode().Build(),
		"std::hash::sha512":                        symbols.NewModuleBuilder("std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithoutSourceCode().Build(),
		"std::hash::siphash":                       symbols.NewModuleBuilder("std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithDocs(symbols.NewDocCommentBuilder("SipHash is a secure pseudorandom function (PRF) which digests a 128-bit key\n and a variable-length message to produce a 64- or 128-bit hash value.\n\nSipHash can be employed in numerous useful ways and structures, e.g.:\n - Hash Tables\n - Message Authentication Codes\n - Denial of Service (hash flooding) resistance\n - Bloom filters\n - Keyed runtime identifier derivation\n\n Read more: https://en.wikipedia.org/wiki/SipHash").WithContract("@require", "OutType.typeid == uint128.typeid || OutType.typeid == ulong.typeid : \"Module OutType must be either uint128 or ulong.\"").Build()).WithoutSourceCode().Build(),
		"std::hash::siphash24":                     symbols.NewModuleBuilder("std::hash::siphash24", "<stdlib-path>/hash/siphash.c3").WithDocs(symbols.NewDocCommentBuilder("Best for performance-critical applications.\nSee std::hash::siphash for more information.").Build()).WithoutSourceCode().Build(),
		"std::hash::siphash24_128":                 symbols.NewModuleBuilder("std::hash::siphash24_128", "<stdlib-path>/hash/siphash.c3").WithDocs(symbols.NewDocCommentBuilder("Exact same as siphash24, but for 128-bit outputs. Algorithm internally changes slightly.").Build()).WithoutSourceCode().Build(),
		"std::hash::siphash48":                     symbols.NewModuleBuilder("std::hash::siphash48", "<stdlib-path>/hash/siphash.c3").WithDocs(symbols.NewDocCommentBuilder("Best for security-focused applications.\nSee std::hash::siphash for more information.").Build()).WithoutSourceCode().Build(),
		"std::hash::siphash48_128":                 symbols.NewModuleBuilder("std::hash::siphash48_128", "<stdlib-path>/hash/siphash.c3").WithDocs(symbols.NewDocCommentBuilder("Exact same as siphash48, but for 128-bit outputs. Algorithm internally changes slightly.").Build()).WithoutSourceCode().Build(),
		"std::hash::whirlpool":                     symbols.NewModuleBuilder("std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithoutSourceCode().Build(),
		"std::hash::wyhash2":                       symbols.NewModuleBuilder("std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").WithoutSourceCode().Build(),
		"std::io":                                  symbols.NewModuleBuilder("std::io", "<stdlib-path>/io/stream/bytereader.c3").WithoutSourceCode().Build(),
		"std::io::file":                            symbols.NewModuleBuilder("std::io::file", "<stdlib-path>/io/file_mmap.c3").WithoutSourceCode().Build(),
		"std::io::file::mmap":                      symbols.NewModuleBuilder("std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithoutSourceCode().Build(),
		"std::io::os":                              symbols.NewModuleBuilder("std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithoutSourceCode().Build(),
		"std::io::path":                            symbols.NewModuleBuilder("std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build(),
		"std::math":                                symbols.NewModuleBuilder("std::math", "<stdlib-path>/math/quaternion.c3").WithoutSourceCode().Build(),
		"std::math::complex":                       symbols.NewModuleBuilder("std::math::complex", "<stdlib-path>/math/complex.c3").WithDocs(symbols.NewDocCommentBuilder("The generic complex number module, for float or double based complex number definitions.").WithContract("@require", "Real.kindof == FLOAT : \"A complex number must use a floating type\"").Build()).WithoutSourceCode().Build(),
		"std::math::easing":                        symbols.NewModuleBuilder("std::math::easing", "<stdlib-path>/math/easing.c3").WithoutSourceCode().Build(),
		"std::math::math_rt":                       symbols.NewModuleBuilder("std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithoutSourceCode().Build(),
		"std::math::matrix":                        symbols.NewModuleBuilder("std::math::matrix", "<stdlib-path>/math/matrix.c3").WithDocs(symbols.NewDocCommentBuilder("The generic matrix module, for float or double based matrix definitions.").WithContract("@require", "Real.kindof == FLOAT : \"A matrix must use a floating type\"").Build()).WithoutSourceCode().Build(),
		"std::math::nolibc":                        symbols.NewModuleBuilder("std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").WithoutSourceCode().Build(),
		"std::math::quaternion":                    symbols.NewModuleBuilder("std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithDocs(symbols.NewDocCommentBuilder("The generic quaternion module, for float or double based quaternion definitions.").WithContract("@require", "Real.kindof == FLOAT : \"A quaternion must use a floating type\"").Build()).WithoutSourceCode().Build(),
		"std::math::random":                        symbols.NewModuleBuilder("std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithoutSourceCode().Build(),
		"std::math::uuid":                          symbols.NewModuleBuilder("std::math::uuid", "<stdlib-path>/math/uuid.c3").WithoutSourceCode().Build(),
		"std::math::vector":                        symbols.NewModuleBuilder("std::math::vector", "<stdlib-path>/math/vector.c3").WithoutSourceCode().Build(),
		"std::net":                                 symbols.NewModuleBuilder("std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build(),
		"std::net::os":                             symbols.NewModuleBuilder("std::net::os", "<stdlib-path>/net/os/common.c3").WithoutSourceCode().Build(),
		"std::net::tcp":                            symbols.NewModuleBuilder("std::net::tcp", "<stdlib-path>/net/tcp.c3").WithoutSourceCode().Build(),
		"std::net::udp":                            symbols.NewModuleBuilder("std::net::udp", "<stdlib-path>/net/udp.c3").WithoutSourceCode().Build(),
		"std::net::url":                            symbols.NewModuleBuilder("std::net::url", "<stdlib-path>/net/url.c3").WithoutSourceCode().Build(),
		"std::os":                                  symbols.NewModuleBuilder("std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build(),
		"std::os::android":                         symbols.NewModuleBuilder("std::os::android", "<stdlib-path>/os/android/log.c3").WithoutSourceCode().Build(),
		"std::os::backtrace":                       symbols.NewModuleBuilder("std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build(),
		"std::os::darwin":                          symbols.NewModuleBuilder("std::os::darwin", "<stdlib-path>/os/macos/general.c3").WithoutSourceCode().Build(),
		"std::os::darwin::cocoa":                   symbols.NewModuleBuilder("std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").WithoutSourceCode().Build(),
		"std::os::env":                             symbols.NewModuleBuilder("std::os::env", "<stdlib-path>/os/env.c3").WithoutSourceCode().Build(),
		"std::os::freebsd":                         symbols.NewModuleBuilder("std::os::freebsd", "<stdlib-path>/os/freebsd/general.c3").WithoutSourceCode().Build(),
		"std::os::linux":                           symbols.NewModuleBuilder("std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithoutSourceCode().Build(),
		"std::os::macos::cf":                       symbols.NewModuleBuilder("std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithoutSourceCode().Build(),
		"std::os::macos::objc":                     symbols.NewModuleBuilder("std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithoutSourceCode().Build(),
		"std::os::netbsd":                          symbols.NewModuleBuilder("std::os::netbsd", "<stdlib-path>/os/netbsd/general.c3").WithoutSourceCode().Build(),
		"std::os::openbsd":                         symbols.NewModuleBuilder("std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithoutSourceCode().Build(),
		"std::os::posix":                           symbols.NewModuleBuilder("std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithoutSourceCode().Build(),
		"std::os::process":                         symbols.NewModuleBuilder("std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build(),
		"std::os::win32":                           symbols.NewModuleBuilder("std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithoutSourceCode().Build(),
		"std::os::win32::wsa":                      symbols.NewModuleBuilder("std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build(),
		"std::sort":                                symbols.NewModuleBuilder("std::sort", "<stdlib-path>/sort/binarysearch.c3").WithoutSourceCode().Build(),
		"std::sort::cs":                            symbols.NewModuleBuilder("std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithoutSourceCode().Build(),
		"std::sort::is":                            symbols.NewModuleBuilder("std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithoutSourceCode().Build(),
		"std::sort::qs":                            symbols.NewModuleBuilder("std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build(),
		"std::thread":                              symbols.NewModuleBuilder("std::thread", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build(),
		"std::thread::channel":                     symbols.NewModuleBuilder("std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithoutSourceCode().Build(),
		"std::thread::cpu":                         symbols.NewModuleBuilder("std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build(),
		"std::thread::event":                       symbols.NewModuleBuilder("std::thread::event", "<stdlib-path>/threads/event/event_thread.c3").WithoutSourceCode().Build(),
		"std::thread::os":                          symbols.NewModuleBuilder("std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build(),
		"std::thread::pool":                        symbols.NewModuleBuilder("std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build(),
		"std::thread::threadpool":                  symbols.NewModuleBuilder("std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build(),
		"std::time":                                symbols.NewModuleBuilder("std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build(),
		"std::time::clock":                         symbols.NewModuleBuilder("std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build(),
		"std::time::datetime":                      symbols.NewModuleBuilder("std::time::datetime", "<stdlib-path>/time/datetime.c3").WithoutSourceCode().Build(),
		"std::time::os":                            symbols.NewModuleBuilder("std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build(),
	}
	parsedModules := symbolstable.NewParsedModules(&docId)
	for _, mod := range moduleCollection {
		parsedModules.RegisterModule(mod)
	}
	var module *symbols.Module

	// Define module std::ascii
	module = moduleCollection["std::ascii"]
	module.AddFunction(symbols.NewFunctionBuilder("in_range_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl_m", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower_m", symbols.NewTypeBuilder("", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper_m", symbols.NewTypeBuilder("", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("char").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("char", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("in_range", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").WithTypeIdentifier("uint").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("uint", "std::ascii").Build(), "std::ascii", "<stdlib-path>/ascii.c3").Build()).WithoutSourceCode().Build())

	// Define module std::atomic::types
	module = moduleCollection["std::atomic::types"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::atomic::types", "<stdlib-path>/atomic.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Atomic", "std::atomic::types", "<stdlib-path>/atomic.c3").WithStructMember("data", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.load", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Loads data atomically, by default this uses SEQ_CONSISTENT ordering.").WithContract("@param", "ordering : \"The ordering, cannot be release or acquire-release.\"").WithContract("@require", "ordering != RELEASE && ordering != ACQUIRE_RELEASE : \"Release and acquire-release are not valid for load\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.store", symbols.NewBaseTypeBuilder("void", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Stores data atomically, by default this uses SEQ_CONSISTENT ordering.").WithContract("@param", "ordering : \"The ordering, cannot be acquire or acquire-release.\"").WithContract("@require", "ordering != ACQUIRE && ordering != ACQUIRE_RELEASE : \"Acquire and acquire-release are not valid for store\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.add", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.sub", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.mul", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.div", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.max", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.min", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.or", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.xor", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.and", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shr", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.shl", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.set", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Atomic.clear", symbols.NewGenericTypeBuilder("Type", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_exec", symbols.NewTypeBuilder("", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("#func", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_exec_no_arg", symbols.NewTypeBuilder("", "std::atomic::types").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("#func", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("ordering", symbols.NewTypeBuilder("", "").Build(), "std::atomic::types", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("@is_native_atomic_value", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_native_atomic_type", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_add", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to be added to ptr.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "!$alignment || math::is_power_of_2($alignment) : \"Alignment must be a power of two.\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr + y) : \"+ must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_sub", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to be subtracted from ptr.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "!$alignment || math::is_power_of_2($alignment) : \"Alignment must be a power of two.\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr - y) : \"- must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_mul", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to be multiplied with ptr.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr * y) : \"* must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_div", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to divide ptr by.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr * y) : \"/ must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_or", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to perform a bitwise or with.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "!$alignment || math::is_power_of_2($alignment) : \"Alignment must be a power of two.\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr | y) : \"| must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_xor", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to perform a bitwise xor with.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "!$alignment || math::is_power_of_2($alignment) : \"Alignment must be a power of two.\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr ^ y) : \"^ must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_and", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to perform a bitwise and with.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "!$alignment || math::is_power_of_2($alignment) : \"Alignment must be a power of two.\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr ^ y) : \"& must be defined between the values.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_right", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to shift ptr by.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "types::is_int($typeof(*ptr)) : \"Only integer pointers may be used.\"").WithContract("@require", "types::is_int($typeof(y)) : \"The value for shift right must be an integer\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_shift_left", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to shift ptr by.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "types::is_int($typeof(*ptr)) : \"Only integer pointers may be used.\"").WithContract("@require", "types::is_int($typeof(y)) : \"The value for shift left must be an integer\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_set", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "types::flat_kind($typeof(*ptr)) == BOOL : \"Only bool pointers may be used.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flag_clear", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "types::flat_kind($typeof(*ptr)) == BOOL : \"Only bool pointers may be used.\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_max", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to be compared to ptr.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr > y) : \"Only values that are comparable with > may be used\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fetch_min", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] ptr : \"the variable or dereferenced pointer to the data.\"").WithContract("@param", "[in] y : \"the value to be compared to ptr.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@return", "\"returns the old value of ptr\"").WithContract("@require", "$defined(*ptr) : \"Expected a pointer\"").WithContract("@require", "@is_native_atomic_value(*ptr) : \"Only types that are native atomic may be used.\"").WithContract("@require", "$defined(*ptr > y) : \"Only values that are comparable with > may be used\"").WithContract("@require", "$ordering != NOT_ATOMIC && $ordering != UNORDERED : \"Acquire ordering is not valid.\"").Build()).WithoutSourceCode().Build())

	// Define module std::atomic
	module = moduleCollection["std::atomic"]
	module.AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_failure", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$success", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@__atomic_compare_exchange_ordering_success", symbols.NewTypeBuilder("", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewTypeBuilder("", "").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__atomic_compare_exchange", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("desired", symbols.NewBaseTypeBuilder("any", "std::atomic").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("success", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("failure", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::atomic", "<stdlib-path>/atomic_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::bits
	module = moduleCollection["std::bits"]
	module.AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_intlike($typeof(i)) : `The input must be an integer or integer vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bswap", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_intlike($typeof(i)) : `The input must be an integer or integer vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshl", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].fshr", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotl", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].rotr", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshl", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].fshr", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotl", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].rotr", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshl", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].fshr", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotl", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].rotr", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshl", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].fshr", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotl", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].rotr", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshl", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].fshr", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotl", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].rotr", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshl", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].fshr", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotl", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].rotr", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshl", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].fshr", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotl", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].rotr", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshl", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].fshr", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotl", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].rotr", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshl", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].fshr", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotl", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].rotr", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshl", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].fshr", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotl", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].rotr", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").IsUnsizedCollection().Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshl", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.fshr", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotl", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.rotr", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshl", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.fshr", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotl", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.rotr", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshl", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.fshr", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotl", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.rotr", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ushort", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshl", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.fshr", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotl", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.rotr", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("short", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshl", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.fshr", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotl", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.rotr", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("char", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshl", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.fshr", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotl", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.rotr", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ichar", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshl", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.fshr", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotl", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.rotr", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("ulong", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshl", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.fshr", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotl", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.rotr", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("long", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshl", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.fshr", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotl", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.rotr", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("uint128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.popcount", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.ctz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.clz", symbols.NewTypeBuilder("", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshl", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.fshr", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("hi", symbols.NewTypeBuilder("", "").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("lo", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotl", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.rotr", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("shift", symbols.NewBaseTypeBuilder("int128", "std::bits").Build(), "std::bits", "<stdlib-path>/bits.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::anylist
	module = moduleCollection["std::collections::anylist"]
	module.AddDef(symbols.NewDefBuilder("AnyPredicate", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithResolvesToType(symbols.NewTypeBuilder("InterfacePredicate", "std::collections::interfacelist").WithGenericArguments(symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AnyTest", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithResolvesToType(symbols.NewTypeBuilder("InterfaceTest", "std::collections::interfacelist").WithGenericArguments(symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build()).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AnyList", "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("InterfaceList", "std::collections::interfacelist").WithGenericArguments(symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build()).Build()).WithDocs("The AnyList contains a heterogenous set of types. Anything placed in the\nlist will shallowly copied in order to be stored as an `any`. This means\nthat the list will copy and free its elements.\n\nHowever, because we're getting `any` values back when we pop, those operations\nneed to take an allocator, as we can only copy then pop then return the copy.\n\nIf we're not doing pop, then things are easier, since we can just hand over\nthe existing any.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.first", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return the first element by value, assuming it is the given type.").WithContract("@param", "$Type : \"The type of the first element\"").WithContract("@return", "\"The first element\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first_any", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the first element").WithContract("@return", "\"The first element\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.last", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return the last element by value, assuming it is the given type.").WithContract("@param", "$Type : \"The type of the last element\"").WithContract("@return", "\"The last element\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_any", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").IsOptional().Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the last element").WithContract("@return", "\"The last element\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.pop", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Pop a value who's type is known. If the type is incorrect, this\nwill still pop the element.").WithContract("@param", "$Type : \"The type we assume the value has\"").WithContract("@return", "\"The last value as the type given\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.pop_first", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Pop a value who's type is known. If the type is incorrect, this\nwill still pop the element.").WithContract("@param", "$Type : \"The type we assume the value has\"").WithContract("@return", "\"The first value as the type given\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AnyList.get", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return an element in the list by value, assuming it is the given type.").WithContract("@param", "index : \"The index of the element to retrieve\"").WithContract("@param", "$Type : \"The type of the element\"").WithContract("@return", "\"The element at the index\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").WithContract("@require", "index < self.size : \"Index out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_any", symbols.NewBaseTypeBuilder("any", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return an element in the list.").WithContract("@param", "index : \"The index of the element to retrieve\"").WithContract("@return", "\"The element at the index\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").WithContract("@require", "index < self.size : \"Index out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").WithTypeIdentifier("AnyList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("AnyList*", "std::collections::anylist").Build(), "std::collections::anylist", "<stdlib-path>/collections/anylist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the length of the list.").WithContract("@return", "\"The number of elements in the list\"").Build()).WithoutSourceCode().Build())

	// Define module std::collections::bitset
	module = moduleCollection["std::collections::bitset"]
	module.AddVariable(symbols.NewVariableBuilder("BITS", symbols.NewTypeBuilder("", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddVariable(symbols.NewVariableBuilder("SZ", symbols.NewTypeBuilder("", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("BitSet", "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("uint", "std::collections::bitset").IsUnsizedCollection().Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"The number of bits set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Set a bit in the bitset.").WithContract("@param", "i : \"The index to set\"").WithContract("@require", "i < SIZE : \"Index was out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("BitSet.xor_self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Perform xor over all bits, mutating itself").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Perform xor over all bits, returning a new bit set.").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("or", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Perform or over all bits, returning a new bit set.").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("BitSet.or_self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Perform or over all bits, mutating itself").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("and", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Perform & over all bits, returning a new bit set.").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("BitSet.and_self", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("BitSet", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Perform & over all bits, mutating itself.").WithContract("@param", "set : \"The bit set to xor with\"").WithContract("@return", "\"The resulting bit set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Unset (clear) a bit in the bitset.").WithContract("@param", "i : \"The index to set\"").WithContract("@require", "i < SIZE : \"Index was out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewBaseTypeBuilder("bool", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get a particular bit in the bitset").WithContract("@param", "i : \"The index of the bit\"").WithContract("@require", "i < SIZE : \"Index was out of range\"").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the number of bits.").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewBaseTypeBuilder("void", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("BitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitSet*", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::collections::bitset").Build(), "std::collections::bitset", "<stdlib-path>/collections/bitset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Change a particular bit in the bitset").WithContract("@param", "i : \"The index of the bit\"").WithContract("@param", "value : \"The value to set the bit to\"").WithContract("@require", "i < SIZE : \"Index was out of range\"").Build()).WithoutSourceCode().Build())

	// Define module std::collections::growablebitset
	module = moduleCollection["std::collections::growablebitset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("BITS", symbols.NewTypeBuilder("", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).AddStruct(symbols.NewStructBuilder("GrowableBitSet", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithStructMember("data", symbols.NewTypeBuilder("GrowableBitSetList", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("GrowableBitSetList", "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::growablebitset").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithArgDefault("1").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "initial_capacity").WithContract("@param", "[&inout] allocator : \"The allocator to use, defaults to the heap allocator\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithArgDefault("1").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cardinality", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unset", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewBaseTypeBuilder("bool", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_bool", symbols.NewBaseTypeBuilder("void", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").WithTypeIdentifier("GrowableBitSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("GrowableBitSet*", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::collections::growablebitset").Build(), "std::collections::growablebitset", "<stdlib-path>/collections/bitset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::elastic_array
	module = moduleCollection["std::collections::elastic_array"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_POINTER", symbols.NewTypeBuilder("", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).AddStruct(symbols.NewStructBuilder("ElasticArray", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithStructMember("entries", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementPredicate", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithResolvesTo("fn bool(Type *type)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementTest", "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithResolvesTo("fn bool(Type *type, any context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_is_overaligned", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_try", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.size < MAX_SIZE : `Tried to exceed the max size`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.size > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "other_list.size + self.size <= MAX_SIZE").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all_to_limit", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add as many elements as possible to the new array,\nreturning the number of elements that didn't fit.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array_to_limit", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add as many values from this array as possible, returning the\nnumber of elements that didn't fit.").WithContract("@param", "[in] array").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_all_to_limit", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add as many values from this array as possible, returning the\nnumber of elements that didn't fit.").WithContract("@param", "[in] array").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add the values of an array to this list.").WithContract("@param", "[in] array").WithContract("@require", "array.len + self.size <= MAX_SIZE : `Size would exceed max.`").WithContract("@ensure", "self.size >= array.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_all", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add the values of an array to this list.").WithContract("@param", "[in] array").WithContract("@require", "array.len + self.size <= MAX_SIZE : `Size would exceed max.`").WithContract("@ensure", "self.size >= array.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_aligned_array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("IMPORTANT The returned array must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ElasticArray.to_array", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!type_is_overaligned() : \"This function is not available on overaligned types\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tarray", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reverse the elements in a list.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsUnsizedCollection().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.size < MAX_SIZE : `List would exceed max size`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front_try", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.size < MAX_SIZE : `List would exceed max size`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at_try", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.size < MAX_SIZE : `List would exceed max size`").WithContract("@require", "index <= self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_at", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("byte_size", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementPredicate", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "filter : \"The function to determine if it should be removed or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("ElementPredicate", "std::collections::list").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "selection : \"The function to determine if it should be kept or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ElasticArray.@item_at", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").IsOptional().Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check for presence of a value in a list.").WithContract("@param", "[&in] self : \"the list to find elements in\"").WithContract("@param", "value : \"The value to search for\"").WithContract("@return", "\"True if the value is found, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_item", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"true if the value was found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_item", symbols.NewBaseTypeBuilder("bool", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"true if the value was found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"the number of deleted elements.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("void", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact_count", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] self").WithContract("@return", "\"The number non-null values in the list\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact", symbols.NewBaseTypeBuilder("usz", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").WithTypeIdentifier("ElasticArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ElasticArray*", "std::collections::elastic_array").Build(), "std::collections::elastic_array", "<stdlib-path>/collections/elastic_array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enummap
	module = moduleCollection["std::collections::enummap"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Enum":      symbols.NewGenericParameter("Enum", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"ValueType": symbols.NewGenericParameter("ValueType", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("EnumMap", "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithStructMember("values", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").IsUnsizedCollection().Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_value", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::enummap").IsOptional().Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"The total size of this map, which is the same as the number of enum values\"").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"Retrieve a value given the underlying enum, if there is no entry, then the zero value for the value is returned.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("ValueType*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").WithTypeIdentifier("EnumMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumMap*", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Enum", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("ValueType", "std::collections::enummap").Build(), "std::collections::enummap", "<stdlib-path>/collections/enummap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::enumset
	module = moduleCollection["std::collections::enumset"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Enum": symbols.NewGenericParameter("Enum", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ENUM_COUNT", symbols.NewTypeBuilder("", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).AddVariable(symbols.NewVariableBuilder("IS_CHAR_ARRAY", symbols.NewTypeBuilder("", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).AddDef(symbols.NewDefBuilder("EnumSetType", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("EnumSet", "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("EnumSetType", "std::collections::enumset").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("bool", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has", symbols.NewBaseTypeBuilder("bool", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Enum", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewBaseTypeBuilder("void", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("and_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("or_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("xor_of", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("EnumSet*", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("EnumSet", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::enumset").IsOptional().Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithTypeIdentifier("EnumSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_for_enum_elements", symbols.NewBaseTypeBuilder("typeid", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").WithArgument(symbols.NewVariableBuilder("$elements", symbols.NewBaseTypeBuilder("usz", "std::collections::enumset").Build(), "std::collections::enumset", "<stdlib-path>/collections/enumset.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::map
	module = moduleCollection["std::collections::map"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Key":   symbols.NewGenericParameter("Key", "std::collections::map", "<stdlib-path>/collections/hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Value": symbols.NewGenericParameter("Value", "std::collections::map", "<stdlib-path>/collections/hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("COPY_KEYS", symbols.NewTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_INITIAL_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_LOAD_FACTOR", symbols.NewTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_HEAP_ALLOCATOR", symbols.NewTypeBuilder("Allocator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAXIMUM_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONHEAP", symbols.NewTypeBuilder("HashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("VALUE_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("dummy", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).AddStruct(symbols.NewStructBuilder("Entry", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("next", symbols.NewTypeBuilder("Entry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashMap", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashMapIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("top_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithStructMember("current_entry", symbols.NewTypeBuilder("Entry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("HashMapKeyIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("HashMapValueIterator", "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.init_with_key_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "$vacount % 2 == 0 : \"There must be an even number of arguments provided for keys and values\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.tinit_with_key_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$vacount % 2 == 0 : \"There must be an even number of arguments provided for keys and values\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_keys_and_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] keys : \"The keys for the HashMap entries\"").WithContract("@param", "[in] values : \"The values for the HashMap entries\"").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "keys.len == values.len : \"Both keys and values arrays must be the same length\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_keys_and_values", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] keys : \"The keys for the HashMap entries\"").WithContract("@param", "[in] values : \"The values for the HashMap entries\"").WithContract("@require", "keys.len == values.len : \"Both keys and values arrays must be the same length\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Has this hash map been initialized yet?").WithContract("@param", "[&in] map : \"The hash map we are testing\"").WithContract("@return", "\"Returns true if it has been initialized, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "[&in] other_map : \"The map to copy from.\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other_map : \"The map to copy from.\"").WithContract("@require", "!map.is_initialized() : \"Map was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Value*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_or_create_ref", symbols.NewGenericTypeBuilder("Value*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_entry", symbols.NewTypeBuilder("Entry*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@get_or_set", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the value or set it to the value").WithContract("@require", "$defined(Value val = #expr)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::encoding").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tkeys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(key, value)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashMap.@each_entry", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(entry)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tvalues", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iter", symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_iter", symbols.NewTypeBuilder("HashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_iter", symbols.NewTypeBuilder("HashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("Entry*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_all_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Entry", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "idx < self.map.count").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapValueIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapKeyIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("idx", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithTypeIdentifier("HashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rehash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_for", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::set
	module = moduleCollection["std::collections::set"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Value": symbols.NewGenericParameter("Value", "std::collections::set", "<stdlib-path>/collections/hashset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("DEFAULT_INITIAL_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_LOAD_FACTOR", symbols.NewTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAXIMUM_CAPACITY", symbols.NewTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONHEAP", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithDocs("Copy the ONHEAP allocator to initialize to a set that is heap allocated").Build()).AddVariable(symbols.NewVariableBuilder("SET_HEAP_ALLOCATOR", symbols.NewTypeBuilder("Allocator", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).AddVariable(symbols.NewVariableBuilder("dummy", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).AddStruct(symbols.NewStructBuilder("Entry", "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("next", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashSet", "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("HashSetIterator", "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("bucket_index", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithStructMember("current", symbols.NewTypeBuilder("Entry*", "std::collections::map").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashSet.init_with_values", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashSet.tinit_with_values", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_values", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] values : \"The values for the HashSet\"").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_values", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] values : \"The values for the HashSet entries\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Has this hash set been initialized yet?").WithContract("@param", "[&in] set : \"The hash set we are testing\"").WithContract("@return", "\"Returns true if it has been initialized, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "[&in] other_set : \"The set to copy from.\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other_set : \"The set to copy from.\"").WithContract("@require", "!set.is_initialized() : \"Set was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the set is empty").WithContract("@return", "\"true if it is empty\"").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add all elements in the slice to the set.").WithContract("@param", "[in] list").WithContract("@return", "\"The number of new elements added\"").WithContract("@ensure", "total <= list.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all_from", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other").WithContract("@return", "\"The number of new elements added\"").WithContract("@ensure", "return <= other.count").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to add\"").WithContract("@return", "\"true if the value didn't exist in the set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("HashSet.@each", symbols.NewTypeBuilder("", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(value)", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Iterate over all the values in the set").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the set contains the given value.").WithContract("@param", "value : \"The value to check\"").WithContract("@return", "\"true if it exists in the set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove a single value from the set.").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "? NOT_FOUND : \"If the entry is not found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other : \"Other set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free all memory allocated by the hash set.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Clear all elements from the set while keeping the underlying storage").WithContract("@ensure", "set.count == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tvalues", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_union", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the union of two sets (A | B)").WithContract("@param", "[&in] other : \"The other set to union with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing the union of both sets\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tset_union", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("intersection", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the intersection of the two sets (A & B)").WithContract("@param", "[&in] other : \"The other set to intersect with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing the intersection of both sets\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tintersection", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("difference", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return this set - other, so (A & ~B)").WithContract("@param", "[&in] other : \"The other set to compare with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing elements in this set but not in the other\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdifference", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symmetric_difference", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return (A ^ B)").WithContract("@param", "[&in] other : \"The other set to compare with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing elements in this set or the other, but not both\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tsymmetric_difference", symbols.NewTypeBuilder("HashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subset", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if this hash set is a subset of another set.").WithContract("@param", "[&in] other : \"The other set to check against\"").WithContract("@return", "\"True if all elements of this set are in the other set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("Entry*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_all_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_set", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_value", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Removes the entry for the specified value if present").WithContract("@return", "\"true if found and removed, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("Entry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iter", symbols.NewTypeBuilder("HashSetIterator", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithTypeIdentifier("HashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("HashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rehash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_for", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/hashset.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::interfacelist
	module = moduleCollection["std::collections::interfacelist"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("InterfaceList", "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithStructMember("entries", symbols.NewGenericTypeBuilder("Type*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithDocs("The InterfaceList contains a heterogenous set of types implementing an interface. anything placed in the\nlist will shallowly copied in order to be stored as the interface. This means\nthat the list will copy and free its elements.\n\nHowever, because we're getting interface values back when we pop, those operations\nneed to take an allocator, as we can only copy then pop then return the copy.\n\nIf we're not doing pop, then things are easier, since we can just hand over\nthe existing value.").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("InterfacePredicate", "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithResolvesTo("fn bool(Type value)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("InterfaceTest", "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithResolvesTo("fn bool(Type type, Type context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgDefault("16").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the list. If not initialized then it will use the temp allocator\nwhen something is pushed to it.").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "initial_capacity : \"The initial capacity to reserve, defaults to 16\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgDefault("16").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the list using the temp allocator.").WithContract("@param", "initial_capacity : \"The initial capacity to reserve\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList.push", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewTypeBuilder("", "").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Push an element on the list by cloning it.").WithContract("@require", "$defined(Type t = &element) : \"Element must implement the interface\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_element", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free a retained element removed using *_retained.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_pop", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy the last value, pop it and return the copy of it.").WithContract("@param", "[&inout] allocator : \"The allocator to use for copying\"").WithContract("@return", "\"A copy of the last value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_pop", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy the last value, pop it and return the copy of it.").WithContract("@return", "\"A temp copy of the last value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_retained", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Pop the last value. It must later be released using `list.free_element()`.").WithContract("@return", "\"The last value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove all elements in the list.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first_retained", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Pop the first value. It must later be released using `list.free_element()`.").WithContract("@return", "\"The first value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_pop_first", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy the first value, pop it and return the copy of it.").WithContract("@param", "[&inout] allocator : \"The allocator to use for copying\"").WithContract("@return", "\"A copy of the first value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_pop_first", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy the first value, pop it and return the temp copy of it.").WithContract("@return", "\"A temp copy of the first value if it exists\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove the element at the particular index.").WithContract("@param", "index : \"The index of the element to remove\"").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add all the elements in another InterfaceList.").WithContract("@param", "[&in] other_list : \"The list to add\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reverse the order of the elements in the list.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsUnsizedCollection().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return a view of the data as a slice.").WithContract("@return", "\"The slice view\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList.push_front", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Push an element to the front of the list.").WithContract("@param", "value : \"The value to push to the list\"").WithContract("@require", "$defined(Type t = &value) : \"Value must implement the interface\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList.insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("", "").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Insert an element at a particular index.").WithContract("@param", "index : \"the index where the element should be inserted\"").WithContract("@param", "type : \"the value to insert\"").WithContract("@require", "index <= self.size : \"The index is out of bounds\"").WithContract("@require", "$defined(Type t = &type) : \"Type must implement the interface\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove the last element in the list. The list may not be empty.").WithContract("@require", "self.size > 0 : \"The list was already empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove the first element in the list, the list may not be empty.").WithContract("@require", "self.size > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the first element").WithContract("@return", "\"The first element\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the last element").WithContract("@return", "\"The last element\"").WithContract("@return", "? NO_MORE_ELEMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return whether the list is empty.").WithContract("@return", "\"True if the list is empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return the length of the list.").WithContract("@return", "\"The number of elements in the list\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return an element in the list.").WithContract("@param", "index : \"The index of the element to retrieve\"").WithContract("@return", "\"The element at the index\"").WithContract("@return", "? TYPE_MISMATCH, NO_MORE_ELEMENT").WithContract("@require", "index < self.size : \"Index out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Completely free and clear a list.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Swap two elements in a list.").WithContract("@param", "i : \"Index of one of the elements\"").WithContract("@param", "j : \"Index of the other element\"").WithContract("@require", "i < self.size : \"The first index is out of range\"").WithContract("@require", "j < self.size : \"The second index is out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").IsOptional().Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Print the list to a formatter.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("InterfacePredicate", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove Type elements matching the predicate.").WithContract("@param", "filter : \"The function to determine if it should be removed or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("InterfacePredicate", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Retain the elements matching the predicate.").WithContract("@param", "selection : \"The function to determine if it should be kept or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("InterfaceTest", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove Type elements matching the predicate.").WithContract("@param", "filter : \"The function to determine if it should be removed or not\"").WithContract("@param", "context : \"The context to the function\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("InterfaceTest", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Retain Type elements matching the predicate.").WithContract("@param", "selection : \"The function to determine if it should be retained or not\"").WithContract("@param", "context : \"The context to the function\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reserve memory so that at least the `min_capacity` exists.").WithContract("@param", "min_capacity : \"The min capacity to hold\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList.set", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Set the element at Type index.").WithContract("@param", "index : \"The index where to set the value.\"").WithContract("@param", "value : \"The value to set\"").WithContract("@require", "index <= self.size : \"Index out of range\"").WithContract("@require", "$defined(Type t = &value) : \"Value must implement the interface\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgDefault("1").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_append", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithTypeIdentifier("InterfaceList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList._remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("InterfaceTest", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$invert", symbols.NewBaseTypeBuilder("bool", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("InterfaceList._remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InterfaceList*", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("InterfacePredicate", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).WithArgument(symbols.NewVariableBuilder("$invert", symbols.NewBaseTypeBuilder("bool", "std::collections::interfacelist").Build(), "std::collections::interfacelist", "<stdlib-path>/collections/interfacelist.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::blockingqueue
	module = moduleCollection["std::collections::blockingqueue"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Value": symbols.NewGenericParameter("Value", "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("INITIAL_CAPACITY", symbols.NewTypeBuilder("", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).AddStruct(symbols.NewStructBuilder("LinkedBlockingQueue", "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("head", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("tail", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("usz", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("lock", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("not_empty", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("not_full", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("QueueEntry", "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("next", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithStructMember("prev", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "capacity : \"Maximum capacity (0 for unbounded)\"").WithContract("@require", "!self.is_initialized() : \"Queue was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_entry", symbols.NewBaseTypeBuilder("void", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_head", symbols.NewTypeBuilder("QueueEntry*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"Value to add to the queue\"").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get a value from the queue, blocking if there is no element in the queue.").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"The removed value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").IsOptional().Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Pop an element from the queue, fail is it is empty.").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"The removed value\"").WithContract("@return", "? NO_MORE_ELEMENT : \"If the queue is empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll_timeout", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").IsOptional().Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Poll with a timeout.").WithContract("@param", "timeout : \"Timeout in microseconds\"").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"The removed value or null if timeout occurred\"").WithContract("@return", "? NO_MORE_ELEMENT : \"If we reached the timeout\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"Current size of the queue\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"True if queue is empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_push", symbols.NewBaseTypeBuilder("void", "std::collections::blockingqueue").IsOptional().Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Try to push, return CAPACITY_EXCEEDED if the queue is full.").WithContract("@param", "value : \"Value to add to the queue\"").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "? CAPACITY_EXCEEDED : \"If the queue is full\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_timeout", symbols.NewBaseTypeBuilder("void", "std::collections::blockingqueue").IsOptional().Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Try to push, return CAPACITY_EXCEEDED if the queue is still full after timeout is reached.").WithContract("@param", "value : \"Value to add to the queue\"").WithContract("@param", "timeout : \"Timeout in microseconds\"").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "? CAPACITY_EXCEEDED : \"If the queue is full\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewGenericTypeBuilder("Value", "std::collections::blockingqueue").IsOptional().Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Queue must be initialized\"").WithContract("@return", "\"The head value or NO_MORE_ELEMENT? if queue is empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").WithTypeIdentifier("LinkedBlockingQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedBlockingQueue*", "std::collections::blockingqueue").Build(), "std::collections::blockingqueue", "<stdlib-path>/collections/linked_blockingqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"True if queue is initialized\"").Build()).WithoutSourceCode().Build())

	// Define module std::collections::map
	module = moduleCollection["std::collections::map"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Key":   symbols.NewGenericParameter("Key", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Value": symbols.NewGenericParameter("Value", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("LINKEDONHEAP", symbols.NewTypeBuilder("LinkedHashMap", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).AddVariable(symbols.NewVariableBuilder("dummy", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).AddStruct(symbols.NewStructBuilder("LinkedEntry", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("next", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("before", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("after", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LinkedHashMap", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("table", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("head", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("tail", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LinkedHashMapIterator", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("current", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithStructMember("started", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("LinkedHashMapKeyIterator", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("LinkedHashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("LinkedHashMapValueIterator", "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("LinkedHashMapIterator", "std::collections::map").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashMap.init_with_key_values", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "$vacount % 2 == 0 : \"There must be an even number of arguments provided for keys and values\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashMap.tinit_with_key_values", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$vacount % 2 == 0 : \"There must be an even number of arguments provided for keys and values\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_keys_and_values", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] keys : \"The keys for the LinkedHashMap entries\"").WithContract("@param", "[in] values : \"The values for the LinkedHashMap entries\"").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "keys.len == values.len : \"Both keys and values arrays must be the same length\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_keys_and_values", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] keys : \"The keys for the LinkedHashMap entries\"").WithContract("@param", "[in] values : \"The values for the LinkedHashMap entries\"").WithContract("@require", "keys.len == values.len : \"Both keys and values arrays must be the same length\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Has this hash map been initialized yet?").WithContract("@param", "[&in] map : \"The hash map we are testing\"").WithContract("@return", "\"Returns true if it has been initialized, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "[&in] other_map : \"The map to copy from.\"").WithContract("@require", "!self.is_initialized() : \"Map was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other_map : \"The map to copy from.\"").WithContract("@require", "!map.is_initialized() : \"Map was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Value*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_entry", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashMap.@get_or_set", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the value or set it to the value").WithContract("@require", "$defined(Value val = #expr)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tkeys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("keys", symbols.NewGenericTypeBuilder("Key", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashMap.@each", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(key, value)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashMap.@each_entry", symbols.NewTypeBuilder("", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(entry)", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tvalues", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iter", symbols.NewTypeBuilder("LinkedHashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value_iter", symbols.NewTypeBuilder("LinkedHashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("key_iter", symbols.NewTypeBuilder("LinkedHashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapValueIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Key*", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapKeyIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_next", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapIterator*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::map").IsOptional().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").IsUnsizedCollection().Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_all_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_map", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_key", symbols.NewBaseTypeBuilder("bool", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("map", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewGenericTypeBuilder("Key", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMap*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapValueIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapValueIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapKeyIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapKeyIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").WithTypeIdentifier("LinkedHashMapIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashMapIterator", "std::collections::map").Build(), "std::collections::map", "<stdlib-path>/collections/linked_hashmap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::set
	module = moduleCollection["std::collections::set"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Value": symbols.NewGenericParameter("Value", "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("LINKEDONHEAP", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).AddVariable(symbols.NewVariableBuilder("dummy", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).AddStruct(symbols.NewStructBuilder("LinkedEntry", "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("next", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("before", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("after", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LinkedHashSet", "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("table", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("head", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("tail", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LinkedHashSetIterator", "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("set", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("current", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::map").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithStructMember("started", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashSet.init_with_values", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashSet.tinit_with_values", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_values", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] values : \"The values for the LinkedHashSet\"").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_values", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgDefault("DEFAULT_LOAD_FACTOR").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] values : \"The values for the LinkedHashSet entries\"").WithContract("@require", "capacity > 0 : \"The capacity must be 1 or higher\"").WithContract("@require", "load_factor > 0.0 : \"The load factor must be higher than 0\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").WithContract("@require", "capacity < MAXIMUM_CAPACITY : \"Capacity cannot exceed maximum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Has this linked hash set been initialized yet?").WithContract("@param", "[&in] set : \"The linked hash set we are testing\"").WithContract("@return", "\"Returns true if it has been initialized, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_from_set", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_set", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "[&in] other_set : \"The set to copy from.\"").WithContract("@require", "!self.is_initialized() : \"Set was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_from_set", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_set", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other_set : \"The set to copy from.\"").WithContract("@require", "!set.is_initialized() : \"Set was already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the set is empty").WithContract("@return", "\"true if it is empty\"").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add all elements in the slice to the set.").WithContract("@param", "[in] list").WithContract("@return", "\"The number of new elements added\"").WithContract("@ensure", "total <= list.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all_from", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other").WithContract("@return", "\"The number of new elements added\"").WithContract("@ensure", "return <= other.count").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to add\"").WithContract("@return", "\"true if the value didn't exist in the set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedHashSet.@each", symbols.NewTypeBuilder("", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(value)", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Iterate over all the values in the set").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the set contains the given value.").WithContract("@param", "value : \"The value to check\"").WithContract("@return", "\"true if it exists in the set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("void", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove a single value from the set.").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "? NOT_FOUND : \"If the entry is not found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Value", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] other : \"Other set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free all memory allocated by the hash set.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Clear all elements from the set while keeping the underlying storage").WithContract("@ensure", "set.count == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_union", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the union of two sets (A | B)").WithContract("@param", "[&in] other : \"The other set to union with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing the union of both sets\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tset_union", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("intersection", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the intersection of the two sets (A & B)").WithContract("@param", "[&in] other : \"The other set to intersect with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing the intersection of both sets\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tintersection", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("difference", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return this set - other, so (A & ~B)").WithContract("@param", "[&in] other : \"The other set to compare with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing elements in this set but not in the other\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdifference", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symmetric_difference", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return (A ^ B)").WithContract("@param", "[&in] other : \"The other set to compare with\"").WithContract("@param", "[&inout] allocator : \"Allocator for the new set\"").WithContract("@return", "\"A new set containing elements in this set or the other, but not both\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tsymmetric_difference", symbols.NewTypeBuilder("LinkedHashSet", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subset", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if this hash set is a subset of another set.").WithContract("@param", "[&in] other : \"The other set to check against\"").WithContract("@return", "\"True if all elements of this set are in the other set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSet*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transfer", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_table", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").IsUnsizedCollection().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("put_for_create", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_internal", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("bucket_index", symbols.NewBaseTypeBuilder("int", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_entry_for_value", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Value", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_entry", symbols.NewBaseTypeBuilder("void", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithArgument(symbols.NewVariableBuilder("entry", symbols.NewTypeBuilder("LinkedEntry*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iter", symbols.NewTypeBuilder("LinkedHashSetIterator", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSet").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Value*", "std::collections::set").IsOptional().Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_next", symbols.NewBaseTypeBuilder("bool", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").WithTypeIdentifier("LinkedHashSetIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedHashSetIterator*", "std::collections::set").Build(), "std::collections::set", "<stdlib-path>/collections/linked_hashset.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::linkedlist
	module = moduleCollection["std::collections::linkedlist"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).AddStruct(symbols.NewStructBuilder("LinkedList", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_first", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("_last", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LinkedListArrayView", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("list", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("current_node", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("current_index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Node", "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("next", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("prev", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@new", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("#default_values", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsUnsizedCollection().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgDefault("{}").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@tnew", symbols.NewTypeBuilder("LinkedList", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("#default_values", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsUnsizedCollection().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgDefault("{}").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator to use, defaults to the heap allocator\"").WithContract("@return", "\"the initialized list\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.free_node", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("node", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.alloc_node", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front_all", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsUnsizedCollection().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_all", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsUnsizedCollection().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek_last", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.node_at_index", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("link_before", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("succ", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "succ != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_first", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self._first != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_front", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").IsOptional().Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_match", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_match", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("t", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink_last", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self._last != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlink", symbols.NewBaseTypeBuilder("void", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("Node*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "x != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("LinkedList.eq", symbols.NewBaseTypeBuilder("bool", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("", "").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewTypeBuilder("LinkedListArrayView", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedList").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedList*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedListArrayView").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedListArrayView*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedListArrayView").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedListArrayView*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.list.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").WithTypeIdentifier("LinkedListArrayView").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LinkedListArrayView*", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::linkedlist").Build(), "std::collections::linkedlist", "<stdlib-path>/collections/linkedlist.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.list.size").Build()).WithoutSourceCode().Build())

	// Define module std::collections::list
	module = moduleCollection["std::collections::list"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::list", "<stdlib-path>/collections/list.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_EQUATABLE", symbols.NewTypeBuilder("", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELEMENT_IS_POINTER", symbols.NewTypeBuilder("", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIST_HEAP_ALLOCATOR", symbols.NewTypeBuilder("Allocator", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONHEAP", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddVariable(symbols.NewVariableBuilder("dummy", symbols.NewBaseTypeBuilder("int", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).AddStruct(symbols.NewStructBuilder("List", "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithStructMember("entries", symbols.NewGenericTypeBuilder("Type*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementPredicate", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementTest", "std::collections::list", "<stdlib-path>/collections/list.c3").WithResolvesTo("fn bool(Type *type, any context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_is_overaligned", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgDefault("16").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "initial_capacity : \"The initial capacity to reserve\"").WithContract("@param", "[&inout] allocator : \"The allocator to use, defaults to the heap allocator\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgDefault("16").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the list using the temp allocator.").WithContract("@param", "initial_capacity : \"The initial capacity to reserve\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_array", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize a new list with an array.").WithContract("@param", "[in] values : `The values to initialize the list with.`").WithContract("@require", "self.size == 0 : \"The List must be empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit_with_array", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize a temporary list with an array.").WithContract("@param", "[in] values : `The values to initialize the list with.`").WithContract("@require", "self.size == 0 : \"The List must be empty\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_wrapping_array", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!self.is_initialized() : \"The List must not be allocated\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_first", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size : `Removed element out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_all", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_aligned_array", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("IMPORTANT The returned array must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.to_array", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!type_is_overaligned() : \"This function is not available on overaligned types\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tarray", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reverse the elements in a list.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("array_view", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_array", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add the values of an array to this list.").WithContract("@param", "[in] array").WithContract("@ensure", "self.size >= array.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_all", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsUnsizedCollection().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add the values of an array to this list.").WithContract("@param", "[in] array").WithContract("@ensure", "self.size >= array.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_front", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.size : `Insert was out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_at", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last", symbols.NewBaseTypeBuilder("void", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first", symbols.NewBaseTypeBuilder("void", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last", symbols.NewGenericTypeBuilder("Type", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("byte_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size : `Access out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swap", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("j", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "i < self.size && j < self.size : `Access out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementPredicate", "std::collections::elastic_array").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "filter : \"The function to determine if it should be removed or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("selection", symbols.NewTypeBuilder("ElementPredicate", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "selection : \"The function to determine if it should be kept or not\"").WithContract("@return", "\"the number of deleted elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("ElementTest", "std::collections::elastic_array").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("any", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.@item_at", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size : `Access out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ref", symbols.NewGenericTypeBuilder("Type*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size : `Access out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.size : `Access out of bounds`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("added", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_update_size_change", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "new_size == 0 || self.capacity != 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.pre_free", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("List.post_alloc", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.capacity > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz", "std::collections::list").IsOptional().Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check for presence of a value in a list.").WithContract("@param", "[&in] self : \"the list to find elements in\"").WithContract("@param", "value : \"The value to search for\"").WithContract("@return", "\"True if the value is found, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_last_item", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"true if the value was found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_first_item", symbols.NewBaseTypeBuilder("bool", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"true if the value was found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self : \"The list to remove elements from\"").WithContract("@param", "value : \"The value to remove\"").WithContract("@return", "\"the number of deleted elements.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_all_from", symbols.NewBaseTypeBuilder("void", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_list", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact_count", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] self").WithContract("@return", "\"The number non-null values in the list\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compact", symbols.NewBaseTypeBuilder("usz", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").WithTypeIdentifier("List").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("List*", "std::collections::list").Build(), "std::collections::list", "<stdlib-path>/collections/list.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::list_common
	module = moduleCollection["std::collections::list_common"]
	module.AddFunction(symbols.NewFunctionBuilder("list_to_aligned_array", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("IMPORTANT The returned array must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_to_array", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_reverse", symbols.NewBaseTypeBuilder("void", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_using_test", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("$invert", symbols.NewBaseTypeBuilder("bool", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_compact", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_item", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_remove_if", symbols.NewBaseTypeBuilder("usz", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("filter", symbols.NewTypeBuilder("", "").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).WithArgument(symbols.NewVariableBuilder("$invert", symbols.NewBaseTypeBuilder("bool", "std::collections::list_common").Build(), "std::collections::list_common", "<stdlib-path>/collections/list_common.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::collections::maybe
	module = moduleCollection["std::collections::maybe"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("EMPTY", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).AddStruct(symbols.NewStructBuilder("Maybe", "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("value", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithStructMember("has_value", symbols.NewBaseTypeBuilder("bool", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::maybe").IsOptional().Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe*", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe*", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe*", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("value", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Maybe.get", symbols.NewGenericTypeBuilder("Type", "std::collections::maybe").IsOptional().Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").WithTypeIdentifier("Maybe").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Maybe", "std::collections::maybe").Build(), "std::collections::maybe", "<stdlib-path>/collections/maybe.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::object
	module = moduleCollection["std::collections::object"]
	module.AddVariable(symbols.NewVariableBuilder("FALSE_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("NULL_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRUE_OBJECT", symbols.NewTypeBuilder("Object", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).AddStruct(symbols.NewStructBuilder("Object", "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("uint128", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("double", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("other", symbols.NewBaseTypeBuilder("void*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("array", symbols.NewTypeBuilder("ObjectInternalList", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithStructMember("map", symbols.NewTypeBuilder("ObjectInternalMap", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalList", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMap", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::collections::object").Build(), symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjectInternalMapEntry", "std::collections::object", "<stdlib-path>/collections/object.c3").WithResolvesToType(symbols.NewTypeBuilder("Entry", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::collections::object").Build(), symbols.NewTypeBuilder("Object*", "std::collections::object").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_obj", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_null", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_int", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("int128", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_enum", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("e", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_float", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("double", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_string", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_bool", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_null", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_map", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_string", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_keyable", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_indexable", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_map_if_needed", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_array_if_needed", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_object", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.object_from_value", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.allocator != null : \"This object is not properly initialized, was it really created using 'new'\"").WithContract("@require", "$typeof(value) != void* ||| value == null : \"void pointers cannot be stored in an object\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.set_at", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.push", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").WithContract("@ensure", "return != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_key", symbols.NewBaseTypeBuilder("bool", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_at", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_len", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_object", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_append", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_object_at", symbols.NewBaseTypeBuilder("void", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_set", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_integer_value", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.kindof.is_int() : \"Expected an integer type.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer_at", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").WithContract("@require", "$Type.kindof.is_int() : \"Expected an integer type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_integer", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").WithContract("@require", "$Type.kindof.is_int() : \"Expected an integer type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar", symbols.NewBaseTypeBuilder("ichar", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short", symbols.NewBaseTypeBuilder("short", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int", symbols.NewBaseTypeBuilder("int", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long", symbols.NewBaseTypeBuilder("long", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128", symbols.NewBaseTypeBuilder("int128", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ichar_at", symbols.NewBaseTypeBuilder("ichar", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_short_at", symbols.NewBaseTypeBuilder("short", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int_at", symbols.NewBaseTypeBuilder("int", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_long_at", symbols.NewBaseTypeBuilder("long", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_int128_at", symbols.NewBaseTypeBuilder("int128", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char", symbols.NewBaseTypeBuilder("char", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort", symbols.NewBaseTypeBuilder("short", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint", symbols.NewBaseTypeBuilder("uint", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong", symbols.NewBaseTypeBuilder("ulong", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128", symbols.NewBaseTypeBuilder("uint128", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_char_at", symbols.NewBaseTypeBuilder("char", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ushort_at", symbols.NewBaseTypeBuilder("ushort", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint_at", symbols.NewBaseTypeBuilder("uint", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ulong_at", symbols.NewBaseTypeBuilder("ulong", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_uint128_at", symbols.NewBaseTypeBuilder("uint128", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_string_at", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum", symbols.NewTypeBuilder("String", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Object.get_enum_at", symbols.NewTypeBuilder("String", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool", symbols.NewBaseTypeBuilder("bool", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_bool_at", symbols.NewBaseTypeBuilder("bool", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float", symbols.NewBaseTypeBuilder("double", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_keyable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_float_at", symbols.NewBaseTypeBuilder("double", "std::collections::object").IsOptional().Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_indexable()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_or_create_obj", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").WithTypeIdentifier("Object").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Object*", "std::collections::object").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::collections::object", "<stdlib-path>/collections/object.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::priorityqueue
	module = moduleCollection["std::collections::priorityqueue"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddDistinct(symbols.NewDistinctBuilder("PriorityQueue", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue").Build()).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("PriorityQueueMax", "std::collections::priorityqueue", "<stdlib-path>/collections/priorityqueue.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue").Build()).Build()).WithoutSourceCode().Build())

	// Define module std::collections::priorityqueue::private
	module = moduleCollection["std::collections::priorityqueue::private"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("PrivatePriorityQueue", "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithStructMember("heap", symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build()).Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithArgDefault("16").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithArgDefault("16").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("element", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove_at", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len() : \"Index out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("first", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_empty", symbols.NewBaseTypeBuilder("bool", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::priorityqueue::private").IsOptional().Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").WithTypeIdentifier("PrivatePriorityQueue").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("PrivatePriorityQueue*", "std::collections::priorityqueue::private").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::priorityqueue::private", "<stdlib-path>/collections/priorityqueue.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::range
	module = moduleCollection["std::collections::range"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::range", "<stdlib-path>/collections/range.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("ExclusiveRange", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Range", "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("start", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithStructMember("end", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len() : \"Can't index into an empty range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::range").IsOptional().Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("Range").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Range*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::range").IsOptional().Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewGenericTypeBuilder("Type", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").WithTypeIdentifier("ExclusiveRange").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExclusiveRange*", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::range").Build(), "std::collections::range", "<stdlib-path>/collections/range.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len() : \"Can't index into an empty range\"").Build()).WithoutSourceCode().Build())

	// Define module std::collections::ringbuffer
	module = moduleCollection["std::collections::ringbuffer"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("RingBuffer", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("buf", symbols.NewGenericTypeBuilder("Type", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("written", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithStructMember("head", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Element", "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::types").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Element", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Element", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewTypeBuilder("Element", "std::collections::ringbuffer").IsOptional().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").IsOptional().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Element", "std::collections::ringbuffer").IsUnsizedCollection().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("void", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").WithTypeIdentifier("RingBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("RingBuffer*", "std::collections::ringbuffer").Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Element", "std::collections::ringbuffer").IsUnsizedCollection().Build(), "std::collections::ringbuffer", "<stdlib-path>/collections/ringbuffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::pair
	module = moduleCollection["std::collections::pair"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::pair", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::pair", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Pair", "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", symbols.NewGenericTypeBuilder("Type1", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", symbols.NewGenericTypeBuilder("Type2", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::pair").IsOptional().Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithTypeIdentifier("Pair").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pair*", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Pair.unpack", symbols.NewBaseTypeBuilder("void", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pair*", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] a").WithContract("@param", "[&out] b").WithContract("@require", "$defined(*a = self.first) : \"You cannot assign the first value to a\"").WithContract("@require", "$defined(*b = self.second) : \"You cannot assign the second value to b\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equal", symbols.NewBaseTypeBuilder("bool", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").WithTypeIdentifier("Pair").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pair", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Pair", "std::collections::pair").Build(), "std::collections::pair", "<stdlib-path>/collections/tuple.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::triple
	module = moduleCollection["std::collections::triple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type3": symbols.NewGenericParameter("Type3", "std::collections::triple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Triple", "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", symbols.NewGenericTypeBuilder("Type1", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", symbols.NewGenericTypeBuilder("Type2", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithStructMember("third", symbols.NewGenericTypeBuilder("Type3", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::collections::triple").IsOptional().Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithTypeIdentifier("Triple").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Triple*", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Triple.unpack", symbols.NewBaseTypeBuilder("void", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Triple*", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] a").WithContract("@param", "[&out] b").WithContract("@param", "[&out] c").WithContract("@require", "$defined(*a = self.first) : \"You cannot assign the first value to a\"").WithContract("@require", "$defined(*b = self.second) : \"You cannot assign the second value to b\"").WithContract("@require", "$defined(*c = self.third) : \"You cannot assign the second value to c\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equal", symbols.NewBaseTypeBuilder("bool", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").WithTypeIdentifier("Triple").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Triple", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Triple", "std::collections::triple").Build(), "std::collections::triple", "<stdlib-path>/collections/tuple.c3").Build()).WithoutSourceCode().Build())

	// Define module std::collections::tuple
	module = moduleCollection["std::collections::tuple"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"Type1": symbols.NewGenericParameter("Type1", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type2": symbols.NewGenericParameter("Type2", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddStruct(symbols.NewStructBuilder("Tuple", "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("first", symbols.NewGenericTypeBuilder("Type1", "std::collections::tuple").Build(), "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithStructMember("second", symbols.NewGenericTypeBuilder("Type2", "std::collections::tuple").Build(), "std::collections::tuple", "<stdlib-path>/collections/tuple.c3").WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("ArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ArenaAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize a memory arena for use using the provided bytes.").WithContract("@param", "[inout] data : \"The memory to use for the arena.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reset the usage completely.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wrap", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Given some memory, create an arena allocator on the stack for it.").WithContract("@param", "[inout] bytes : `The bytes to use, may be empty.`").WithContract("@return", "`An arena allocator using the bytes`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("\"Mark\" the current state of the arena allocator by returning the use count.").WithContract("@return", "`The value to pass to 'reset' in order to reset to the current use.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reset to a previous mark.").WithContract("@param", "mark : `The previous mark.`").WithContract("@require", "mark <= self.used : \"Invalid mark - out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "ptr != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").WithContract("@require", "size > 0").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").WithTypeIdentifier("ArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").WithContract("@require", "old_pointer != null").WithContract("@require", "size > 0").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("PAGE_IS_ALIGNED", symbols.NewTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("AllocChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("BackedArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("last_page", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithDocs("The backed arena allocator provides an allocator that will allocate from a pre-allocated chunk of memory\nprovided by it's backing allocator. The allocator supports mark / reset operations, so it can be used\nas a stack (push-pop) allocator. If the initial memory is used up, it will fall back to regular allocations,\nthat will be safely freed on `reset`.\n\nWhile this allocator is similar to the dynamic arena, it supports multiple \"save points\", which the dynamic arena\ndoesn't.").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ExtraPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("prev_page", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("start", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("ident", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ExtraPage.pagesize", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ExtraPage.is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_backed_allocator", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size >= 16").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_page", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc_page", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("ExtraPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").WithTypeIdentifier("BackedArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BackedArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/backed_arena_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("DynamicArenaAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page", symbols.NewTypeBuilder("DynamicArenaPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("unused_page", symbols.NewTypeBuilder("DynamicArenaPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithDocs("The dynamic arena allocator is an arena allocator that can grow by adding additional arena \"pages\".\nIt only supports reset, at which point all pages except the first one is released to the backing\nallocator.\n\nIf you want multiple save points, use the BackedArenaAllocator instead.\n\nThe advantage over the BackedArenaAllocator, is that when allocating beyond the first \"page\", it will\nretain the characteristics of an arena allocator (allocating a large piece of memory then handing off\nmemory from that memory), whereas the BackedArenaAllocator will have heap allocator characteristics.").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("DynamicArenaPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("memory", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("prev_arena", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithStructMember("current_stack_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator").WithContract("@require", "page_size >= 128").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "ptr != null").WithContract("@require", "self.page != null  : `tried to free pointer on invalid allocator`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0 : `Resize doesn't support zeroing`").WithContract("@require", "old_pointer != null : `Resize doesn't handle null pointers`").WithContract("@require", "self.page != null  : `tried to realloc pointer on invalid allocator`").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc_new", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "math::is_power_of_2(alignment)").WithContract("@require", "size > 0").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").WithTypeIdentifier("DynamicArenaAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DynamicArenaAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/dynamic_arena.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0 : `acquire expects size > 0`").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("Header", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("next", symbols.NewTypeBuilder("Header*", "std::compression::qoi").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("align", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SimpleHeapAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("alloc_fn", symbols.NewTypeBuilder("MemoryAllocFn", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithStructMember("free_list", symbols.NewTypeBuilder("Header*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithDocs("The SimpleHeapAllocator implements a simple heap allocator on top of an allocator function.\n\nIt uses the given allocator function to allocate memory from some source, but never frees it.\nThis allocator is intended to be used in environments where there isn't any native libc malloc,\nand it has to be emulated from a memory region, or wrapping linear memory as is the case for plain WASM.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("MemoryAllocFn", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "allocator != null  : \"An underlying memory provider must be given\"").WithContract("@require", "!self.free_list : \"The allocator may not be already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "old_pointer && bytes > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_calloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_alloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_block", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").WithTypeIdentifier("SimpleHeapAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleHeapAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/heap_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("LIBC_ALLOCATOR", symbols.NewTypeBuilder("LibcAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("LibcAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build()).WithDocs("The LibcAllocator is a wrapper around malloc to conform to the Allocator interface.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").WithTypeIdentifier("LibcAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LibcAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/libc_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("OnStackAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("backing_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("chunk", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithDocs("The OnStackAllocator is similar to the ArenaAllocator: it allocates from a chunk of memory\ngiven to it.\n\nThe difference is that when it runs out of memory it will go directly to its backing allocator\nrather than failing.\n\nIt is utilized by the @stack_mem macro as an alternative to the temp allocator.").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorExtraChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("prev", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("OnStackAllocatorHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize a memory arena for use using the provided bytes.").WithContract("@param", "[&inout] allocator").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "old_pointer != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_in_stack_mem", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_remove_chunk", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("on_stack_allocator_find_chunk", symbols.NewTypeBuilder("OnStackAllocatorExtraChunk*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0").WithContract("@require", "old_pointer != null").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").WithTypeIdentifier("OnStackAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("OnStackAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/on_stack_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").WithContract("@require", "size > 0").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("PAGE_IS_ALIGNED", symbols.NewTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_default_options", symbols.NewTypeBuilder("VmemOptions", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("TempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("vmem", symbols.NewTypeBuilder("Vmem", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("derived", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorChunk", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TempAllocatorPage", "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("prev_page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("start", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("ident", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.pagesize", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TempAllocatorPage.is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_reserve_size").Build()).WithArgument(symbols.NewVariableBuilder("min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_min_size").Build()).WithArgument(symbols.NewVariableBuilder("realloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_realloc_size").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size >= 64").WithContract("@require", "realloc_size >= 64").WithContract("@require", "allocator.type != TempAllocator.typeid : \"You may not create a temp allocator with a TempAllocator as the backing allocator.\"").WithContract("@require", "min_size > TempAllocator.sizeof + 64 : \"Min size must meaningfully hold the data + some bytes\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("derive_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!self.derived").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reset the entire temp allocator, which will merge all the children into it.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.allocated : \"Only a top level allocator should be freed.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_free_page", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_realloc_page", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewTypeBuilder("TempAllocatorPage*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_temp_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_reserve_size").Build()).WithArgument(symbols.NewVariableBuilder("min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_min_size").Build()).WithArgument(symbols.NewVariableBuilder("realloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("temp_allocator_realloc_size").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size > 0").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("derive_allocator", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Reset the entire temp allocator, destroying all children").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").WithTypeIdentifier("TempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/temp_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_BACKTRACE", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("Allocation", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("backtrace", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingAllocator", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("inner_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("map", symbols.NewTypeBuilder("AllocMap", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("mem_total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithStructMember("allocs_total", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AllocMap", "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithResolvesToType(symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build(), symbols.NewTypeBuilder("Allocation", "std::core::mem::allocator").Build()).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize a tracking allocator to wrap (and track) another allocator.").WithContract("@param", "[&inout] allocator : \"The allocator to track\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free this tracking allocator.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"the total allocated memory not yet freed.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"the total memory allocated (freed or not).\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("total_allocation_count", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"the total number of allocations (freed or not).\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocations_tlist", symbols.NewTypeBuilder("Allocation", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_count", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"the number of non-freed allocations.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_leaks", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_report", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint_report", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").WithTypeIdentifier("TrackingAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TrackingAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/tracking_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddStruct(symbols.NewStructBuilder("Vmem", "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("memory", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("pagesize", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("page_pot", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("last_page", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("high_water", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("options", symbols.NewTypeBuilder("VmemOptions", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("VmemHeader", "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("VmemOptions", symbols.NewBaseTypeBuilder("int", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("shrink_on_reset", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("protect_unused_pages", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithStructMember("scratch_released_data", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithConstant(symbols.NewFaultConstantBuilder("VMEM_RESERVE_FAILED", "std::core::mem::allocator", "../../../assets/c3c/lib/std/core/allocators/vmem.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("preferred_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve_page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("VmemOptions", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithArgDefault("{ true, true, env::COMPILER_SAFE_MODE }").Build()).WithArgument(symbols.NewVariableBuilder("min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "!reserve_page_size || math::is_power_of_2(reserve_page_size)").WithContract("@require", "reserve_page_size <= preferred_size : \"The min reserve_page_size size must be less or equal to the preferred size\"").WithContract("@require", "preferred_size >= 1 * mem::KB : \"The preferred size must exceed 1 KB\"").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY, VMEM_RESERVE_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").WithContract("@require", "size > 0").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("owns_pointer", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "alignment <= mem::MAX_MEMORY_ALIGNMENT : `alignment too big`").WithContract("@require", "old_pointer != null").WithContract("@require", "size > 0").WithContract("@return", "? mem::INVALID_ALLOC_SIZE, mem::OUT_OF_MEMORY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Implements the Allocator interface method.").WithContract("@require", "ptr != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mark", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mark <= self.allocated : \"Invalid mark\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithTypeIdentifier("Vmem").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("protect", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("after", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unprotect", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Vmem*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).WithArgument(symbols.NewVariableBuilder("after", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/allocators/vmem.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::string::ansi
	module = moduleCollection["std::core::string::ansi"]
	module.AddEnum(symbols.NewEnumBuilder("Ansi", "String", "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("RESET", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BOLD", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DIM", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ITALIC", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNDERLINE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BLINK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BLINK_FAST", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INVERT", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HIDDEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRIKETHROUGH", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOUBLE_UNDER", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_DIM", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_ITALIC", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_UNDERLINE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_BLINK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_INVERT", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_HIDDEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NO_STRIKETHROUGH", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BLACK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RED", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GREEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("YELLOW", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BLUE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAGENTA", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CYAN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WHITE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DEFAULT", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_BLACK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_RED", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_GREEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_YELLOW", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_BLUE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_MAGENTA", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_CYAN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BRIGHT_WHITE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BLACK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_RED", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_GREEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_YELLOW", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BLUE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_MAGENTA", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_CYAN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_WHITE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_DEFAULT", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_BLACK", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_RED", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_GREEN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_YELLOW", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_BLUE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_MAGENTA", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_CYAN", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BG_BRIGHT_WHITE", "<stdlib-path>/core/ansi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Ansi").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("color_8bit", symbols.NewTypeBuilder("String", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("$index", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("8-bit color code").WithContract("@return", "`the formatting char for the given background color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("color_rgb", symbols.NewTypeBuilder("String", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("$r", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$g", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$b", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("24-bit color code").WithContract("@return", "`the string for the given foreground color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("color", symbols.NewTypeBuilder("String", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("$rgb", symbols.NewBaseTypeBuilder("uint", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("24-bit color code rgb").WithContract("@require", "$rgb <= 0xFF_FF_FF : `Expected a 24 bit RGB value`").WithContract("@return", "`the string char for the given foreground color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("make_color", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("rgb", symbols.NewBaseTypeBuilder("uint", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("24-bit color code rgb").WithContract("@require", "rgb <= 0xFF_FF_FF : `Expected a 24 bit RGB value`").WithContract("@return", "`the string char for the given foreground color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("make_tcolor", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("rgb", symbols.NewBaseTypeBuilder("uint", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("24-bit color code rgb").WithContract("@require", "rgb <= 0xFF_FF_FF : `Expected a 24 bit RGB value`").WithContract("@return", "`the string char for the given foreground color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("make_color_rgb", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("g", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("24-bit color code rgb").WithContract("@return", "`the string char for the given foreground color`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("make_tcolor_rgb", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("g", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("char", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").Build()).WithArgument(symbols.NewVariableBuilder("bg", symbols.NewBaseTypeBuilder("bool", "std::core::string::ansi").Build(), "std::core::string::ansi", "<stdlib-path>/core/ansi.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("24-bit color code rgb").WithContract("@return", "`the string char for the given foreground color`").Build()).WithoutSourceCode().Build())

	// Define module std::core::ascii
	module = moduleCollection["std::core::ascii"]
	module.AddVariable(symbols.NewVariableBuilder("ASCII_LOOKUP", symbols.NewTypeBuilder("CharType[256]", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEX_VALUE", symbols.NewTypeBuilder("char[256]", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddVariable(symbols.NewVariableBuilder("NUMBER_SET", symbols.NewTypeBuilder("AsciiCharset", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddVariable(symbols.NewVariableBuilder("TO_LOWER", symbols.NewTypeBuilder("char[256]", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddVariable(symbols.NewVariableBuilder("TO_UPPER", symbols.NewTypeBuilder("char[256]", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddVariable(symbols.NewVariableBuilder("WHITESPACE_SET", symbols.NewTypeBuilder("AsciiCharset", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).AddBitstruct(symbols.NewBitstructBuilder("CharType", symbols.NewBaseTypeBuilder("ushort", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("lower", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("upper", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("bin_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("hex_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("oct_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("alpha", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("alphanum", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("space", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("printable", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("blank", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("punct", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("control", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithStructMember("graph", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithDocs("Bitstruct containing the different properties of a character").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AsciiCharset", "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::core::ascii").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_lower", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_upper", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_odigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_alpha", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_print", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_graph", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_space", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_alnum", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_punct", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_blank", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@to_lower", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@to_upper", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_lower", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_upper", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alpha", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_print", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_graph", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_space", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_alnum", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_punct", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_blank", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_lower", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_upper", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_digit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_bdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_odigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_xdigit", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_alpha", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_print", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_graph", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_space", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_alnum", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_punct", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_blank", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_cntrl", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.to_lower", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.to_upper", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.from_hex", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Convert a-f/A-F/0-9 to the appropriate hex value.").WithContract("@require", "c.is_xdigit()").WithContract("@ensure", "return >= 0 && return <= 15").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@create_set", symbols.NewTypeBuilder("AsciiCharset", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_set", symbols.NewTypeBuilder("AsciiCharset", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("AsciiCharset.contains", symbols.NewBaseTypeBuilder("bool", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("", "").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::ascii").Build(), "std::core::ascii", "<stdlib-path>/core/ascii.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::bitorder
	module = moduleCollection["std::core::bitorder"]
	module.AddBitstruct(symbols.NewBitstructBuilder("Int128BE", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Int128LE", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntBE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("IntLE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongBE", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("LongLE", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("long", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortBE", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ShortLE", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("short", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128BE", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UInt128LE", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntBE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UIntLE", symbols.NewBaseTypeBuilder("int", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongBE", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("ULongLE", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ulong", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortBE", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("UShortLE", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("ushort", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_array_or_slice_of_char(bytes) : \"argument must be an array, a pointer to an array or a slice of char\"").WithContract("@require", "is_bitorder($Type) : \"type must be a bitorder integer\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_arrayptr_or_slice_of_char(bytes) : \"argument must be a pointer to an array or a slice of char\"").WithContract("@require", "is_bitorder($Type) : \"type must be a bitorder integer\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bitorder", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_array_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_array_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("#bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_arrayptr_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_arrayptr_or_slice_of_char", symbols.NewBaseTypeBuilder("bool", "std::core::bitorder").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").WithArgument(symbols.NewVariableBuilder("#bytes", symbols.NewTypeBuilder("", "").Build(), "std::core::bitorder", "<stdlib-path>/core/bitorder.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddVariable(symbols.NewVariableBuilder("EMPTY_MACRO_SLOT", symbols.NewTypeBuilder("EmptySlot", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithDocs("EMPTY_MACRO_SLOT is a value used for implementing optional arguments for macros in an efficient\n way. It relies on the fact that distinct types are not implicitly convertible.\n\n You can use `@is_empty_macro_slot()` and `@is_valid_macro_slot()` to figure out whether\n the argument has been used or not.\n\n An example:\n\n```c3\nmacro foo(a, #b = EMPTY_MACRO_SLOT)\n{\n\t$if @is_valid_macro_slot(#b):\n\t\treturn invoke_foo2(a, #b);\n\t$else\n\t\treturn invoke_foo1(a);\n\t$endif\n}").Build()).AddVariable(symbols.NewVariableBuilder("MAX_FRAMEADDRESS", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("in_panic", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_bus_error", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("old_segmentation_fault", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddVariable(symbols.NewVariableBuilder("panic", symbols.NewTypeBuilder("PanicFn", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).AddDef(symbols.NewDefBuilder("PanicFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithResolvesTo("fn void(String message, String file, String function, uint line)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("VoidFn", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("EmptySlot", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("PrefetchLocality", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_LOCALITY", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VERY_NEAR", "<stdlib-path>/core/builtin.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PrefetchLocality").Build()).WithDocs("Locality for prefetch, levels 0 - 3, corresponding\nto \"extremely local\" to \"no locality\"").Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithConstant(symbols.NewFaultConstantBuilder("NOT_IMPLEMENTED", "std::core::builtin", "../../../assets/c3c/lib/std/core/builtin.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@is_empty_macro_slot", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#arg", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_macro_slot", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#arg", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@rnd", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsMacro().WithDocs(symbols.NewDocCommentBuilder("Returns a random value at compile time.").WithContract("@ensure", "return >= 0.0 && return < 1.0").WithContract("@return", "\"A compile time random\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scope", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#variable", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Stores a variable on the stack, then restores it at the end of the\nmacro scope.").WithContract("@param", "#variable : `the variable to store and restore`").WithContract("@require", "$defined(#variable = #variable) : `Expected an actual variable`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@swap", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("#b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Swap two variables").WithContract("@require", "$defined(#a = #b, #b = #a) : `The values must be mutually assignable`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bitsizeof", symbols.NewBaseTypeBuilder("usz", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@bitsizeof", symbols.NewBaseTypeBuilder("usz", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("anycast", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Convert an `any` type to a type, returning an failure if there is a type mismatch.").WithContract("@param", "v : `the any to convert to the given type.`").WithContract("@param", "$Type : `the type to convert to`").WithContract("@return", "`The any.ptr converted to its type.`").WithContract("@ensure", "$typeof(return) == $Type*").WithContract("@return", "? TYPE_MISMATCH").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assignable_to", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#foo", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@addr", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#val", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typeid", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typekind", symbols.NewTypeBuilder("TypeKind", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@typeis", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_backtrace", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtraces_to_ignore", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abort", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("\"Unrecoverable error reached\"").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("panicf", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unreachable", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("\"Unreachable statement reached.\"").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Marks the path as unreachable. This will panic in safe mode, and in fast will simply be assumed\nnever happens.").WithContract("@param", "[in] string : \"The panic message or format string\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsupported", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("\"Unsupported function invoked\"").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Marks the path as unsupported, this is similar to unreachable.").WithContract("@param", "[in] string : \"The error message\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("breakpoint", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsMacro().WithDocs(symbols.NewDocCommentBuilder("Unconditionally break into an attached debugger when reached.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any_make", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.retype_to", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("any*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any.as_inner", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("any*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bitcast", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "expr : \"the expression to cast\"").WithContract("@param", "$Type : \"the type to cast to\"").WithContract("@require", "$sizeof(expr) == $Type.sizeof  : \"Cannot bitcast between types of different size.\"").WithContract("@ensure", "$typeof(return) == $Type*").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enum_by_name", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("enum_name", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : `The type of the enum`").WithContract("@param", "[in] enum_name : `The name of the enum to search for`").WithContract("@require", "$Type.kindof == ENUM : `Only enums may be used`").WithContract("@ensure", "$typeof(return) == $Type*").WithContract("@return", "? NOT_FOUND").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@enum_from_value", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : `The type of the enum`").WithContract("@require", "$Type.kindof == ENUM : `Only enums may be used`").WithContract("@require", "$defined($Type.#value) : `Expected '#value' to match an enum associated value`").WithContract("@require", "$defined($typeof(($Type){}.#value) v = value) : `Expected the value to match the type of the associated value`").WithContract("@ensure", "$typeof(return) == $Type*").WithContract("@return", "? NOT_FOUND").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@likely", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$probability", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("1.0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Mark an expression as likely to be true").WithContract("@param", "#value : \"expression to be marked likely\"").WithContract("@param", "$probability : \"in the range 0 - 1\"").WithContract("@require", "$probability >= 0 && $probability <= 1.0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unlikely", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$probability", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("1.0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Mark an expression as unlikely to be true").WithContract("@param", "#value : \"expression to be marked unlikely\"").WithContract("@param", "$probability : \"in the range 0 - 1\"").WithContract("@require", "$probability >= 0 && $probability <= 1.0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@expect", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$probability", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("1.0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(#value) || values::@is_bool(#value)").WithContract("@require", "$defined($typeof(#value) v = expected)").WithContract("@require", "$probability >= 0 && $probability <= 1.0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@prefetch", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$locality", symbols.NewTypeBuilder("PrefetchLocality", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("VERY_NEAR").Build()).WithArgument(symbols.NewVariableBuilder("$write", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Prefetch a pointer.").WithContract("@param", "[in] ptr : `Pointer to prefetch`").WithContract("@param", "$locality : `Locality ranging from none to extremely local`").WithContract("@param", "$write : `Prefetch for write, otherwise prefetch for read.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("swizzle2", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clz", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Returns the count of leading zero bits from an integer at compile-time.").WithContract("@require", "types::is_int($typeof($value)) : \"Input value must be an integer\"").WithContract("@require", "$sizeof($value) * 8 <= 128 : \"Input value must be 128 bits wide or lower\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@catch", symbols.NewBaseTypeBuilder("fault", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return the excuse in the Optional if it is Empty, otherwise\nreturn a null fault.").WithContract("@require", "$kindof(#expr) == OPTIONAL : `@catch expects an Optional value`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ok", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if an Optional expression holds a value or is empty, returning true\nif it has a value.").WithContract("@require", "$kindof(#expr) == OPTIONAL : `@ok expects an Optional value`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@try", symbols.NewBaseTypeBuilder("void", "std::core::builtin").IsOptional().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if an Optional expression evaluates to a fault. If so, return it;\nelse, assign the result to an expression.").WithContract("@require", "$defined(#v = #v) : \"#v must be a variable\"").WithContract("@require", "$defined(#expr!) : \"Expected an optional expression\"").WithContract("@require", "$defined(#v = #expr!!)  : `Type of #expr must be an optional of #v's type`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@try_catch", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").IsOptional().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#v", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("expected_fault", symbols.NewBaseTypeBuilder("fault", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if an Optional expression evaluates to a fault. If so, return true if it is the\n expected fault, the optional if it is unexpected, or false if there was no fault and\n the assign happened.\n\n This can be used in like this:\n\n  while (true)\n  {\n\tchar[] data;\n\t// Read until end of file\n\tif (@try_catch(data, load_line(), io::EOF)) break;\n\t.. use data ..\n  }\n\n In this example we read until we reach an EOF, which is expected. However, if we encounter some other\n fault, we rethrow is. Without this macro, the code is instead written like:\n\n  while (true)\n  {\n\tchar[]? data;\n\tdata = load_line();\n\tif (catch err = data)\n\t{\n\t  if (err = io::EOF) break;\n\t  return err?\n\t}\n\t.. use data ..\n  }").WithContract("@require", "$defined(#v = #v) : \"#v must be a variable\"").WithContract("@require", "$defined(#expr!) : \"Expected an optional expression\"").WithContract("@require", "$defined(#v = #expr!!)  : `Type of #expr must be an optional of #v's type`").WithContract("@return", "\"True if it was the expected fault, false if the variable was assigned, otherwise returns an optional.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@as_char_view", symbols.NewBaseTypeBuilder("char", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined(&#value, (char*)&#value) : \"This must be a value that can be viewed as a char array\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_find", symbols.NewBaseTypeBuilder("isz", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$needle", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_upper", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_lower", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_pascalcase", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_snakecase", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_camelcase", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_constantcase", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_replace", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$pattern", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$replace", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("$limit", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgDefault("0").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_capitalize", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@str_uncapitalize", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("$str", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@generic_hash_core", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@generic_hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[*].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("bool[*]*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int128[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint128[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("bool[<*>]", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("typeid.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("typeid", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("String", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[].hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("void*.hash", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash_array", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("array_ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$kindof(array_ptr) == POINTER &&& $kindof(*array_ptr) == ARRAY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash_vec", symbols.NewBaseTypeBuilder("uint", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("vec", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$kindof(vec) == VECTOR").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_frameaddress", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "n >= 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_returnaddress", symbols.NewBaseTypeBuilder("void*", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "n >= 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_panic", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_bus_error", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sig_segmentation_fault", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handler", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithArgument(symbols.NewVariableBuilder("signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("install_signal_handlers", symbols.NewBaseTypeBuilder("void", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin.c3").WithoutSourceCode().Build())

	// Define module std::core::builtin
	module = moduleCollection["std::core::builtin"]
	module.AddFunction(symbols.NewFunctionBuilder("less", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@comparable_value(a) && types::@comparable_value(b)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less_eq", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@comparable_value(a) && types::@comparable_value(b)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@comparable_value(a) && types::@comparable_value(b)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@comparable_value(a) && types::@comparable_value(b)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("greater_eq", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@comparable_value(a) && types::@comparable_value(b)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@equatable_value(a) && types::@equatable_value(b) : `values must be equatable`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@max", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("$a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof($a))").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@min", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").WithArgument(symbols.NewVariableBuilder("$a", symbols.NewTypeBuilder("", "").Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::builtin").IsUnsizedCollection().Build(), "std::core::builtin", "<stdlib-path>/core/builtin_comparison.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof($a))").Build()).WithoutSourceCode().Build())

	// Define module std::core::cinterop
	module = moduleCollection["std::core::cinterop"]
	module.AddVariable(symbols.NewVariableBuilder("C_INT_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_LONG_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_LONG_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("C_SHORT_SIZE", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddVariable(symbols.NewVariableBuilder("USE_STACK_VALIST", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).AddStruct(symbols.NewStructBuilder("CVaListData", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithStructMember("gp_offset", symbols.NewBaseTypeBuilder("uint", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithStructMember("fp_offset", symbols.NewBaseTypeBuilder("uint", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithStructMember("overflow_arg_area", symbols.NewBaseTypeBuilder("void*", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithStructMember("reg_save_area", symbols.NewBaseTypeBuilder("void*", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::compression::qoi").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::compression::qoi").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::compression::qoi").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CLongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CSChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ichar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::builtin").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUChar", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUInt", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::builtin").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CULongLong", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::compression::qoi").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CUShort", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CVaList", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CVaListData*", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("CBool", "char", "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FALSE", "<stdlib-path>/core/cinterop.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CBool").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRUE", "<stdlib-path>/core/cinterop.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CBool").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("signed_int_from_bitsize", symbols.NewBaseTypeBuilder("typeid", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$bitsize", symbols.NewBaseTypeBuilder("usz", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsigned_int_from_bitsize", symbols.NewBaseTypeBuilder("typeid", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("$bitsize", symbols.NewBaseTypeBuilder("usz", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CVaList.next", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CVaList*", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CVaList.next", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CVaList", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::cinterop").Build(), "std::core::cinterop", "<stdlib-path>/core/cinterop.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::string::conv
	module = moduleCollection["std::core::string::conv"]
	module.AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_BITS", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_CODEPOINT_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_GENERIC_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_HIGH_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_LOW_VALUE", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_MASK", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddVariable(symbols.NewVariableBuilder("UTF16_SURROGATE_OFFSET", symbols.NewTypeBuilder("uint", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char", "std::core::string::conv").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "c : `The utf32 codepoint to convert`").WithContract("@param", "[out] output : `the resulting buffer`").WithContract("@return", "? string::CONVERSION_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf16_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a code pointer into 1-2 UTF16 characters.").WithContract("@param", "c : `The character to convert.`").WithContract("@param", "[inout] output : `the resulting UTF16 buffer to write to.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char16_to_utf8_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("available", symbols.NewBaseTypeBuilder("usz*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert 1-2 UTF16 data points into UTF8.").WithContract("@param", "[in] ptr : `The UTF16 data to convert.`").WithContract("@param", "[inout] available : `amount of UTF16 data available.`").WithContract("@param", "[inout] output : `the resulting utf8 buffer to write to.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char32_to_utf8_unsafe", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "c : `The utf32 codepoint to convert`").WithContract("@param", "[inout] output : `the resulting buffer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_to_char32", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] ptr : `pointer to the first character to parse`").WithContract("@param", "[inout] size : `Set to max characters to read, set to characters read`").WithContract("@return", "`the parsed 32 bit codepoint`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "utf8 : `An UTF-8 encoded slice of bytes`").WithContract("@return", "`the number of encoded code points`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the UTF8 length required to encode an UTF32 array.").WithContract("@param", "[in] utf32 : `the utf32 data to calculate from`").WithContract("@return", "`the length of the resulting UTF8 array`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8len_for_utf16", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the UTF8 length required to encode an UTF16 array.").WithContract("@param", "[in] utf16 : `the utf16 data to calculate from`").WithContract("@return", "`the length of the resulting UTF8 array`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf8", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the UTF16 length required to encode a UTF8 array.").WithContract("@param", "utf8 : `the utf8 data to calculate from`").WithContract("@return", "`the length of the resulting UTF16 array`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16len_for_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] utf32 : `the UTF32 array to check the length for`").WithContract("@return", "`the required length of an UTF16 array to hold the UTF32 data.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char", "std::core::string::conv").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert an UTF32 array to an UTF8 array.").WithContract("@param", "[in] utf32").WithContract("@param", "[out] utf8_buffer").WithContract("@return", "`the number of bytes written.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32", symbols.NewBaseTypeBuilder("usz", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert an UTF8 array to an UTF32 array.").WithContract("@param", "[in] utf8").WithContract("@param", "[out] utf32_buffer").WithContract("@return", "`the number of Char32s written.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf16to8_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy an array of UTF16 data into an UTF8 buffer without bounds\nchecking. This will assume the buffer is sufficiently large to hold\nthe converted data.").WithContract("@param", "[in] utf16 : `The UTF16 array containing the data to convert.`").WithContract("@param", "[out] utf8_buffer : `the (sufficiently large) buffer to hold the UTF16 data.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to32_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32_buffer", symbols.NewTypeBuilder("Char32*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy an array of UTF8 data into an UTF32 buffer without bounds\nchecking. This will assume the buffer is sufficiently large to hold\nthe converted data.").WithContract("@param", "[in] utf8 : `The UTF8 buffer containing the data to convert.`").WithContract("@param", "[out] utf32_buffer : `the (sufficiently large) buffer to hold the UTF8 data.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8to16_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").IsOptional().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf16_buffer", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy an array of UTF8 data into an UTF16 buffer without bounds\nchecking. This will assume the buffer is sufficiently large to hold\nthe converted data.").WithContract("@param", "[in] utf8 : `The UTF8 buffer containing the data to convert.`").WithContract("@param", "[out] utf16_buffer : `the (sufficiently large) buffer to hold the UTF8 data.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf32to8_unsafe", symbols.NewBaseTypeBuilder("void", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf8_buffer", symbols.NewBaseTypeBuilder("char*", "std::core::string::conv").Build(), "std::core::string::conv", "<stdlib-path>/core/conv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy an array of UTF32 code points into an UTF8 buffer without bounds\nchecking. This will assume the buffer is sufficiently large to hold\nthe converted data.").WithContract("@param", "[in] utf32 : `The UTF32 buffer containing the data to convert.`").WithContract("@param", "[out] utf8_buffer : `the (sufficiently large) buffer to hold the UTF8 data.`").Build()).WithoutSourceCode().Build())

	// Define module std::core::dstring
	module = moduleCollection["std::core::dstring"]
	module.AddVariable(symbols.NewVariableBuilder("MIN_CAPACITY", symbols.NewTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).AddStruct(symbols.NewStructBuilder("StringData", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithStructMember("chars", symbols.NewBaseTypeBuilder("char", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DString", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("DStringOpaque*", "std::core::dstring").Build()).WithDocs("The DString offers a dynamic string builder.").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DStringOpaque", "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgDefault("MIN_CAPACITY").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the DString with a particular allocator.").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "capacity : \"Starting capacity, defaults to MIN_CAPACITY and cannot be smaller\"").WithContract("@return", "\"Return the DString itself\"").WithContract("@require", "!self.data() : \"String already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgDefault("MIN_CAPACITY").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the DString with the temp allocator. Note that if the dstring is never\ninitialized, this is the allocator it will default to.").WithContract("@param", "capacity : \"Starting capacity, defaults to MIN_CAPACITY and cannot be smaller\"").WithContract("@return", "\"Return the DString itself\"").WithContract("@require", "!self.data() : \"String already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_capacity", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_with_capacity", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgDefault("\"\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgDefault("\"\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("replace_char", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("ch", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("replacement", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("replace", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("replacement", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_view", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chop", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "new_size <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_at", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len()").WithContract("@require", "self.data() != null : \"Empty string\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_ref", symbols.NewBaseTypeBuilder("char*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len()").WithContract("@require", "self.data() != null  : \"Empty string\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_utf32", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index < self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_repeat", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("times", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char32", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "c <= 0x10ffff").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("less", symbols.NewBaseTypeBuilder("bool", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("other_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_chars", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_string", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append_char", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete_range", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "start < self.len()").WithContract("@require", "end < self.len()").WithContract("@require", "end >= start : \"End must be same or equal to the start\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgDefault("1").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "start < self.len()").WithContract("@require", "start + len <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("DString.append", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_chars_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_string_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_char_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_char32_at", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("Char32", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insert_utf32_at", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "index <= self.len()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("DString.insert_at", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendf", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendfn", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::dstring").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_string_append_fn", symbols.NewBaseTypeBuilder("void", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reverse", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("data", symbols.NewTypeBuilder("StringData*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reserve", symbols.NewBaseTypeBuilder("void", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("addition", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_stream", symbols.NewBaseTypeBuilder("usz", "std::core::dstring").IsOptional().Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").WithTypeIdentifier("DString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DString*", "std::core::dstring").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::core::dstring", "<stdlib-path>/core/dstring.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::env
	module = moduleCollection["std::core::env"]
	module.AddVariable(symbols.NewVariableBuilder("AARCH64", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ADDRESS_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ANDROID", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ANY_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_32_BIT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_64_BIT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARCH_TYPE", symbols.NewTypeBuilder("ArchType", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("AUTHORS", symbols.NewTypeBuilder("String[]", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("AUTHOR_EMAILS", symbols.NewTypeBuilder("String[]", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BACKTRACE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BENCHMARKING", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BIG_ENDIAN", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("BSD_FAMILY", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_BUILD_DATE", symbols.NewTypeBuilder("String", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_BUILD_HASH", symbols.NewTypeBuilder("String", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_OPT_LEVEL", symbols.NewTypeBuilder("CompilerOptLevel", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("COMPILER_SAFE_MODE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DARWIN", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEBUG_SYMBOLS", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_EXPECT", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("DISABLE_BUILTIN_PREFETCH", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F128_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("F16_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREEBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREESTANDING", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREESTANDING_ELF", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREESTANDING_MACHO", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREESTANDING_PE32", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("FREESTANDING_WASM", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("HAS_NATIVE_ERRNO", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("I128_NATIVE_SUPPORT", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LANGUAGE_DEV_VERSION", symbols.NewTypeBuilder("int", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LINUX", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("LLVM_VERSION", symbols.NewTypeBuilder("usz", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_VECTOR_SIZE", symbols.NewTypeBuilder("usz", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MEMORY_ENV", symbols.NewTypeBuilder("MemoryEnvironment", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("MEMORY_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NATIVE_STACKTRACE", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NETBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_LIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPENBSD", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("OS_TYPE", symbols.NewTypeBuilder("OsType", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("PANIC_MSG", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("POSIX", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("PROJECT_VERSION", symbols.NewTypeBuilder("String", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("REGISTER_SIZE", symbols.NewTypeBuilder("", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TESTING", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("THREAD_SANITIZER", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRACK_MEMORY", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASI", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WASM_NOLIBC", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN32", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddVariable(symbols.NewVariableBuilder("X86_64", symbols.NewTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").Build()).AddEnum(symbols.NewEnumBuilder("ArchType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARM", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_BE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AARCH64_32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BPFEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEXAGON", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPSEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MIPS64EL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MSP430", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PPC64LE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("R600", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDGCN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RISCV64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARC", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCV9", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPARCEL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEMZ", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCELE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THUMBEB", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X86_64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVPTX64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LE64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HSAIL64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SPIR64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KALIMBA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHAVE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LANAI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASM64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RSCRIPT64", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XTENSA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("ArchType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("CompilerOptLevel", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("O0", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O1", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O2", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("O3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CompilerOptLevel").Build()).Build()).AddEnum(symbols.NewEnumBuilder("MemoryEnvironment", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMALL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TINY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MemoryEnvironment").Build()).Build()).AddEnum(symbols.NewEnumBuilder("OsType", "", "std::core::env", "<stdlib-path>/core/env.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNKNOWN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANANAS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLOUD_ABI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DRAGON_FLY", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUCHSIA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KFREEBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LINUX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS3", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MACOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NETBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPENBSD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SOLARIS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HAIKU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MINIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTEMS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NACL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CNK", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AIX", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CUDA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NVOPENCL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDHSA", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PS4", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ELFIAMCU", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TVOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WATCHOS", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MESA3D", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONTIKI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMDPAL", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HERMITCORE", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HURD", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WASI", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EMSCRIPTEN", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID", "<stdlib-path>/core/env.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("OsType").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("os_is_darwin", symbols.NewBaseTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("os_is_posix", symbols.NewBaseTypeBuilder("bool", "std::core::env").Build(), "std::core::env", "<stdlib-path>/core/env.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem
	module = moduleCollection["std::core::mem"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_MEM_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("GB", symbols.NewTypeBuilder("ulong", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("KB", symbols.NewTypeBuilder("ulong", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_MEMORY_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB", symbols.NewTypeBuilder("ulong", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("TB", symbols.NewTypeBuilder("ulong", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("__heap_base", symbols.NewBaseTypeBuilder("int", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_allocator", symbols.NewTypeBuilder("SimpleHeapAllocator", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).AddEnum(symbols.NewEnumBuilder("AtomicOrdering", "int", "std::core::mem", "<stdlib-path>/core/mem.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NOT_ATOMIC", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNORDERED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELAXED", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACQUIRE_RELEASE", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEQ_CONSISTENT", "<stdlib-path>/core/mem.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AtomicOrdering").Build()).WithDocs("All possible atomic orderings").Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::mem", "<stdlib-path>/core/mem.c3").WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_MEMORY", "std::core::mem", "../../../assets/c3c/lib/std/core/mem.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ALLOC_SIZE", "std::core::mem", "../../../assets/c3c/lib/std/core/mem.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@constant_is_power_of_2", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("os_pagesize", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "\"The os page size.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("masked_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Load a vector from memory according to a mask assuming default alignment.").WithContract("@param", "ptr : \"The pointer address to load from.\"").WithContract("@param", "mask : \"The mask for the load\"").WithContract("@param", "passthru : \"The value to use for non masked values\"").WithContract("@require", "$defined(*ptr = passthru) : \"Pointer and passthru must match\"").WithContract("@require", "$kindof(passthru) == VECTOR : \"Expected passthru to be a vector\"").WithContract("@require", "passthru.len == mask.len : \"Mask and passthru must have the same length\"").WithContract("@return", "\"A vector with the loaded values where the mask is true, passthru where the mask is false\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_load_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Load a vector from memory according to a mask.").WithContract("@param", "ptr : \"The pointer address to load from.\"").WithContract("@param", "mask : \"The mask for the load\"").WithContract("@param", "passthru : \"The value to use for non masked values\"").WithContract("@param", "$alignment : \"The alignment to assume for the pointer\"").WithContract("@require", "$defined(*ptr = passthru) : \"Pointer and passthru must match\"").WithContract("@require", "$kindof(passthru) == VECTOR : \"Expected passthru to be a vector\"").WithContract("@require", "passthru.len == mask.len : \"Mask and passthru must have the same length\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").WithContract("@return", "\"A vector with the loaded values where the mask is true, passthru where the mask is false\"").WithContract("@ensure", "$typeof(return) == $typeof(*ptr)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gather", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Load values from a pointer vector, assuming default alignment.").WithContract("@param", "ptrvec : \"The vector of pointers to load from.\"").WithContract("@param", "mask : \"The mask for the load\"").WithContract("@param", "passthru : \"The value to use for non masked values\"").WithContract("@require", "$kindof(ptrvec) == VECTOR : \"Expected ptrvec to be a vector\"").WithContract("@require", "$kindof(passthru) == VECTOR : \"Expected passthru to be a vector\"").WithContract("@require", "$defined(*ptrvec[0] = passthru[0]) : \"Pointer and passthru must match\"").WithContract("@require", "passthru.len == mask.len : \"Mask and passthru must have the same length\"").WithContract("@require", "mask.len == ptrvec.len : \"Mask and ptrvec must have the same length\"").WithContract("@return", "\"A vector with the loaded values where the mask is true, passthru where the mask is false\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@gather_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("passthru", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Load values from a pointer vector.").WithContract("@param", "ptrvec : \"The vector of pointers to load from.\"").WithContract("@param", "mask : \"The mask for the load\"").WithContract("@param", "passthru : \"The value to use for non masked values\"").WithContract("@param", "$alignment : \"The alignment to assume for the pointers\"").WithContract("@require", "$kindof(ptrvec) == VECTOR : \"Expected ptrvec to be a vector\"").WithContract("@require", "$kindof(passthru) == VECTOR : \"Expected passthru to be a vector\"").WithContract("@require", "$defined(*ptrvec[0] = passthru[0]) : \"Pointer and passthru must match\"").WithContract("@require", "passthru.len == mask.len : \"Mask and passthru must have the same length\"").WithContract("@require", "mask.len == ptrvec.len : \"Mask and ptrvec must have the same length\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").WithContract("@return", "\"A vector with the loaded values where the mask is true, passthru where the mask is false\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("masked_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Store parts of a vector according to the mask, assuming default alignment.").WithContract("@param", "ptr : \"The pointer address to store to.\"").WithContract("@param", "value : \"The value to store masked\"").WithContract("@param", "mask : \"The mask for the store\"").WithContract("@require", "$defined(*ptr = value) : \"Pointer and value must match\"").WithContract("@require", "$kindof(value) == VECTOR : \"Expected value to be a vector\"").WithContract("@require", "value.len == mask.len : \"Mask and value must have the same length\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@masked_store_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "ptr : \"The pointer address to store to.\"").WithContract("@param", "value : \"The value to store masked\"").WithContract("@param", "mask : \"The mask for the store\"").WithContract("@param", "$alignment : \"The alignment of the pointer\"").WithContract("@require", "$defined(*ptr = value) : \"Pointer and value must match\"").WithContract("@require", "$kindof(value) == VECTOR : \"Expected value to be a vector\"").WithContract("@require", "value.len == mask.len : \"Mask and value must have the same length\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scatter", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "ptrvec : \"The vector pointer containing the addresses to store to.\"").WithContract("@param", "value : \"The value to store masked\"").WithContract("@param", "mask : \"The mask for the store\"").WithContract("@require", "$kindof(ptrvec) == VECTOR : \"Expected ptrvec to be a vector\"").WithContract("@require", "$kindof(value) == VECTOR : \"Expected value to be a vector\"").WithContract("@require", "$defined(*ptrvec[0] = value[0]) : \"Pointer and value must match\"").WithContract("@require", "value.len == mask.len : \"Mask and value must have the same length\"").WithContract("@require", "mask.len == ptrvec.len : \"Mask and ptrvec must have the same length\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scatter_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptrvec", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "ptrvec : \"The vector pointer containing the addresses to store to.\"").WithContract("@param", "value : \"The value to store masked\"").WithContract("@param", "mask : \"The mask for the store\"").WithContract("@param", "$alignment : \"The alignment of the load\"").WithContract("@require", "$kindof(ptrvec) == VECTOR : \"Expected ptrvec to be a vector\"").WithContract("@require", "$kindof(value) == VECTOR : \"Expected value to be a vector\"").WithContract("@require", "$defined(*ptrvec[0] = value[0]) : \"Pointer and value must match\"").WithContract("@require", "value.len == mask.len : \"Mask and value must have the same length\"").WithContract("@require", "mask.len == ptrvec.len : \"Mask and ptrvec must have the same length\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unaligned_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"The variable or dereferenced pointer to load.\"").WithContract("@param", "$alignment : \"The alignment to assume for the load\"").WithContract("@return", "\"The value of the variable\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unaligned_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"The variable or dereferenced pointer to store to.\"").WithContract("@param", "value : \"The value to store.\"").WithContract("@param", "$alignment : \"The alignment to assume for the store\"").WithContract("@return", "\"The value stored\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").WithContract("@require", "$defined(#x = value) : \"The value doesn't match the variable\"").WithContract("@require", "@constant_is_power_of_2($alignment) : \"The alignment must be a power of two\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"The variable or dereferenced pointer to load.\"").WithContract("@return", "\"The value of the variable\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@volatile_store", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"The variable or dereferenced pointer to store to.\"").WithContract("@param", "value : \"The value to store.\"").WithContract("@return", "\"The value stored\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").WithContract("@require", "$defined(#x = value) : \"The value doesn't match the variable\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_load", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"the variable or dereferenced pointer to load.\"").WithContract("@param", "$ordering : \"atomic ordering of the load, defaults to SEQ_CONSISTENT\"").WithContract("@param", "$volatile : \"whether the load should be volatile, defaults to 'false'\"").WithContract("@return", "\"returns the value of x\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").WithContract("@require", "$ordering != AtomicOrdering.RELEASE : \"Release ordering is not valid for load.\"").WithContract("@require", "$ordering != AtomicOrdering.ACQUIRE_RELEASE : \"Acquire release is not valid for load.\"").WithContract("@require", "types::may_load_atomic($typeof(#x)) : \"Only integer, float and pointers may be used.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@atomic_store", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#x", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "#x : \"the variable or dereferenced pointer to store to.\"").WithContract("@param", "value : \"the value to store.\"").WithContract("@param", "$ordering : \"the atomic ordering of the store, defaults to SEQ_CONSISTENT\"").WithContract("@param", "$volatile : \"whether the store should be volatile, defaults to 'false'\"").WithContract("@require", "$ordering != AtomicOrdering.ACQUIRE : \"Acquire ordering is not valid for store.\"").WithContract("@require", "$ordering != AtomicOrdering.ACQUIRE_RELEASE : \"Acquire release is not valid for store.\"").WithContract("@require", "types::may_load_atomic($typeof(#x)) : \"Only integer, float and pointers may be used.\"").WithContract("@require", "$defined(&#x) : \"This must be a variable or dereferenced pointer\"").WithContract("@require", "$defined(#x = value) : \"The value doesn't match the variable\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$success", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$failure", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("true").Build()).WithArgument(symbols.NewVariableBuilder("$weak", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("$alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$success != AtomicOrdering.NOT_ATOMIC && $success != AtomicOrdering.UNORDERED : \"Acquire ordering is not valid.\"").WithContract("@require", "$failure != AtomicOrdering.RELEASE && $failure != AtomicOrdering.ACQUIRE_RELEASE : \"Acquire release is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_exchange_volatile", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$success", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).WithArgument(symbols.NewVariableBuilder("$failure", symbols.NewTypeBuilder("AtomicOrdering", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("SEQ_CONSISTENT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$success != AtomicOrdering.NOT_ATOMIC && $success != AtomicOrdering.UNORDERED : \"Acquire ordering is not valid.\"").WithContract("@require", "$failure != AtomicOrdering.RELEASE && $failure != AtomicOrdering.ACQUIRE_RELEASE : \"Acquire release is not valid.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "math::is_power_of_2(alignment)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ptr_is_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "math::is_power_of_2(alignment)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ptr_is_page_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zero_volatile", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::core::mem").IsUnsizedCollection().Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$src_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Copy memory from src to dst efficiently, assuming the memory ranges do not overlap.").WithContract("@param", "[&out] dst : \"The destination to copy to\"").WithContract("@param", "[in] src : \"The source to copy from\"").WithContract("@param", "len : \"The number of bytes to copy\"").WithContract("@param", "$dst_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$src_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$is_volatile : \"True if this copy should be treated as volatile, i.e. it can't be optimized away.\"").WithContract("@require", "src != null || len == 0 : \"Copying a null with non-zero length is invalid\"").WithContract("@require", "len == 0 || dst + len <= src || src + len <= dst : \"Ranges may not overlap\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$src_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Copy memory from src to dst efficiently, assuming the memory ranges do not overlap, it\nwill always be inlined and never call memcopy").WithContract("@param", "[&out] dst : \"The destination to copy to\"").WithContract("@param", "[in] src : \"The source to copy from\"").WithContract("@param", "$len : \"The number of bytes to copy\"").WithContract("@param", "$dst_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$src_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$is_volatile : \"True if this copy should be treated as volatile, i.e. it can't be optimized away.\"").WithContract("@require", "src != null || $len == 0 : \"Copying a null with non-zero length is invalid\"").WithContract("@require", "$len == 0 || dst + $len <= src || src + $len <= dst : \"Ranges may not overlap\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("move", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$src_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Copy memory from src to dst but correctly handle the possibility of overlapping ranges.").WithContract("@param", "[&out] dst : \"The destination to copy to\"").WithContract("@param", "[in] src : \"The source to copy from\"").WithContract("@param", "len : \"The number of bytes to copy\"").WithContract("@param", "$dst_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$src_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$is_volatile : \"True if this copy should be treated as volatile, i.e. it can't be optimized away.\"").WithContract("@require", "src != null || len == 0 : \"Moving a null with non-zero length is invalid\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("char", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Sets all memory in a region to that of the provided byte.").WithContract("@param", "[&out] dst : \"The destination to copy to\"").WithContract("@param", "val : \"The value to copy into memory\"").WithContract("@param", "len : \"The number of bytes to copy\"").WithContract("@param", "$dst_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$is_volatile : \"True if this copy should be treated as volatile, i.e. it can't be optimized away.\"").WithContract("@ensure", "!len || (dst[0] == val && dst[len - 1] == val)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_inline", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("char", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$len", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("$dst_align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("$is_volatile", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("false").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Sets all memory in a region to that of the provided byte. Never calls OS memset.").WithContract("@param", "[&out] dst : \"The destination to copy to\"").WithContract("@param", "val : \"The value to copy into memory\"").WithContract("@param", "$len : \"The number of bytes to copy\"").WithContract("@param", "$dst_align : \"the alignment of the destination if different from the default, 0 assumes the default\"").WithContract("@param", "$is_volatile : \"True if this copy should be treated as volatile, i.e. it can't be optimized away.\"").WithContract("@ensure", "!$len || (dst[0] == val && dst[$len - 1] == val)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("isz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("-1").Build()).WithArgument(symbols.NewVariableBuilder("$align", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Test if n elements are equal in a slice, pointed to by a pointer etc.").WithContract("@require", "values::@inner_kind(a) == TypeKind.SLICE || values::@inner_kind(a) == TypeKind.POINTER").WithContract("@require", "values::@inner_kind(b) == TypeKind.SLICE || values::@inner_kind(b) == TypeKind.POINTER").WithContract("@require", "values::@inner_kind(a) != TypeKind.SLICE || len == -1").WithContract("@require", "values::@inner_kind(a) != TypeKind.POINTER || len > -1").WithContract("@require", "$defined(a = b, b = a)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("type_alloc_must_be_aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if an allocation must be aligned given the type.").WithContract("@return", "`true if the alignment of the type exceeds DEFAULT_MEM_ALIGNMENT.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@scoped", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Run with a specific allocator inside of the macro body.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@report_heap_allocs_in_scope", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$enabled", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("true").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Run the tracking allocator in the scope, then\nprint out stats.").WithContract("@param", "$enabled : \"Set to false to disable tracking\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assert_leak", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$report", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("true").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Assert on memory leak in the scope of the macro body.").WithContract("@param", "$report : \"Set to false to disable memory report\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_mem", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(Allocator mem)", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate [size] bytes on the stack to use for allocation,\nwith the heap allocator as the backing allocator.\n\nRelease everything on scope exit.").WithContract("@param", "$size : `the size of the buffer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@stack_pool", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_push", symbols.NewTypeBuilder("PoolState", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithDocs(symbols.NewDocCommentBuilder("Push the current temp allocator. A push must always be balanced with a pop using the current state.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_pop", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("old_state", symbols.NewTypeBuilder("PoolState", "std::core::mem::allocator").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Pop the current temp allocator. A pop must always be balanced with a push.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pool_init", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("pool_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("allocator::temp_allocator_reserve_size").Build()).WithArgument(symbols.NewVariableBuilder("min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("allocator::temp_allocator_min_size").Build()).WithArgument(symbols.NewVariableBuilder("realloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("allocator::temp_allocator_realloc_size").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "pool_size >= 64").WithContract("@require", "realloc_size >= 64").WithContract("@require", "allocator.type != TempAllocator.typeid : \"You may not create a temp allocator with a TempAllocator as the backing allocator.\"").WithContract("@require", "min_size > TempAllocator.sizeof + 64 : \"Min size must meaningfully hold the data + some bytes\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@pool", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a new temporary allocator.\n\nThe `reserve` parameter allows you to determine how many bytes should be reserved for\nallocations on the current temporary allocator, if allocations are made inside of the pool scope.\nIt is made available for optimization, and can usually be ignored.").WithContract("@param", "reserve : \"The amount of bytes to reserve for out-of-order allocations, 0 gives the default.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initialize_wasm_mem", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_tracking_env", symbols.NewTypeBuilder("TrackingEnv*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clone", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").WithContract("@require", "$alignof(value) <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'clone_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clone_slice", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@clone_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value, which must be released using free_aligned\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@tclone", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@tclone_slice", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmalloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("#init", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("...").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "#init : \"The optional initializer\"").WithContract("@require", "!$defined(#init) ||| $defined($Type a = #init) : \"#init must be an initializer for the type\"").WithContract("@require", "$Type.alignof <= DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_aligned' instead\"").WithContract("@return", "\"A pointer to data of type $Type.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_padding", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("#init", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("...").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "padding : \"The padding to add after the allocation\"").WithContract("@param", "#init : \"The optional initializer\"").WithContract("@require", "!$defined(#init) ||| $defined($Type a = #init) : \"#init must be an initializer for the type\"").WithContract("@return", "\"A pointer to data of type $Type.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("#init", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("...").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "#init : \"The optional initializer\"").WithContract("@require", "!$defined(#init) ||| $defined($Type a = #init) : \"#init must be an initializer for the type\"").WithContract("@return", "\"A pointer to data of type $Type with the proper alignment\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@require", "$Type.alignof <= DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_aligned' instead\"").WithContract("@return", "\"A pointer to uninitialized data for the type $Type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_with_padding", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "padding : \"The padding to add after the allocation\"").WithContract("@require", "$Type.alignof <= DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_aligned' instead\"").WithContract("@return", "\"A pointer to uninitialized data for the type $Type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@return", "\"A pointer to uninitialized data for the type $Type with the proper alignment\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tnew", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("#init", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("...").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "#init : \"The optional initializer\"").WithContract("@require", "!$defined(#init) ||| $defined($Type a = #init) : \"#init must be an initializer for the type\"").WithContract("@return", "\"A pointer to temporary data of type $Type.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_with_padding", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("#init", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("...").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "$Type : \"The type to allocate\"").WithContract("@param", "padding : \"The padding to add after the allocation\"").WithContract("@param", "#init : \"The optional initializer\"").WithContract("@require", "!$defined(#init) ||| $defined($Type a = #init) : \"#init must be an initializer for the type\"").WithContract("@return", "\"A pointer to temporary data of type $Type with added padding at the end.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("talloc", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("talloc_with_padding", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'new_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("talloc_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_array", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcalloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewBaseTypeBuilder("void", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trealloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgDefault("mem::DEFAULT_MEM_ALIGNMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@unaligned_addr", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("#arg", symbols.NewTypeBuilder("", "").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Takes the address of a possibly unaligned variable or member,\nand offers safe access to that member, by constructing an UnalignedRef.").WithContract("@require", "$defined(&#arg) : \"It must be possible to take the address of the argument.\"").WithContract("@return", "\"An 'UnalignedRef' with the proper type and alignment, with a pointer to argument\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memset", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__memcpy", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::mem").Build(), "std::core::mem", "<stdlib-path>/core/mem.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::volatile
	module = moduleCollection["std::core::mem::volatile"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::mem::volatile", "<stdlib-path>/core/mem.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddDistinct(symbols.NewDistinctBuilder("Volatile", "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").WithInline(false).WithBaseType(symbols.NewGenericTypeBuilder("Type", "std::core::mem::volatile").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Volatile.get", symbols.NewGenericTypeBuilder("Type", "std::core::mem::volatile").Build(), "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Volatile*", "std::core::mem::volatile").Build(), "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Volatile.set", symbols.NewGenericTypeBuilder("Type", "std::core::mem::volatile").Build(), "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Volatile*", "std::core::mem::volatile").Build(), "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::core::mem::volatile").Build(), "std::core::mem::volatile", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem::alignment
	module = moduleCollection["std::core::mem::alignment"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::mem::alignment", "<stdlib-path>/core/mem.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddDistinct(symbols.NewDistinctBuilder("UnalignedRef", "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").WithInline(false).WithBaseType(symbols.NewGenericTypeBuilder("Type*", "std::core::mem::alignment").Build()).WithDocs("An UnalignedRef offers correctly aligned access to addresses that may be unaligned or overaligned.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("UnalignedRef.get", symbols.NewGenericTypeBuilder("Type", "std::core::mem::alignment").Build(), "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnalignedRef", "std::core::mem::alignment").Build(), "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("UnalignedRef.set", symbols.NewGenericTypeBuilder("Type", "std::core::mem::alignment").Build(), "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnalignedRef*", "std::core::mem::alignment").Build(), "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::core::mem::alignment").Build(), "std::core::mem::alignment", "<stdlib-path>/core/mem.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_SIZE_PREFIX_ALIGNMENT", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("LAZY_TEMP", symbols.NewTypeBuilder("LazyTempAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("NULL_ALLOCATOR", symbols.NewTypeBuilder("NullAllocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("auto_create_temp", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("current_temp", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_realloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_allocator_reserve_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("temp_base_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("thread_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddVariable(symbols.NewVariableBuilder("top_temp", symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).AddStruct(symbols.NewStructBuilder("AlignedBlock", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("start", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TrackingEnv", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MemoryAllocFn", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithResolvesTo("fn char[]?(usz)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("mem", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithResolvesTo("thread_allocator").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("tmem", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithResolvesTo("current_temp").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("LazyTempAllocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NullAllocator", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("PoolState", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("TempAllocator*", "std::core::mem::allocator").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("AllocInitType", "", "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_ZERO", "<stdlib-path>/core/mem_allocator.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AllocInitType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ZERO", "<stdlib-path>/core/mem_allocator.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("AllocInitType").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("alignment_for_allocation", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_try", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_try", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_try", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc_aligned", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_aligned", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'new_aligned' instead\"").WithContract("@require", "$vacount < 2 : \"Too many arguments.\"").WithContract("@require", "$vacount == 0 ||| $defined($Type t = $vaexpr[0]) : \"The second argument must be an initializer for the type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'new_aligned' instead\"").WithContract("@require", "$vacount < 2 : \"Too many arguments.\"").WithContract("@require", "$vacount == 0 ||| $defined($Type t = $vaexpr[0]) : \"The second argument must be an initializer for the type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::core::mem::allocator").IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").WithContract("@require", "$vacount < 2 : \"Too many arguments.\"").WithContract("@require", "$vacount == 0 ||| $defined($Type t = $vaexpr[0]) : \"The second argument must be an initializer for the type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_with_padding", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_with_padding", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'new_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'new_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_array_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Allocate using an aligned allocation. This is necessary for types with a default memory alignment\nexceeding DEFAULT_MEM_ALIGNMENT. IMPORTANT! It must be freed using free_aligned.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc_array_try", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("elements", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.alignof <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'alloc_array_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Clone a value.").WithContract("@param", "[&inout] allocator : \"The allocator to use to clone\"").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").WithContract("@require", "$alignof(value) <= mem::DEFAULT_MEM_ALIGNMENT : \"Types with alignment exceeding the default must use 'clone_aligned' instead\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone_slice", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("slice", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator : \"The allocator used to clone\"").WithContract("@param", "slice : \"The slice to clone\"").WithContract("@return", "\"A pointer to the cloned slice\"").WithContract("@require", "$kindof(slice) == SLICE || $kindof(slice) == ARRAY").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone_aligned", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Clone overaligned values. Must be released using free_aligned.").WithContract("@param", "[&inout] allocator : \"The allocator to use to clone\"").WithContract("@param", "value : \"The value to clone\"").WithContract("@return", "\"A pointer to the cloned value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clone_any", symbols.NewBaseTypeBuilder("any", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("any", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_alloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("#alloc_fn", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes > 0").WithContract("@require", "alignment > 0").WithContract("@require", "bytes <= isz.max").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_free", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("#free_fn", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@aligned_realloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("#calloc_fn", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("#free_fn", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_pointer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes > 0").WithContract("@require", "alignment > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push_pool", symbols.NewTypeBuilder("PoolState", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_pool", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("old", symbols.NewTypeBuilder("PoolState", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("base_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_allocator_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_allocator_default_min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_allocator_default_reserve_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("heap", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_temp_allocator_on_demand", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!top_temp : \"This should never be called when temp already exists\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create_temp_allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("reserve", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("min_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("realloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!top_temp : \"This should never be called when temp already exists\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allow_implicit_temp_allocator_on_load_thread", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy_temp_allocators_after_exit", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy_temp_allocators", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithDocs(symbols.NewDocCommentBuilder("Call this to destroy any memory used by the temp allocators. This will invalidate all temp memory.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("LazyTempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LazyTempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("LazyTempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LazyTempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("LazyTempAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LazyTempAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquire", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("init_type", symbols.NewTypeBuilder("AllocInitType", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resize", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").IsOptional().Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").WithTypeIdentifier("NullAllocator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NullAllocator*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("aligned", symbols.NewBaseTypeBuilder("bool", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/mem_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::mempool
	module = moduleCollection["std::core::mem::mempool"]
	module.AddVariable(symbols.NewVariableBuilder("INITIAL_CAPACITY", symbols.NewTypeBuilder("", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).AddStruct(symbols.NewStructBuilder("FixedBlockPool", "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("head", symbols.NewTypeBuilder("FixedBlockPoolNode", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("tail", symbols.NewTypeBuilder("FixedBlockPoolNode*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("next_free", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("freelist", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("block_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("grow_capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("allocated", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("page_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("used", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithDocs("Fixed blocks pool pre-allocating blocks backed by an Allocator which are then reserved for the user,\nblocks deallocated by the user are later re-used by future blocks allocations\n\n`grow_capacity` can be changed in order to affect how many blocks will be allocated by next pool allocation,\nit has to be greater than 0\n`allocated` number of allocated blocks\n`used` number of used blocks by the user").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("FixedBlockPoolEntry", "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("previous", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("FixedBlockPoolNode", "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("next", symbols.NewTypeBuilder("FixedBlockPoolNode*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithStructMember("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.init", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("block_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgDefault("INITIAL_CAPACITY").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgDefault("0").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Initialize an block pool").WithContract("@param", "[in] allocator : \"The allocator to use\"").WithContract("@param", "block_size : \"The block size to use\"").WithContract("@param", "capacity : \"The amount of blocks to be pre-allocated\"").WithContract("@param", "alignment : \"The alignment of the buffer\"").WithContract("@require", "!alignment || math::is_power_of_2(alignment)").WithContract("@require", "!self.initialized : \"The block pool must not be initialized\"").WithContract("@require", "block_size > 0 : \"Block size must be non zero\"").WithContract("@require", "calculate_actual_capacity(capacity, block_size) * block_size >= block_size\n    : \"Total memory would overflow\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.init_for_type", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgDefault("INITIAL_CAPACITY").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Initialize an block pool").WithContract("@param", "[in] allocator : \"The allocator to use\"").WithContract("@param", "$Type : \"The type used for setting the block size\"").WithContract("@param", "capacity : \"The amount of blocks to be pre-allocated\"").WithContract("@require", "!self.initialized : \"The block pool must not be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.tinit_for_type", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgDefault("INITIAL_CAPACITY").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Initialize an block pool using Temporary allocator").WithContract("@param", "$Type : \"The type used for setting the block size\"").WithContract("@param", "capacity : \"The amount of blocks to be pre-allocated\"").WithContract("@require", "!self.initialized : \"The block pool must not be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.tinit", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("block_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgDefault("INITIAL_CAPACITY").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Initialize an block pool using Temporary allocator").WithContract("@param", "block_size : \"The block size to use\"").WithContract("@param", "capacity : \"The amount of blocks to be pre-allocated\"").WithContract("@require", "!self.initialized : \"The block pool must not be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithTypeIdentifier("FixedBlockPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free up the entire block pool").WithContract("@require", "self.initialized : \"The block pool must be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithTypeIdentifier("FixedBlockPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Allocate an block on the block pool, re-uses previously deallocated blocks").WithContract("@require", "self.initialized : \"The block pool must be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dealloc", symbols.NewBaseTypeBuilder("void", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithTypeIdentifier("FixedBlockPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Deallocate a block from the block pool").WithContract("@require", "self.initialized : \"The block pool must be initialized\"").WithContract("@require", "self.check_ptr(ptr) : \"The pointer should be part of the pool\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("check_ptr", symbols.NewBaseTypeBuilder("bool", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithTypeIdentifier("FixedBlockPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.initialized : \"The block pool must be initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_node", symbols.NewBaseTypeBuilder("void", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithTypeIdentifier("FixedBlockPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.grow_capacity > 0 : \"How many blocks will it store\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.allocate_page", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedBlockPool.free_page", symbols.NewBaseTypeBuilder("void", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedBlockPool*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("page", symbols.NewBaseTypeBuilder("void*", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calculate_actual_capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).WithArgument(symbols.NewVariableBuilder("block_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::mempool").Build(), "std::core::mem::mempool", "<stdlib-path>/core/mem_mempool.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem::vm
	module = moduleCollection["std::core::mem::vm"]
	module.AddStruct(symbols.NewStructBuilder("VirtualMemory", "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithStructMember("default_access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithDocs("VirtualMemory is an abstraction for working with an allocated virtual memory area. It will invoke vm:: functions\nbut will perform more checks and track its size (required to unmap the memory on Posix)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("VirtualMemoryAccess", "", "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithEnumerator(symbols.NewEnumeratorBuilder("PROTECTED", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("READ", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WRITE", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("READWRITE", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXEC", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXECREAD", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXECWRITE", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/core/os/mem_vm.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("VirtualMemoryAccess").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithConstant(symbols.NewFaultConstantBuilder("RANGE_OVERFLOW", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_ERROR", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ACCESS_DENIED", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNMAPPED_ACCESS", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNALIGNED_ADDRESS", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("RELEASE_FAILED", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UPDATE_FAILED", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ARGS", "std::core::mem::vm", "../../../assets/c3c/lib/std/core/os/mem_vm.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc_size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Allocate virtual memory, size is rounded up to platform granularity (Win32) / page size (Posix).").WithContract("@param", "size : \"The size of the memory to allocate, will be rounded up\"").WithContract("@param", "access : \"The initial access permissions.\"").WithContract("@return", "? mem::OUT_OF_MEMORY, RANGE_OVERFLOW, UNKNOWN_ERROR, ACCESS_DENIED, INVALID_ARGS").WithContract("@return", "\"Pointer to the allocated memory, page aligned\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Release memory allocated with \"alloc\".").WithContract("@param", "[&inout] ptr : \"Pointer to page to release, should be allocated using vm::alloc\"").WithContract("@param", "size : \"The size of the allocated pointer\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr) : \"The pointer should be page aligned\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("protect", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Change the access protection of a region in memory. The region must be page aligned.").WithContract("@param", "[&inout] ptr : \"Pointer to page to update, must be page aligned\"").WithContract("@param", "len : \"To what len to update, must be page aligned\"").WithContract("@param", "access : \"The new access\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr) : \"The pointer should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr + len) : \"The length must be page aligned\"").WithContract("@return", "? ACCESS_DENIED, UNALIGNED_ADDRESS, RANGE_OVERFLOW, UPDATE_FAILED, UNMAPPED_ACCESS, INVALID_ARGS").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("commit", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("READWRITE").Build()).WithDocs(symbols.NewDocCommentBuilder("Makes a region of memory available that was previously retrieved using 'alloc'. This is necessary on Win32,\nbut optional on Posix.").WithContract("@param", "[&inout] ptr : \"Pointer to page to update, must be page aligned\"").WithContract("@param", "len : \"To what len to commit, must be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr) : \"The pointer should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr + len) : \"The length must be page aligned\"").WithContract("@return", "? UNKNOWN_ERROR, mem::OUT_OF_MEMORY, ACCESS_DENIED, UNALIGNED_ADDRESS, RANGE_OVERFLOW, UPDATE_FAILED, UNMAPPED_ACCESS, INVALID_ARGS").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decommit", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("block", symbols.NewBaseTypeBuilder("bool", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("true").Build()).WithDocs(symbols.NewDocCommentBuilder("Notifies that the memory in the region can be released back to the OS. On Win32 this decommits the region,\nwhereas on Posix it tells the system that it may be reused using madvise. The \"block\" parameter is only\nrespected on Posix, and protects the region from read/write/exec. On Win32 this always happens.").WithContract("@param", "[&inout] ptr : \"Pointer to page to update, must be page aligned\"").WithContract("@param", "len : \"To what len to commit, must be page aligned\"").WithContract("@param", "block : \"Set the released memory to protected\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr) : \"The pointer should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(ptr + len) : \"The length must be page aligned\"").WithContract("@return", "? ACCESS_DENIED, UNALIGNED_ADDRESS, RANGE_OVERFLOW, UPDATE_FAILED, UNMAPPED_ACCESS, INVALID_ARGS").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mmap_file", symbols.NewBaseTypeBuilder("void*", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("READ").Build()).WithArgument(symbols.NewVariableBuilder("shared", symbols.NewBaseTypeBuilder("bool", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Map a portion of an already-opened file into memory.").WithContract("@param", "fd : \"File descriptor\"").WithContract("@param", "size : \"Number of bytes to map, will be rounded up to page size\"").WithContract("@param", "offset : \"Byte offset in file, must be page size aligned\"").WithContract("@param", "access : \"The initial access permissions\"").WithContract("@param", "shared : \"if True then MAP_SHARED else MAP_PRIVATE\"").WithContract("@return", "? mem::OUT_OF_MEMORY, RANGE_OVERFLOW, UNKNOWN_ERROR, ACCESS_DENIED, INVALID_ARGS, io::NO_PERMISSION, io::FILE_NOT_VALID, io::WOULD_BLOCK, io::FILE_NOT_FOUND").WithContract("@return", "\"Pointer to the mapped region\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("virtual_alloc", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("PROTECTED").Build()).WithDocs(symbols.NewDocCommentBuilder("Create a VirtualMemory using").WithContract("@param", "size : \"The size of the memory to allocate.\"").WithContract("@require", "size > 0 : \"The size must be non-zero\"").WithContract("@return", "? mem::OUT_OF_MEMORY, RANGE_OVERFLOW, UNKNOWN_ERROR, ACCESS_DENIED, INVALID_ARGS").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("VirtualMemory.commit", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Commits memory, using vm::commit").WithContract("@param", "offset : \"Starting from what offset to commit\"").WithContract("@param", "len : \"To what len to commit\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset) : \"The offset should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset + len) : \"The length must be page aligned\"").WithContract("@require", "offset < self.size : \"Offset out of range\"").WithContract("@require", "offset + len <= self.size : \"Length out of range\"").WithContract("@return", "? UPDATE_FAILED, ACCESS_DENIED, UNALIGNED_ADDRESS, RANGE_OVERFLOW, UNKNOWN_ERROR").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("VirtualMemory.protect", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Changes protection of a part of memory using vm::protect").WithContract("@param", "offset : \"Starting from what offset to update\"").WithContract("@param", "len : \"To what len to update\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset) : \"The offset should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset + len) : \"The length must be page aligned\"").WithContract("@require", "offset < self.size : \"Offset out of range\"").WithContract("@require", "offset + len < self.size : \"Length out of range\"").WithContract("@return", "? UPDATE_FAILED, ACCESS_DENIED, UNALIGNED_ADDRESS, RANGE_OVERFLOW, UNKNOWN_ERROR").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decommit", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithTypeIdentifier("VirtualMemory").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithArgument(symbols.NewVariableBuilder("block", symbols.NewBaseTypeBuilder("bool", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithArgDefault("true").Build()).WithDocs(symbols.NewDocCommentBuilder("Decommits a part of memory using vm::decommit").WithContract("@param", "offset : \"Starting from what offset to decommit\"").WithContract("@param", "len : \"To what len to decommit\"").WithContract("@param", "block : \"Should the memory be blocked from access after decommit\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset) : \"The offset should be page aligned\"").WithContract("@require", "mem::ptr_is_page_aligned(self.ptr + offset + len) : \"The length must be page aligned\"").WithContract("@require", "offset < self.size : \"Offset out of range\"").WithContract("@require", "offset + len < self.size : \"Length out of range\"").WithContract("@return", "? UPDATE_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::core::mem::vm").IsOptional().Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithTypeIdentifier("VirtualMemory").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemory*", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Releases the memory region").WithContract("@require", "self.ptr != null : \"Virtual memory must be initialized to call destroy\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_posix", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithTypeIdentifier("VirtualMemoryAccess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_win32", symbols.NewTypeBuilder("Win32_Protect", "std::os::win32").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").WithTypeIdentifier("VirtualMemoryAccess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::core::mem::vm", "<stdlib-path>/core/os/mem_vm.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::allocator
	module = moduleCollection["std::core::mem::allocator"]
	module.AddVariable(symbols.NewVariableBuilder("WASM_BLOCK_SIZE", symbols.NewTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").Build()).AddVariable(symbols.NewVariableBuilder("wasm_memory", symbols.NewTypeBuilder("WasmMemory", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").Build()).AddStruct(symbols.NewStructBuilder("WasmMemory", "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").WithStructMember("allocation", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").WithStructMember("use", symbols.NewBaseTypeBuilder("uptr", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocate_block", symbols.NewBaseTypeBuilder("char", "std::core::mem::allocator").IsOptional().IsUnsizedCollection().Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").WithTypeIdentifier("WasmMemory").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WasmMemory*", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::core::mem::allocator").Build(), "std::core::mem::allocator", "<stdlib-path>/core/os/wasm/wasm_memory.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::cpudetect
	module = moduleCollection["std::core::cpudetect"]
	module.AddVariable(symbols.NewVariableBuilder("x86_features", symbols.NewBaseTypeBuilder("uint128", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).AddStruct(symbols.NewStructBuilder("CpuId", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("eax", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ebx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("ecx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithStructMember("edx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("X86Feature", "", "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_AVX512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_FP8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_MOVRS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TF32", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TRANSPOSE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_COMPLEX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_INT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AMX_TILE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APXF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_256", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_1_512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_2_256", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX10_2_512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124FMAPS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX5124VNNIW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BF16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BITALG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512BW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512CD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512DQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512ER", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512F", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512FP16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512IFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512PF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VBMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VP2INTERSECT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVX512VPOPCNTDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXIFMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXNECONVERT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT16", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AVXVNNIINT8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BMI2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLDEMOTE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLFLUSHOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLWB", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLZERO", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMOV", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPCCXADD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CMPXCHG16B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CX8", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENQCMD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("F16C", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FMA4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FSGSBASE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FXSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GFNI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HRESET", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INVPCID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LWP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LZCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MMX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVBE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIR64B", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVDIRI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVRS", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MWAITX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCLMUL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PCONFIG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PKU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POPCNT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHI", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFETCHWT1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRFCHW", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PTWRITE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RAOINT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPID", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDPRU", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDRND", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RDSEED", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RTM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SAHF", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SERIALIZE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SGX", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA512", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHSTK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SM4", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_1", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_2", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSE4_A", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SSSE3", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TBM", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TSXLDTRK", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UINTR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USERMSR", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VAES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VPCLMULQDQ", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WAITPKG", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WBNOINVD", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WIDEKL", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("X87", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XOP", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVE", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEC", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVEOPT", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XSAVES", "<stdlib-path>/core/private/cpu_detect.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("X86Feature").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("x86_cpuid", symbols.NewTypeBuilder("CpuId", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("eax", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("ecx", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_feature_if_bit", symbols.NewBaseTypeBuilder("void", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithArgument(symbols.NewVariableBuilder("feature", symbols.NewTypeBuilder("X86Feature", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("register", symbols.NewBaseTypeBuilder("uint", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithArgument(symbols.NewVariableBuilder("bit", symbols.NewBaseTypeBuilder("int", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("x86_initialize_cpu_features", symbols.NewBaseTypeBuilder("void", "std::core::cpudetect").Build(), "std::core::cpudetect", "<stdlib-path>/core/private/cpu_detect.c3").WithoutSourceCode().Build())

	// Define module std::core::main_stub
	module = moduleCollection["std::core::main_stub"]
	module.AddFunction(symbols.NewFunctionBuilder("_strlen", symbols.NewBaseTypeBuilder("usz", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("args_to_strings", symbols.NewTypeBuilder("String", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_main_runner", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@main_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_win_command_line_to_argv_w", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewBaseTypeBuilder("ushort*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc_ptr", symbols.NewBaseTypeBuilder("int*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("win_command_line_to_strings", symbols.NewTypeBuilder("String", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewBaseTypeBuilder("ushort*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wargs_strings", symbols.NewTypeBuilder("String", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release_wargs", symbols.NewBaseTypeBuilder("void", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("String", "std::core::main_stub").IsUnsizedCollection().Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_noargs", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_err_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_int_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@win_to_void_main", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("prev_handle", symbols.NewBaseTypeBuilder("void*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd_line", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("show_cmd", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_err_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_int_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_wmain_runner", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wmain_to_void_main_args", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").WithArgument(symbols.NewVariableBuilder("#m", symbols.NewTypeBuilder("", "").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("Char16*", "std::core::main_stub").Build(), "std::core::main_stub", "<stdlib-path>/core/private/main_stub.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::mem::ref
	module = moduleCollection["std::core::mem::ref"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::mem::ref", "<stdlib-path>/core/refcount.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("OVERALIGNED", symbols.NewTypeBuilder("", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").Build()).AddStruct(symbols.NewStructBuilder("Ref", "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithStructMember("refcount", symbols.NewTypeBuilder("Atomic*", "std::atomic::types").WithGenericArguments(symbols.NewBaseTypeBuilder("int", "std::core::mem::ref").Build()).Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithStructMember("ptr", symbols.NewGenericTypeBuilder("Type*", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("DeallocFn", "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithResolvesTo("fn void(void*)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wrap", symbols.NewTypeBuilder("Ref", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewGenericTypeBuilder("Type*", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithArgDefault("mem").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("Ref", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("any*", "std::core::mem::ref").IsUnsizedCollection().Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithArgDefault("mem").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$vacount < 2 : \"Too many arguments.\"").WithContract("@require", "$vacount == 0 ||| $defined(Type a = $vaexpr[0]) : \"The first argument must be an initializer for the type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain", symbols.NewTypeBuilder("Ref*", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithTypeIdentifier("Ref").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Ref*", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").WithTypeIdentifier("Ref").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Ref*", "std::core::mem::ref").Build(), "std::core::mem::ref", "<stdlib-path>/core/refcount.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::mem::rc
	module = moduleCollection["std::core::mem::rc"]
	module.AddStruct(symbols.NewStructBuilder("RefCounted", "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").WithStructMember("refcount", symbols.NewTypeBuilder("Atomic", "std::atomic::types").WithGenericArguments(symbols.NewBaseTypeBuilder("int", "std::core::mem::rc").Build()).Build(), "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").WithDocs("A RefCounted struct should be an inline base of a struct.\nIf a `dealloc` is defined, then it will be called rather than `free`\n\nFor convenience, a ref count of 0 is still valid, and the struct is\nonly freed when when ref count drops to -1.\n\nThe macros rc::retain and rc::release must be used on the full pointer,\nnot on the RefCounted substruct.\n\nSo `Foo* f = ...; RefCounted* rc = f; rc::release(rc);` will not do the right thing.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain", symbols.NewTypeBuilder("", "std::core::mem::rc").Build(), "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").WithArgument(symbols.NewVariableBuilder("refcounted", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined(RefCounted* c = refcounted) : \"Expected a ref counted value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::core::mem::rc").Build(), "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").WithArgument(symbols.NewVariableBuilder("refcounted", symbols.NewTypeBuilder("", "").Build(), "std::core::mem::rc", "<stdlib-path>/core/refcount.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined(RefCounted* c = refcounted) : \"Expected a ref counted value\"").WithContract("@require", "!$defined(refcounted.dealloc()) ||| $typeof(refcounted.dealloc()) == void\n   : \"Expected refcounted type to have a valid dealloc\"").Build()).WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddStruct(symbols.NewStructBuilder("AnyRaw", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ReflectedParam", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("type", symbols.NewBaseTypeBuilder("typeid", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("SliceRaw", "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@enum_lookup", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@enum_lookup_new", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("$name", symbols.NewTypeBuilder("", "").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__wasm_call_ctors", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wasm_initialize", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime.c3").WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_MAX_ITERATIONS", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("DEFAULT_BENCHMARK_WARMUP_ITERATIONS", symbols.NewTypeBuilder("", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("bench_fn_iters", symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::core::runtime").Build(), symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build()).Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_log", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_max_iterations", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_nano_seconds", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_stop", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_warming", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("benchmark_warmup_iterations", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("cycle_start", symbols.NewBaseTypeBuilder("long", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("cycle_stop", symbols.NewBaseTypeBuilder("long", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddVariable(symbols.NewVariableBuilder("this_iteration", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).AddStruct(symbols.NewStructBuilder("BenchmarkUnit", "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithStructMember("func", symbols.NewTypeBuilder("BenchmarkFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BenchmarkFn", "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithResolvesTo("fn void ()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("benchmark_collection_create", symbols.NewTypeBuilder("BenchmarkUnit", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_warmup_iterations", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_max_iterations", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_benchmark_func_iterations", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@start_benchmark", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@end_benchmark", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@kill_benchmark", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@log_benchmark", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("msg", symbols.NewTypeBuilder("", "").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_benchmarks", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("benchmarks", symbols.NewTypeBuilder("BenchmarkUnit", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_benchmark_runner", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_benchmark.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::runtime
	module = moduleCollection["std::core::runtime"]
	module.AddVariable(symbols.NewVariableBuilder("test_context", symbols.NewTypeBuilder("TestContext*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).AddStruct(symbols.NewStructBuilder("TestContext", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("buf", symbols.NewTypeBuilder("JmpBuf", "libc").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("test_filter", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("breakpoint_on_assert", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("assert_print_backtrace", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("has_ansi_codes", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("is_in_panic", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("is_quiet_mode", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("is_no_capture", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("current_test_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("setup_fn", symbols.NewTypeBuilder("TestFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("teardown_fn", symbols.NewTypeBuilder("TestFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("error_buffer", symbols.NewBaseTypeBuilder("char*", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("error_buffer_capacity", symbols.NewBaseTypeBuilder("usz", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("fake_stdout", symbols.NewTypeBuilder("File", "std::io").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("stored", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TestUnit", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithStructMember("func", symbols.NewTypeBuilder("TestFn", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TestFn", "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_collection_create", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cmp_test_unit", symbols.NewBaseTypeBuilder("int", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminal_has_ansi_codes", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("test_panic", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("message", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mute_output", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unmute_output", symbols.NewBaseTypeBuilder("void", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("has_error", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("run_tests", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithArgument(symbols.NewVariableBuilder("tests", symbols.NewTypeBuilder("TestUnit", "std::core::runtime").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_test_runner", symbols.NewBaseTypeBuilder("bool", "std::core::runtime").Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::runtime", "<stdlib-path>/core/runtime_test.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::sanitizer::asan
	module = moduleCollection["std::core::sanitizer::asan"]
	module.AddDef(symbols.NewDefBuilder("ErrorCallback", "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithResolvesTo("fn void (ZString)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Marks a memory region ([addr, addr+size)) as unaddressable.\n\nThis memory must be previously allocated by your program. Instrumented\ncode is forbidden from accessing addresses in this region until it is\nunpoisoned. This function is not guaranteed to poison the entire region -\nit could poison only a subregion of [addr, addr+size) due to ASan\nalignment restrictions.\n\nNOTE This function is not thread-safe because no two threads can poison or\nunpoison memory in the same memory region simultaneously.").WithContract("@param", "addr : \"Start of memory region.\"").WithContract("@param", "size : \"Size of memory region.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unpoison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Marks a memory region ([addr, addr+size)) as addressable.\n\nThis memory must be previously allocated by your program. Accessing\naddresses in this region is allowed until this region is poisoned again.\nThis function could unpoison a super-region of [addr, addr+size) due\nto ASan alignment restrictions.\n\nNOTE This function is not thread-safe because no two threads can\npoison or unpoison memory in the same memory region simultaneously.").WithContract("@param", "addr : \"Start of memory region.\"").WithContract("@param", "size : \"Size of memory region.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("address_is_poisoned", symbols.NewBaseTypeBuilder("bool", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Checks if an address is poisoned.").WithContract("@return", "\"True if 'addr' is poisoned (that is, 1-byte read/write access to this address would result in an error report from ASan). Otherwise returns false.\"").WithContract("@param", "addr : \"Address to check.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("region_is_poisoned", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Checks if a region is poisoned.\n\nIf at least one byte in [beg, beg+size) is poisoned, returns the\naddress of the first such byte. Otherwise returns 0.").WithContract("@param", "beg : \"Start of memory region.\"").WithContract("@param", "size : \"Start of memory region.\"").WithContract("@return", "\"Address of first poisoned byte.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_error_report_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("ErrorCallback", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Sets the callback function to be called during ASan error reporting.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_poison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_unpoison_memory_region", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_address_is_poisoned", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_region_is_poisoned", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_describe_address", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_report_present", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_bp", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_sp", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_access_type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_access_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_report_description", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_locate_address", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("name_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("region_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("region_size", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_alloc_stack", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("trace", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_free_stack", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("trace", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_shadow_mapping", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("shadow_scale", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("shadow_offset", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_set_error_report_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("ErrorCallback", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_print_accumulated_stats", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_get_current_fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_addr_is_in_fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("fake_stack", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_handle_no_return", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__asan_update_allocation_context", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer::asan").Build(), "std::core::sanitizer::asan", "<stdlib-path>/core/sanitizer/asan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::sanitizer
	module = moduleCollection["std::core::sanitizer"]
	module.AddStruct(symbols.NewStructBuilder("__Sanitizer_sandbox_arguments", "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_sandboxed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_fd", symbols.NewBaseTypeBuilder("iptr", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithStructMember("coverage_max_block_size", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("annotate_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("annotate_double_ended_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_stack_trace", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_death_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("VoidFn", "std::core::builtin").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_report_path", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_report_fd", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_get_report_path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_sandbox_on_notify", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("__Sanitizer_sandbox_arguments*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_report_error_summary", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("error_summary", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load16", symbols.NewBaseTypeBuilder("ushort", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load32", symbols.NewBaseTypeBuilder("uint", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_load64", symbols.NewBaseTypeBuilder("ulong", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store16", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store32", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_unaligned_store64", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_acquire_crash_state", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_annotate_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_annotate_double_ended_contiguous_container", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_verify_contiguous_container", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_verify_double_ended_contiguous_container", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_contiguous_container_find_bad_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("mid", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_double_ended_contiguous_container_find_bad_address", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("storage_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_beg", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("container_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("storage_end", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_print_stack_trace", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_symbolize_pc", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_symbolize_global", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("data_ptr", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buf_size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_set_death_callback", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("VoidFn", "std::core::builtin").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_memcmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strncmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strncasecmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcasecmp", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strstr", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_strcasestr", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_weak_hook_memmem", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("called_pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s1", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("len1", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("len2", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_print_memory_profile", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("top_percent", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_number_of_contexts", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_start_switch_fiber", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fake_stack_save", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_finish_switch_fiber", symbols.NewBaseTypeBuilder("void", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("fake_stack_save", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom_old", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("size_old", symbols.NewBaseTypeBuilder("usz*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__sanitizer_get_module_and_offset_for_pc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").WithArgument(symbols.NewVariableBuilder("pc", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("module_path", symbols.NewBaseTypeBuilder("char*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("module_path_len", symbols.NewBaseTypeBuilder("usz", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithArgument(symbols.NewVariableBuilder("pc_offset", symbols.NewBaseTypeBuilder("void*", "std::core::sanitizer").Build(), "std::core::sanitizer", "<stdlib-path>/core/sanitizer/sanitizer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::array::slice
	module = moduleCollection["std::core::array::slice"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::core::array::slice", "<stdlib-path>/core/slice2d.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("Slice2d", "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("ptr", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("inner_len", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("ystart", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("ylen", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("xstart", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithStructMember("xlen", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithDocs("A slice2d allows slicing an array like int[10][10] into an arbitrary \"int[][]\"-like counterpart\nTypically you'd use array::slice2d(...) to create one.").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "`The length of the \"outer\" slice`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("count", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "`The total number of elements.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(usz[<2>], Type)", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Step through each element of the slice.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.@each_ref", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(usz[<2>], Type*)", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Step through each element of the slice *by reference*\n").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_row", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").IsUnsizedCollection().Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("idy", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return a row as a slice.").WithContract("@param", "idy : \"The row to return\"").WithContract("@return", "\"The slice for the particular row\"").WithContract("@require", "idy >= 0 && idy < self.ylen").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_coord", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the value at a particular x/y position in the slice.").WithContract("@param", "coord : \"The xy coordinate\"").WithContract("@return", "\"The value at that coordinate\"").WithContract("@require", "coord.y >= 0 && coord.y < self.ylen : \"y value out of range\"").WithContract("@require", "coord.x >= 0 && coord.x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_coord_ref", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get a pointer to the value at a particular x/y position in the slice.").WithContract("@param", "coord : \"The xy coordinate\"").WithContract("@return", "\"A pointer to the value at that coordinate\"").WithContract("@require", "coord.y >= 0 && coord.y < self.ylen : \"y value out of range\"").WithContract("@require", "coord.x >= 0 && coord.x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_xy", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the value at a particular x/y position in the slice.").WithContract("@param", "x : \"The x coordinate\"").WithContract("@param", "y : \"The x coordinate\"").WithContract("@return", "\"The value at that coordinate\"").WithContract("@require", "y >= 0 && y < self.ylen : \"y value out of range\"").WithContract("@require", "x >= 0 && x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.get_xy_ref", symbols.NewGenericTypeBuilder("Type*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the value at a particular x/y position in the slice by reference.").WithContract("@param", "x : \"The x coordinate\"").WithContract("@param", "y : \"The y coordinate\"").WithContract("@return", "\"A pointer to the value at that coordinate\"").WithContract("@require", "y >= 0 && y < self.ylen : \"y value out of range\"").WithContract("@require", "x >= 0 && x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.set_coord", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("coord", symbols.NewBaseTypeBuilder("usz", "std::core::array::slice").IsCollectionWithSize(2).Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Set the ´value at a particular x/y position in the slice.").WithContract("@param", "coord : \"The xy coordinate\"").WithContract("@param", "value : \"The new value\"").WithContract("@require", "coord.y >= 0 && coord.y < self.ylen : \"y value out of range\"").WithContract("@require", "coord.x >= 0 && coord.x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Slice2d.set_xy", symbols.NewBaseTypeBuilder("void", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewGenericTypeBuilder("Type", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Set the value at a particular x/y position in the slice.").WithContract("@param", "x : \"The x coordinate\"").WithContract("@param", "y : \"The y coordinate\"").WithContract("@param", "value : \"The new value\"").WithContract("@require", "y >= 0 && y < self.ylen : \"y value out of range\"").WithContract("@require", "x >= 0 && x < self.xlen : \"x value out of range\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slice", symbols.NewTypeBuilder("Slice2d", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithTypeIdentifier("Slice2d").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Slice2d*", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("xlen", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("ylen", symbols.NewBaseTypeBuilder("isz", "std::core::array::slice").Build(), "std::core::array::slice", "<stdlib-path>/core/slice2d.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("Reslice a slice2d returning a new slice.").WithContract("@param", "x : \"The starting x\"").WithContract("@param", "xlen : \"The length along x\"").WithContract("@param", "y : \"The starting y\"").WithContract("@param", "ylen : \"The length along y\"").WithContract("@require", "y >= 0 && y < self.ylen").WithContract("@require", "x >= 0 && x < self.xlen").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("SURROGATE_BITS", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_CODEPOINT_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_GENERIC_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_HIGH_VALUE", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_LOW_VALUE", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_MASK", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddVariable(symbols.NewVariableBuilder("SURROGATE_OFFSET", symbols.NewTypeBuilder("uint", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).AddStruct(symbols.NewStructBuilder("Splitter", "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("type", symbols.NewTypeBuilder("SplitterType", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithStructMember("last_index", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithDocs("Splitter is handles tokenizing strings.").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char16", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::core::string").Build()).WithDocs("Char16 is a UTF16 \"character\"").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Char32", "std::core::string", "<stdlib-path>/core/string.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::core::string").Build()).WithDocs("Char32 is a UTF32 codepoint").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("String", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewBaseTypeBuilder("char", "std::core::string").IsUnsizedCollection().Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("WString", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Char16*", "std::core::string").Build()).WithDocs("WString is a pointer to a zero terminated array of Char16.\n\nDepending on the platform, this may or may not correspond to wchar_t.\nFor Windows, wchar_t is generally 16 bits, on MacOS it is 32 bits.\nHowever, for both MacOS and Linux, regular C strings (ZString)\nwill be UTF-8 encoded, so there is no need to use the wchar_t versions\nof functions outside of encoding functions.").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ZString", "std::core::string", "<stdlib-path>/core/string.c3").WithInline(true).WithBaseType(symbols.NewBaseTypeBuilder("char*", "std::core::string").Build()).WithDocs("ZString is a pointer to a zero terminated array of chars.\n\nUse ZString when you need to interop with C zero terminated strings.").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("SplitterType", "", "std::core::string", "<stdlib-path>/core/string.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TOKENIZE", "<stdlib-path>/core/string.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("SplitterType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOKENIZE_ALL", "<stdlib-path>/core/string.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("SplitterType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOKENIZE_ALL_SKIP_LAST", "<stdlib-path>/core/string.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("SplitterType").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::string", "<stdlib-path>/core/string.c3").WithConstant(symbols.NewFaultConstantBuilder("BUFFER_EXCEEDED", "std::core::string", "../../../assets/c3c/lib/std/core/string.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@wstring32", symbols.NewTypeBuilder("Char32*", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a pointer to an UTF32 encoded string at compile time.").WithContract("@param", "$string : \"The string to encode\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@char32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a slice of an UTF32 encoded string at compile time.").WithContract("@param", "$string : \"The string to encode\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wstring", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a WString (an UTF16 encoded string) at compile time.").WithContract("@param", "$string : \"The string to encode\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@char16", symbols.NewTypeBuilder("Char16", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("$string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a slice of an UTF32 encoded string at compile time.").WithContract("@param", "$string : \"The string to encode\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sprintf", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("$format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tformat_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Return a temporary ZString created using the formatting function.").WithContract("@param", "[in] fmt : `The formatting string`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Return a new String created using the formatting function.").WithContract("@param", "[inout] allocator : `The allocator to use`").WithContract("@param", "[in] fmt : `The formatting string`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bformat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Return a new String created using the formatting function, the resulting string must fit the buffer.").WithContract("@param", "[inout] buffer : `The buffer to use`").WithContract("@param", "[in] fmt : `The formatting string`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tformat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Return a temporary String created using the formatting function.").WithContract("@param", "[in] fmt : `The formatting string`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_in_set", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("set", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if a character is in a set.").WithContract("@param", "c : `the character to check`").WithContract("@param", "[in] set : `String containing the characters`").WithContract("@pure", "").WithContract("@return", "`True if a character is in the set`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("joiner", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("replace", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Replace all instances of one substring with a different string.").WithContract("@param", "[in] self").WithContract("@param", "[in] needle : `The string to be replaced`").WithContract("@param", "[in] new_str : `The replacement string`").WithContract("@param", "[&inout] allocator : `The allocator to use for the String`").WithContract("@return", "\"The new string with the elements replaced\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("treplace", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Replace all instances of one substring with a different string, allocating the new string on the temp allocator.").WithContract("@param", "[in] self").WithContract("@param", "[in] needle : `The string to be replaced`").WithContract("@param", "[in] new_str : `The replacement string`").WithContract("@return", "\"The new string with the elements replaced\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("\" \\n\\t\\r\\f\\v\"").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove characters from the front and end of a string.").WithContract("@param", "[in] self : `The string to trim`").WithContract("@param", "[in] to_trim : `The set of characters to trim, defaults to whitespace`").WithContract("@pure", "").WithContract("@return", "`a substring of the string passed in`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim_charset", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("AsciiCharset", "std::core::ascii").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("ascii::WHITESPACE_SET").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove characters from the front and end of a string.").WithContract("@param", "[in] self : `The string to trim`").WithContract("@param", "to_trim : `The set of characters to trim, defaults to whitespace`").WithContract("@pure", "").WithContract("@return", "`a substring of the string passed in`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim_left", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("\" \\n\\t\\r\\f\\v\"").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove characters from the front of a string.").WithContract("@param", "[in] self : `The string to trim`").WithContract("@param", "[in] to_trim : `The set of characters to trim, defaults to whitespace`").WithContract("@pure", "").WithContract("@return", "`a substring of the string passed in`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trim_right", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("to_trim", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("\" \\n\\t\\r\\f\\v\"").Build()).WithDocs(symbols.NewDocCommentBuilder("Remove characters from the end of a string.").WithContract("@param", "[in] self : `The string to trim`").WithContract("@param", "[in] to_trim : `The set of characters to trim, defaults to whitespace`").WithContract("@pure", "").WithContract("@return", "`a substring of the string passed in`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("starts_with", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("prefix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the String starts with the prefix.").WithContract("@param", "[in] self").WithContract("@param", "[in] prefix").WithContract("@pure", "").WithContract("@return", "`'true' if the string starts with the prefix`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ends_with", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("suffix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if the String ends with the suffix.").WithContract("@param", "[in] self").WithContract("@param", "[in] suffix").WithContract("@pure", "").WithContract("@return", "`'true' if the string ends with the suffix`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("prefix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Strip the front of the string if the prefix exists.").WithContract("@param", "[in] self").WithContract("@param", "[in] prefix").WithContract("@pure", "").WithContract("@return", "`the substring with the prefix removed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strip_end", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("suffix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Strip the end of the string if the suffix exists.").WithContract("@param", "[in] self").WithContract("@param", "[in] suffix").WithContract("@pure", "").WithContract("@return", "`the substring with the suffix removed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("delimiter", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Split a string into parts, e.g \"a|b|c\" split with \"|\" yields { \"a\", \"b\", \"c\" }").WithContract("@param", "[in] self").WithContract("@param", "[in] delimiter").WithContract("@param", "max : \"Max number of elements, 0 means no limit, defaults to 0\"").WithContract("@param", "skip_empty : \"True to skip empty elements\"").WithContract("@param", "[&inout] allocator : \"The allocator to use for the String[]\"").WithContract("@require", "delimiter.len > 0 : \"The delimiter must be at least 1 character long\"").WithContract("@ensure", "return.len > 0 || skip_empty").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tsplit", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("delimiter", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("This function is identical to String.split, but implicitly uses the\ntemporary allocator.").WithContract("@param", "[in] s").WithContract("@param", "[in] delimiter").WithContract("@param", "max : \"Max number of elements, 0 means no limit, defaults to 0\"").WithContract("@param", "skip_empty : \"True to skip empty elements\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("split_to_buffer", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("delimiter", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("skip_empty", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Split a string into parts, e.g \"a|b|c\" split with \"|\" yields { \"a\", \"b\", \"c\" }").WithContract("@param", "[in] s").WithContract("@param", "[in] delimiter").WithContract("@param", "[inout] buffer").WithContract("@param", "max : \"Max number of elements, 0 means no limit, defaults to 0\"").WithContract("@require", "delimiter.len > 0 : \"The delimiter must be at least 1 character long\"").WithContract("@ensure", "return.len > 0 || skip_empty").WithContract("@return", "? BUFFER_EXCEEDED : `If there are more elements than would fit the buffer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("substr", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if a substring is found in the string.").WithContract("@param", "[in] s").WithContract("@param", "[in] substr : \"The string to look for.\"").WithContract("@pure", "").WithContract("@return", "\"true if the string contains the substring, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("contains_char", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("character", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if a character is found in the string.").WithContract("@param", "[in] s").WithContract("@param", "character : \"The character to look for.\"").WithContract("@pure", "").WithContract("@return", "\"true if the string contains the character, false otherwise\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("count", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("substr", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check how many non-overlapping instances of a substring there is.\n\nIf the substring has zero length, the number of matches is zero.").WithContract("@param", "[in] self : \"The string to search\"").WithContract("@param", "[in] substr : \"The string to look for.\"").WithContract("@pure", "").WithContract("@return", "\"The number of times matched\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_char", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("character", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the first incidence of a string.").WithContract("@param", "[in] self").WithContract("@param", "character : \"The character to look for\"").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@return", "\"the index of the character\"").WithContract("@return", "? NOT_FOUND : \"if the character cannot be found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_chars", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("characters", symbols.NewBaseTypeBuilder("char", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the first incidence of a one of the chars.").WithContract("@param", "[in] self").WithContract("@param", "[in] characters : \"The characters to look for\"").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@return", "\"the index of the character\"").WithContract("@return", "? NOT_FOUND : \"if the character cannot be found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of_char_from", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("character", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("start_index", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the first incidence of a character.").WithContract("@param", "[in] self").WithContract("@param", "character : \"The character to look for\"").WithContract("@param", "start_index : \"The index to start with, may exceed max index.\"").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@return", "\"the index of the character\"").WithContract("@return", "? NOT_FOUND : \"if the character cannot be found starting from the start_index\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of_char", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("character", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the first incidence of a character starting from the end.").WithContract("@param", "[in] self").WithContract("@param", "character : \"the character to find\"").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@return", "\"the index of the character\"").WithContract("@return", "? NOT_FOUND : \"if the character cannot be found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("index_of", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("substr", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the first incidence of a string.").WithContract("@param", "[in] self").WithContract("@param", "[in] substr").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@require", "substr.len > 0 : \"The string must be len 1 or more\"").WithContract("@return", "\"the index of the substring\"").WithContract("@return", "? NOT_FOUND : \"if the substring cannot be found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rindex_of", symbols.NewBaseTypeBuilder("usz", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("substr", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Find the index of the last incidence of a string.").WithContract("@param", "[in] self").WithContract("@param", "[in] substr").WithContract("@pure", "").WithContract("@ensure", "return < self.len").WithContract("@require", "substr.len > 0 : \"The substring must be len 1 or more\"").WithContract("@return", "\"the index of the substring\"").WithContract("@return", "? NOT_FOUND : \"if the substring cannot be found\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char_len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("WString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_copy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("concat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tconcat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("s2", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("zstr_tcopy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Copy this string, by duplicating the string, always adding a zero byte\nsentinel, so that it safely can be converted to a ZString by a\ncast.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String*", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("ZString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert an UTF-8 string to UTF-16").WithContract("@return", "\"The UTF-16 string as a slice, allocated using the given allocator\"").WithContract("@return", "? INVALID_UTF8 : \"If the string contained an invalid UTF-8 sequence\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_wstring", symbols.NewTypeBuilder("WString", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_wstring", symbols.NewTypeBuilder("WString", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_temp_utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_to_lower", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a string to ASCII lower case in place.").WithContract("@param", "[inout] self").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower_copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_lower_tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_to_upper", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a string to ASCII upper case.").WithContract("@param", "[inout] self").WithContract("@pure", "").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper_copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns a string converted to ASCII upper case.").WithContract("@param", "[in] self").WithContract("@param", "[inout] allocator").WithContract("@return", "`a new String converted to ASCII upper case.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capitalize_copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("snake_to_pascal_copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a string from `snake_case` to PascalCase.").WithContract("@param", "[in] self").WithContract("@return", "`\"FooBar\" from \"foo_bar\" the resulting pointer may safely be cast to ZString.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_snake_to_pascal", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String*", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Movifies the current string from `snake_case` to PascalCase.").WithContract("@param", "[inout] self").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pascal_to_snake_copy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a string from `PascalCase` to `snake_case`.").WithContract("@param", "[in] self").WithContract("@return", "`\"foo_bar\" from \"FooBar\" the resulting pointer may safely be cast to ZString.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iterator", symbols.NewTypeBuilder("StringIterator", "std::core::string::iterator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_upper_tcopy", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] self").WithContract("@return", "`a temporary String converted to ASCII upper case.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_utf32", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf32", symbols.NewTypeBuilder("Char32", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_utf16", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_wstring", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("wstring", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tfrom_wstring", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("wstring", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tfrom_utf16", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("utf16", symbols.NewTypeBuilder("Char16", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("utf8_codepoints", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "std::core::mem").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_zstr", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Determine whether the current string actually points to a ZString-like string.\n\nThis is done by looking at the byte one step after the end of the string. If this\nis zero, it is considered zero terminated.\n\nThis function can safely be used with data pointing to null. However, it will not\nwork correctly if the pointer is invalid, for example it is already freed.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quick_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return a pointer to the string *iff* it is a pointer\nto a zero terminated string, otherwise return a temp allocated zstring copy.\n\nThis function is suitable if you are converting strings to ZString on the temp\nallocator, but suspect that the String might actually already point to zero\nterminated data.\n\nThe function looks one step beyond the end of the slice to determine this,\nwhich means that if that data is then modified after this call, this function\nmight behave incorrectly.\n\nFor this reason, try to ensure that the resulting ZString is immediately used.").WithContract("@ensure", "return[self.len] == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_integer", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Convert a number to a given base. If the base is not given, then\nit will be inferred from the number if the string starts with 0x 0o or 0b and the\nbase is given as 10.\n\nFurthermore it will skip any spaces before and after the number.").WithContract("@param", "$Type : \"The type to convert to\"").WithContract("@param", "base : \"The base to convert to\"").WithContract("@require", "base > 0 && base <= 16 : \"Unsupported base\"").WithContract("@return", "? MALFORMED_INTEGER : \"When the value has some illegal character\"").WithContract("@return", "? INTEGER_OVERFLOW : \"If the value does not fit in the given type\"").WithContract("@return", "? EMPTY_STRING : \"If the string was empty\"").WithContract("@return", "? NEGATIVE_VALUE : \"If the type was unsigned, and the value had a - prefix\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int128", symbols.NewBaseTypeBuilder("int128", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_long", symbols.NewBaseTypeBuilder("long", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_int", symbols.NewBaseTypeBuilder("int", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_short", symbols.NewBaseTypeBuilder("short", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ichar", symbols.NewBaseTypeBuilder("ichar", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint128", symbols.NewBaseTypeBuilder("uint128", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ulong", symbols.NewBaseTypeBuilder("ulong", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uint", symbols.NewBaseTypeBuilder("uint", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ushort", symbols.NewBaseTypeBuilder("ushort", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_uchar", symbols.NewBaseTypeBuilder("char", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("10").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_double", symbols.NewBaseTypeBuilder("double", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_float", symbols.NewBaseTypeBuilder("float", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tokenize", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Create a Splitter to track tokenizing of a string. Tokenize will turn \"foo:bar::baz\" into\n\"foo\", \"bar\" and \"baz\", if you want the empty string to be present, use `tokenize_all`\ninstead.").WithContract("@param", "[in] split : \"The string to use for splitting\"").WithContract("@return", "\"A Splitter to track the state\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tokenize_all", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("skip_last", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Create a Splitter to track tokenizing of a string. Tokenize will turn \"foo:bar::baz\" into\n\"foo\", \"bar\" and \"baz\", if you want the empty string to be present, use `tokenize_all`\ninstead.").WithContract("@param", "[in] split : \"The string to use for splitting\"").WithContract("@param", "skip_last : \"Set to true to not include the last empty token if present (default: false)\"").WithContract("@return", "\"A Splitter to track the state\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("splitter", symbols.NewTypeBuilder("Splitter", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("split", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_struct", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("This macro will create a string description of a struct.").WithContract("@param", "[&inout] allocator : \"The allocator to use\"").WithContract("@param", "x : \"The struct to create a description of\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tfrom_struct", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("This macro will create a temporary string description of a struct.").WithContract("@param", "x : \"The struct to create a description of\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Splitter*", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string.c3").WithTypeIdentifier("Splitter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Splitter*", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddFault(symbols.NewFaultBuilder("", "", "std::core::string", "<stdlib-path>/core/string_escape.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_ESCAPE_SEQUENCE", "std::core::string", "../../../assets/c3c/lib/std/core/string_escape.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNTERMINATED_STRING", "std::core::string", "../../../assets/c3c/lib/std/core/string_escape.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_HEX_ESCAPE", "std::core::string", "../../../assets/c3c/lib/std/core/string_escape.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_UNICODE_ESCAPE", "std::core::string", "../../../assets/c3c/lib/std/core/string_escape.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("escape", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("strip_quotes", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgDefault("true").Build()).WithDocs(symbols.NewDocCommentBuilder("Escape a string by adding quotes and converting special characters to escape sequences.").WithContract("@param", "allocator : \"The allocator to use for the result\"").WithContract("@param", "s : \"The string to escape\"").WithContract("@param", "strip_quotes : \"Do not include beginning and end quotes, defaults to false\"").WithContract("@return", "\"The escaped string with surrounding quotes, can safely be cast to ZString\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tescape", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("strip_quotes", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Escape a string using the temp allocator.").WithContract("@param", "s : \"The string to escape\"").WithContract("@param", "strip_quotes : \"Do not include beginning and end quotes, defaults to false\"").WithContract("@return", "\"The escaped string with surrounding quotes\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("escape_len", symbols.NewBaseTypeBuilder("usz", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the length needed for an escaped string (including quotes).").WithContract("@param", "s : \"The string to check\"").WithContract("@return", "\"The length needed for the escaped version\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unescape", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("allow_unquoted", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Unescape a quoted string by parsing escape sequences.").WithContract("@param", "allocator : \"The allocator to use for the result\"").WithContract("@param", "s : \"The quoted string to unescape\"").WithContract("@param", "allow_unquoted : \"Set to true to unescape strings not surrounded by quotes, defaults to false\"").WithContract("@return", "\"The unescaped string without quotes, safe to convert to ZString\"").WithContract("@return", "? UNTERMINATED_STRING, INVALID_ESCAPE_SEQUENCE, INVALID_HEX_ESCAPE, INVALID_UNICODE_ESCAPE").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tunescape", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithArgument(symbols.NewVariableBuilder("allow_unquoted", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Unescape a quoted string using the temp allocator.").WithContract("@param", "s : \"The quoted string to unescape\"").WithContract("@param", "allow_unquoted : \"Set to true to unescape strings not surrounded by quotes, defaults to false\"").WithContract("@return", "\"The unescaped string without quotes\"").WithContract("@return", "? UNTERMINATED_STRING, INVALID_ESCAPE_SEQUENCE, INVALID_HEX_ESCAPE, INVALID_UNICODE_ESCAPE").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("needs_escape", symbols.NewBaseTypeBuilder("bool", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_escape.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Check if a character needs to be escaped in a string literal.").WithContract("@param", "c : \"The character to check\"").WithContract("@return", "\"True if the character needs escaping\"").Build()).WithoutSourceCode().Build())

	// Define module std::core::string::iterator
	module = moduleCollection["std::core::string::iterator"]
	module.AddStruct(symbols.NewStructBuilder("StringIterator", "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("utf8", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("usz", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reset", symbols.NewBaseTypeBuilder("void", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator*", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator*", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator*", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_next", symbols.NewBaseTypeBuilder("bool", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator*", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get", symbols.NewTypeBuilder("Char32", "std::core::string").IsOptional().Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").WithTypeIdentifier("StringIterator").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("StringIterator*", "std::core::string::iterator").Build(), "std::core::string::iterator", "<stdlib-path>/core/string_iterator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::core::string
	module = moduleCollection["std::core::string"]
	module.AddVariable(symbols.NewVariableBuilder("B1B_DIG", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1B_MAX", symbols.NewTypeBuilder("uint[2]", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("KMAX", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).AddFunction(symbols.NewFunctionBuilder("decfloat", symbols.NewBaseTypeBuilder("double", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewBaseTypeBuilder("char", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$bits", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$emin", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "chars.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hexfloat", symbols.NewBaseTypeBuilder("double", "std::core::string").IsOptional().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewBaseTypeBuilder("char", "std::core::string").IsUnsizedCollection().Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$bits", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$emin", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("int", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("String.to_real", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").WithArgument(symbols.NewVariableBuilder("chars", symbols.NewTypeBuilder("", "").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::core::string", "<stdlib-path>/core/string_to_real.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::test
	module = moduleCollection["std::core::test"]
	module.AddFunction(symbols.NewFunctionBuilder("@setup", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("setup_fn", symbols.NewTypeBuilder("TestFn", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("teardown_fn", symbols.NewTypeBuilder("TestFn", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgDefault("null").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Initializes test case context.").WithContract("@param", "setup_fn : `initializer function for test case`").WithContract("@param", "teardown_fn : `cleanup function for test context (may be null)`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").WithContract("@require", "setup_fn != null : \"setup_fn must always be set\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@check", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("#condition", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgDefault("\"\"").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::core::test").IsUnsizedCollection().Build(), "std::core::test", "<stdlib-path>/core/test.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Checks condition and fails assertion if not true").WithContract("@param", "#condition : `any boolean condition, will be expanded by text`").WithContract("@param", "format : `printf compatible format`").WithContract("@param", "args : `vargs for format`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@error", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("#funcresult", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("error_expected", symbols.NewBaseTypeBuilder("fault", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if function returns specific error").WithContract("@param", "#funcresult : `result of function execution`").WithContract("@param", "error_expected : `expected error of function execution`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left == right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq_approx", symbols.NewBaseTypeBuilder("void", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewBaseTypeBuilder("double", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewBaseTypeBuilder("double", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("places", symbols.NewBaseTypeBuilder("uint", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgDefault("7").Build()).WithArgument(symbols.NewVariableBuilder("delta", symbols.NewBaseTypeBuilder("double", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("equal_nan", symbols.NewBaseTypeBuilder("bool", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgDefault("true").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check left floating point value is approximately equals to right value").WithContract("@param", "places : `number of decimal places to compare (default: 7)`").WithContract("@param", "delta : `minimal allowed difference (overrides places parameter)`").WithContract("@param", "equal_nan : `allows comparing nan values, if left and right both nans result is ok`").WithContract("@require", "places > 0, places <= 20 : \"too many decimal places\"").WithContract("@require", "delta >= 0, delta <= 1 : \"delta must be a small number\"").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ne", symbols.NewBaseTypeBuilder("void", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left != right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gt", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left > right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ge", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left >= right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lt", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left < right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("le", symbols.NewTypeBuilder("", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Check if left <= right").WithContract("@param", "left : `left argument of any comparable type`").WithContract("@param", "right : `right argument of any comparable type`").WithContract("@require", "runtime::test_context != null : \"Only allowed in @test functions\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_panicf", symbols.NewBaseTypeBuilder("void", "std::core::test").Build(), "std::core::test", "<stdlib-path>/core/test.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("", "").Build(), "std::core::test", "<stdlib-path>/core/test.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "std::core::test").IsUnsizedCollection().Build(), "std::core::test", "<stdlib-path>/core/test.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::types
	module = moduleCollection["std::core::types"]
	module.AddStruct(symbols.NewStructBuilder("TypeEnum", "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("type", symbols.NewTypeBuilder("TypeKind", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithStructMember("elements", symbols.NewBaseTypeBuilder("usz", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("TypeKind", "char", "std::core::types", "<stdlib-path>/core/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VOID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BOOL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNSIGNED_INT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TYPEID", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FAULT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ENUM", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONST_ENUM", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNION", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BITSTRUCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUNC", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPTIONAL", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ARRAY", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SLICE", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VECTOR", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DISTINCT", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POINTER", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INTERFACE", "<stdlib-path>/core/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("TypeKind").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::core::types", "<stdlib-path>/core/types.c3").WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("VALUE_OUT_OF_UNSIGNED_RANGE", "std::core::types", "../../../assets/c3c/lib/std/core/types.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("any_to_enum_ordinal", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.kindof.is_int() : \"Type was not an integer\"").WithContract("@require", "v.type.kindof == ENUM : \"Value was not an enum\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("any_to_int", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("any", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$Type.kindof.is_int() : \"Type was not an integer\"").WithContract("@require", "v.type.kindof.is_int() : \"Value was not an integer\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("typeid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewBaseTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_subtype_of", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_numerical", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithTypeIdentifier("TypeKind").WithArgument(symbols.NewVariableBuilder("kind", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_slice_convertable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_slice_convertible", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_bool", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_signed", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "is_numerical($Type) : \"Expected a numerical type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_unsigned", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "is_numerical($Type) : \"Expected a numerical type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flat_type", symbols.NewBaseTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flat_kind", symbols.NewTypeBuilder("TypeKind", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_indexable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_ref_indexable", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_flat_intlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_intlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_underlying_int", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_float", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_vector", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inner_type", symbols.NewBaseTypeBuilder("typeid", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inner_kind", symbols.NewTypeBuilder("TypeKind", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@has_same", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("#a", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("#b", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::core::types").IsUnsizedCollection().Build(), "std::core::types", "<stdlib-path>/core/types.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("may_load_atomic", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lower_to_atomic_compatible_type", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_promotable_to_float", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_same_vector_type", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_equals", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_equatable_type", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("implements_copy", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Checks if a type implements the copy protocol.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@equatable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@comparable_value", symbols.NewBaseTypeBuilder("bool", "std::core::types").Build(), "std::core::types", "<stdlib-path>/core/types.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::types", "<stdlib-path>/core/types.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::core::values
	module = moduleCollection["std::core::values"]
	module.AddFunction(symbols.NewFunctionBuilder("@typematch", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value2", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_type", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value2", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return true if two values have the same type before any conversions.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_bool", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_int", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_flat_intlike", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_float", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_floatlike", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_promotable_to_float", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_vector", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_vector_type", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value2", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@assign_to", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value2", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_lvalue", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_const", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#foo", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("promote_int", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@select", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("$bool", symbols.NewBaseTypeBuilder("bool", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value_1", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("#value_2", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Select between two values at compile time,\nthe values do not have to be of the same type.\n\nThis acts like `$bool ? #value_1 : #value_2` but at compile time.").WithContract("@param", "$bool : `true for picking the first value, false for the other`").WithContract("@param", "#value_1").WithContract("@param", "#value_2").WithContract("@returns", "`The selected value.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("promote_int_same", symbols.NewTypeBuilder("", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@inner_kind", symbols.NewTypeBuilder("TypeKind", "std::core::values").Build(), "std::core::values", "<stdlib-path>/core/values.c3").WithArgument(symbols.NewVariableBuilder("#value", symbols.NewTypeBuilder("", "").Build(), "std::core::values", "<stdlib-path>/core/values.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::crypto::aes128
	module = moduleCollection["std::crypto::aes128"]
	module.AddFunction(symbols.NewFunctionBuilder("encrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes128").IsCollectionWithSize(16).Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes128").IsCollectionWithSize(16).Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes128").IsCollectionWithSize(16).Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes128").IsCollectionWithSize(16).Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes128").IsUnsizedCollection().Build(), "std::crypto::aes128", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::aes192
	module = moduleCollection["std::crypto::aes192"]
	module.AddFunction(symbols.NewFunctionBuilder("encrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes192").IsCollectionWithSize(24).Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes192").IsCollectionWithSize(24).Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes192").IsCollectionWithSize(24).Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes192").IsCollectionWithSize(24).Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes192").IsUnsizedCollection().Build(), "std::crypto::aes192", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::aes256
	module = moduleCollection["std::crypto::aes256"]
	module.AddFunction(symbols.NewFunctionBuilder("encrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes256").IsCollectionWithSize(32).Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes256").IsCollectionWithSize(32).Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes256").IsCollectionWithSize(32).Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecrypt", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char*", "std::crypto::aes256").IsCollectionWithSize(32).Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("iv", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::aes256").IsUnsizedCollection().Build(), "std::crypto::aes256", "<stdlib-path>/crypto/aes_128_192_256.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto
	module = moduleCollection["std::crypto"]
	module.AddFunction(symbols.NewFunctionBuilder("safe_compare", symbols.NewBaseTypeBuilder("bool", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").WithArgument(symbols.NewVariableBuilder("data1", symbols.NewBaseTypeBuilder("void*", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithArgument(symbols.NewVariableBuilder("data2", symbols.NewBaseTypeBuilder("void*", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::crypto").Build(), "std::crypto", "<stdlib-path>/crypto/crypto.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::dh
	module = moduleCollection["std::crypto::dh"]
	module.AddFunction(symbols.NewFunctionBuilder("generate_secret", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("public_key", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("g", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("BigInt", "std::math::bigint").Build(), "std::crypto::dh", "<stdlib-path>/crypto/dh.c3").Build()).WithoutSourceCode().Build())

	// Define module std::crypto::rc4
	module = moduleCollection["std::crypto::rc4"]
	module.AddStruct(symbols.NewStructBuilder("Rc4", "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("j", symbols.NewBaseTypeBuilder("uint", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsCollectionWithSize(256).Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4*", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Initialize the RC4 state.").WithContract("@param", "[in] key : \"The key to use\"").WithContract("@require", "key.len > 0 : \"The key must be at least 1 byte long\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("crypt", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Run a single pass of en/decryption using a particular key.").WithContract("@param", "[in] key").WithContract("@param", "[inout] data").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("crypt", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4*", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("in", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewBaseTypeBuilder("char", "std::crypto::rc4").IsUnsizedCollection().Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Encrypt or decrypt a sequence of bytes.").WithContract("@param", "[in] in : \"The input\"").WithContract("@param", "[out] out : \"The output\"").WithContract("@require", "in.len <= out.len : \"Output would overflow\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").WithTypeIdentifier("Rc4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Rc4*", "std::crypto::rc4").Build(), "std::crypto::rc4", "<stdlib-path>/crypto/rc4.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Clear the rc4 state.").WithContract("@param", "[&out] self : \"The RC4 State\"").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::base32
	module = moduleCollection["std::encoding::base32"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PAD", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEX", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEX_ALPHABET", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("uint", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PAD", symbols.NewTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PADDING", symbols.NewTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STANDARD", symbols.NewTypeBuilder("Base32Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_ALPHABET", symbols.NewTypeBuilder("Alphabet", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_PADDING", symbols.NewTypeBuilder("int", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).AddStruct(symbols.NewStructBuilder("Base32Alphabet", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("encoding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsCollectionWithSize(32).Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithStructMember("reverse", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsCollectionWithSize(256).Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Alphabet", "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsCollectionWithSize(32).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode the content of src into a newly allocated string").WithContract("@param", "[in] src : \"The input to be encoded.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The encoded string.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Decode the content of src into a newly allocated char array.").WithContract("@param", "[in] src : \"The input to be encoded.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The decoded data.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencode", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecode", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the length in bytes of the decoded data.").WithContract("@param", "n : \"Length in bytes of input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"Length in bytes of the decoded data.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the length in bytes of the encoded data.").WithContract("@param", "n : \"Length in bytes on input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"Length in bytes of the encoded data.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Decode the content of src into dst, which must be properly sized.").WithContract("@param", "src : \"The input to be decoded.\"").WithContract("@param", "dst : \"The decoded input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@require", "dst.len >= decode_len(src.len, padding) : \"Destination buffer too small\"").WithContract("@return", "\"The resulting dst buffer\"").WithContract("@return", "? encoding::INVALID_PADDING, encoding::INVALID_CHARACTER").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").IsUnsizedCollection().Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base32Alphabet*", "std::encoding::base32").Build(), "std::encoding::base32", "<stdlib-path>/encoding/base32.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode the content of src into dst, which must be properly sized.").WithContract("@param", "[in] src : \"The input to be encoded.\"").WithContract("@param", "[inout] dst : \"The encoded input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@require", "dst.len >= encode_len(src.len, padding) : \"Destination buffer too small\"").WithContract("@return", "\"The encoded size.\"").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::base64
	module = moduleCollection["std::encoding::base64"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_PAD", symbols.NewTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("MASK", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_PAD", symbols.NewTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("STANDARD", symbols.NewTypeBuilder("Base64Alphabet", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("STD_ALPHABET", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("URL", symbols.NewTypeBuilder("Base64Alphabet", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddVariable(symbols.NewVariableBuilder("URL_ALPHABET", symbols.NewTypeBuilder("", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).AddStruct(symbols.NewStructBuilder("Base64Alphabet", "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("encoding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsCollectionWithSize(64).Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithStructMember("reverse", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsCollectionWithSize(256).Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecode", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the size of the encoded data.").WithContract("@param", "n : \"Size of the input to be encoded.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The size of the input once encoded.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").IsOptional().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the size of the decoded data.").WithContract("@param", "n : \"Size of the input to be decoded.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The size of the input once decoded.\"").WithContract("@return", "? encoding::INVALID_PADDING").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode the content of src into dst, which must be properly sized.").WithContract("@param", "src : \"The input to be encoded.\"").WithContract("@param", "dst : \"The encoded input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The encoded size.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsOptional().IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").IsUnsizedCollection().Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").Build()).WithArgument(symbols.NewVariableBuilder("padding", symbols.NewBaseTypeBuilder("char", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("DEFAULT_PAD").Build()).WithArgument(symbols.NewVariableBuilder("alphabet", symbols.NewTypeBuilder("Base64Alphabet*", "std::encoding::base64").Build(), "std::encoding::base64", "<stdlib-path>/encoding/base64.c3").WithArgDefault("&STANDARD").Build()).WithDocs(symbols.NewDocCommentBuilder("Decode the content of src into dst, which must be properly sized.").WithContract("@param", "src : \"The input to be decoded.\"").WithContract("@param", "dst : \"The decoded input.\"").WithContract("@param", "padding : \"The padding character or 0 if none\"").WithContract("@param", "alphabet : \"The alphabet to use\"").WithContract("@require", "(decode_len(src.len, padding) ?? 0) <= dst.len : \"Destination buffer too small\"").WithContract("@require", "padding < 0xFF : \"Invalid padding character\"").WithContract("@return", "\"The decoded data.\"").WithContract("@return", "? encoding::INVALID_CHARACTER, encoding::INVALID_PADDING").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::csv
	module = moduleCollection["std::encoding::csv"]
	module.AddStruct(symbols.NewStructBuilder("CsvReader", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("separator", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("CsvRow", "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("list", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("row", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow*", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow*", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_col", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow*", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("col", symbols.NewBaseTypeBuilder("usz", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "col < self.list.len").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader*", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("separator", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgDefault("\",\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_row", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] allocator").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tread_row", symbols.NewTypeBuilder("CsvRow", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvRow").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvRow*", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.allocator != null  : `Row already freed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("skip_row", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithTypeIdentifier("CsvReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@each_row", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("InStream", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("separator", symbols.NewTypeBuilder("String", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgDefault("\",\"").Build()).WithArgument(symbols.NewVariableBuilder("max_rows", symbols.NewBaseTypeBuilder("int", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgDefault("int.max").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(String[] row)", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CsvReader.@each_row", symbols.NewBaseTypeBuilder("void", "std::encoding::csv").IsOptional().Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CsvReader", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).WithArgument(symbols.NewVariableBuilder("rows", symbols.NewBaseTypeBuilder("int", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").WithArgDefault("int.max").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(String[] row)", "std::encoding::csv").Build(), "std::encoding::csv", "<stdlib-path>/encoding/csv.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::encoding
	module = moduleCollection["std::encoding"]
	module.AddFault(symbols.NewFaultBuilder("", "", "std::encoding", "<stdlib-path>/encoding/encoding.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_CHARACTER", "std::encoding", "../../../assets/c3c/lib/std/encoding/encoding.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PADDING", "std::encoding", "../../../assets/c3c/lib/std/encoding/encoding.c3").WithFaultName("").Build()).Build())

	// Define module std::encoding::hex
	module = moduleCollection["std::encoding::hex"]
	module.AddVariable(symbols.NewVariableBuilder("HEXALPHABET", symbols.NewTypeBuilder("char[*]", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).AddVariable(symbols.NewVariableBuilder("HEXREVERSE", symbols.NewTypeBuilder("char[*]", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).AddFunction(symbols.NewFunctionBuilder("encode_buffer", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_buffer", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecode", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsOptional().IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("code", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the size of the encoded data.").WithContract("@param", "n : \"Size of the input to be encoded.\"").WithContract("@return", "\"The size of the input once encoded.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_bytes", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode the content of src into dst, which must be properly sized.").WithContract("@param", "src : \"The input to be encoded.\"").WithContract("@param", "dst : \"The encoded input.\"").WithContract("@return", "\"The encoded size.\"").WithContract("@require", "dst.len >= encode_len(src.len) : \"Destination array is not large enough\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Calculate the size of the decoded data.").WithContract("@param", "n : \"Size of the input to be decoded.\"").WithContract("@return", "\"The size of the input once decoded.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_bytes", symbols.NewBaseTypeBuilder("usz", "std::encoding::hex").IsOptional().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char", "std::encoding::hex").IsUnsizedCollection().Build(), "std::encoding::hex", "<stdlib-path>/encoding/hex.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Decodes src into bytes. Returns the actual number of bytes written to dst.\n\nExpects that src only contains hexadecimal characters and that src has even\nlength.").WithContract("@param", "src : \"The input to be decoded.\"").WithContract("@param", "dst : \"The decoded input.\"").WithContract("@require", "src.len % 2 == 0 : \"src is not of even length\"").WithContract("@require", "dst.len >= decode_len(src.len) : \"Destination array is not large enough\"").WithContract("@return", "? encoding::INVALID_CHARACTER").Build()).WithoutSourceCode().Build())

	// Define module std::encoding::json
	module = moduleCollection["std::encoding::json"]
	module.AddVariable(symbols.NewVariableBuilder("max_depth", symbols.NewBaseTypeBuilder("int", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).AddStruct(symbols.NewStructBuilder("JsonContext", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_string", symbols.NewTypeBuilder("DString", "std::core::dstring").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("last_number", symbols.NewBaseTypeBuilder("double", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("current", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("depth", symbols.NewBaseTypeBuilder("int", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("skip_comments", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("reached_end", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithStructMember("pushed_back", symbols.NewBaseTypeBuilder("bool", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("JsonTokenType", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NO_TOKEN", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COMMA", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COLON", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RBRACKET", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("STRING", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMBER", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRUE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FALSE", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NULL", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EOF", "<stdlib-path>/encoding/json.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("JsonTokenType").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_CHARACTER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ESCAPE_SEQUENCE", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_NUMBER", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("MAX_DEPTH_REACHED", "std::encoding::json", "../../../assets/c3c/lib/std/encoding/json.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("parse_string", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tparse_string", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tparse", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_from_token", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_any", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_number", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_map", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_array", symbols.NewTypeBuilder("Object*", "std::collections::object").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback", symbols.NewBaseTypeBuilder("void", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_next", symbols.NewBaseTypeBuilder("char", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("advance", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("match", symbols.NewBaseTypeBuilder("void", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_expected", symbols.NewBaseTypeBuilder("void", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithArgument(symbols.NewVariableBuilder("token", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lex_string", symbols.NewTypeBuilder("JsonTokenType", "std::encoding::json").IsOptional().Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("JsonContext*", "std::encoding::json").Build(), "std::encoding::json", "<stdlib-path>/encoding/json.c3").Build()).WithoutSourceCode().Build())

	// Define module std::experimental::scheduler
	module = moduleCollection["std::experimental::scheduler"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Event": symbols.NewGenericParameter("Event", "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("DelayedSchedulerEvent", "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("event", symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("execution_time", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("FrameScheduler", "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("delayed_events", symbols.NewTypeBuilder("PriorityQueue", "std::collections::priorityqueue").WithGenericArguments(symbols.NewTypeBuilder("DelayedSchedulerEvent", "std::experimental::scheduler").Build()).Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("events", symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").Build()).Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("pending_events", symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").Build()).Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("pending", symbols.NewBaseTypeBuilder("bool", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithStructMember("mtx", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("DelayedSchedulerEvent").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DelayedSchedulerEvent", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("DelayedSchedulerEvent", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("FrameScheduler").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FrameScheduler.@destroy", symbols.NewBaseTypeBuilder("void", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithArgument(symbols.NewVariableBuilder("@destruct", symbols.NewTypeBuilder("fn void(Event e)", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("queue_delayed_event", symbols.NewBaseTypeBuilder("void", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("FrameScheduler").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithArgument(symbols.NewVariableBuilder("event", symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithArgument(symbols.NewVariableBuilder("delay", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_delayed", symbols.NewBaseTypeBuilder("bool", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("FrameScheduler").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("queue_event", symbols.NewBaseTypeBuilder("void", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("FrameScheduler").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithArgument(symbols.NewVariableBuilder("event", symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop_event", symbols.NewGenericTypeBuilder("Event", "std::experimental::scheduler").IsOptional().Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").WithTypeIdentifier("FrameScheduler").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FrameScheduler*", "std::experimental::scheduler").Build(), "std::experimental::scheduler", "<stdlib-path>/experimental/FrameScheduler.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::a5hash
	module = moduleCollection["std::hash::a5hash"]
	module.AddFunction(symbols.NewFunctionBuilder("@a5mul", symbols.NewBaseTypeBuilder("void", "std::hash::a5hash").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").WithArgument(symbols.NewVariableBuilder("#u", symbols.NewTypeBuilder("", "").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").Build()).WithArgument(symbols.NewVariableBuilder("#v", symbols.NewTypeBuilder("", "").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").Build()).WithArgument(symbols.NewVariableBuilder("#lo", symbols.NewTypeBuilder("", "").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").Build()).WithArgument(symbols.NewVariableBuilder("#hi", symbols.NewTypeBuilder("", "").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::a5hash").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::a5hash").IsUnsizedCollection().Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::a5hash").Build(), "std::hash::a5hash", "<stdlib-path>/hash/a5hash.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build())

	// Define module std::hash::adler32
	module = moduleCollection["std::hash::adler32"]
	module.AddVariable(symbols.NewVariableBuilder("ADLER_CONST", symbols.NewTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).AddStruct(symbols.NewStructBuilder("Adler32", "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32*", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32*", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32*", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::adler32").IsUnsizedCollection().Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithTypeIdentifier("Adler32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Adler32*", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::hash::adler32").Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::adler32").IsUnsizedCollection().Build(), "std::hash::adler32", "<stdlib-path>/hash/adler32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc32
	module = moduleCollection["std::hash::crc32"]
	module.AddVariable(symbols.NewVariableBuilder("CRC32_TABLE", symbols.NewTypeBuilder("uint[256]", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc32", "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32*", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32*", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32*", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::crc32").IsUnsizedCollection().Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithTypeIdentifier("Crc32").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc32*", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::hash::crc32").Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::crc32").IsUnsizedCollection().Build(), "std::hash::crc32", "<stdlib-path>/hash/crc32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::crc64
	module = moduleCollection["std::hash::crc64"]
	module.AddVariable(symbols.NewVariableBuilder("CRC64_TABLE", symbols.NewTypeBuilder("ulong[256]", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).AddStruct(symbols.NewStructBuilder("Crc64", "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64*", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updatec", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64*", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64*", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::crc64").IsUnsizedCollection().Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithTypeIdentifier("Crc64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Crc64*", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::crc64").Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::crc64").IsUnsizedCollection().Build(), "std::hash::crc64", "<stdlib-path>/hash/crc64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv32a
	module = moduleCollection["std::hash::fnv32a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV32A_MUL", symbols.NewTypeBuilder("", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV32A_START", symbols.NewTypeBuilder("", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Fnv32a", "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::hash::fnv32a").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a*", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithTypeIdentifier("Fnv32a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a*", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").IsUnsizedCollection().Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv32a.update_char", symbols.NewBaseTypeBuilder("void", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv32a*", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::hash::fnv32a").Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::fnv32a").IsUnsizedCollection().Build(), "std::hash::fnv32a", "<stdlib-path>/hash/fnv32a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::fnv64a
	module = moduleCollection["std::hash::fnv64a"]
	module.AddVariable(symbols.NewVariableBuilder("FNV64A_MUL", symbols.NewTypeBuilder("", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddVariable(symbols.NewVariableBuilder("FNV64A_START", symbols.NewTypeBuilder("", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Fnv64a", "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::hash::fnv64a").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("h", symbols.NewTypeBuilder("", "").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a*", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithTypeIdentifier("Fnv64a").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a*", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").IsUnsizedCollection().Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Fnv64a.update_char", symbols.NewBaseTypeBuilder("void", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Fnv64a*", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::fnv64a").Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::fnv64a").IsUnsizedCollection().Build(), "std::hash::fnv64a", "<stdlib-path>/hash/fnv64a.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::hmac
	module = moduleCollection["std::hash::hmac"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"HashAlg": symbols.NewGenericParameter("HashAlg", "std::hash::hmac", "<stdlib-path>/hash/hmac.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IPAD", symbols.NewTypeBuilder("", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPAD", symbols.NewTypeBuilder("", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).AddStruct(symbols.NewStructBuilder("Hmac", "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember("a", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithStructMember("b", symbols.NewGenericTypeBuilder("HashAlg", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("message", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pbkdf2", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("pw", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("salt", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("iterations", symbols.NewBaseTypeBuilder("uint", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("output", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "output.len > 0 : \"Output must be greater than zero\"").WithContract("@require", "output.len < int.max / HASH_BYTES : \"Output is too large\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac*", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac*", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithTypeIdentifier("Hmac").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Hmac*", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@derive", symbols.NewBaseTypeBuilder("void", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").WithArgument(symbols.NewVariableBuilder("hmac_start", symbols.NewTypeBuilder("Hmac*", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("salt", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("iterations", symbols.NewBaseTypeBuilder("uint", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("index", symbols.NewBaseTypeBuilder("usz", "std::hash::hmac").Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewBaseTypeBuilder("char", "std::hash::hmac").IsUnsizedCollection().Build(), "std::hash::hmac", "<stdlib-path>/hash/hmac.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::hash::komi
	module = moduleCollection["std::hash::komi"]
	module.AddFunction(symbols.NewFunctionBuilder("@komimul", symbols.NewBaseTypeBuilder("void", "std::hash::komi").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").WithArgument(symbols.NewVariableBuilder("#u", symbols.NewTypeBuilder("", "").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").Build()).WithArgument(symbols.NewVariableBuilder("#v", symbols.NewTypeBuilder("", "").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").Build()).WithArgument(symbols.NewVariableBuilder("#lo", symbols.NewTypeBuilder("", "").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").Build()).WithArgument(symbols.NewVariableBuilder("#hi", symbols.NewTypeBuilder("", "").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::komi").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::komi").IsUnsizedCollection().Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::komi").Build(), "std::hash::komi", "<stdlib-path>/hash/komi.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build())

	// Define module std::hash::metro128
	module = moduleCollection["std::hash::metro128"]
	module.AddVariable(symbols.NewVariableBuilder("K", symbols.NewTypeBuilder("ulong[4]", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).AddStruct(symbols.NewStructBuilder("MetroHash128", "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro128").IsCollectionWithSize(4).Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("uint128", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithStructMember("stomach_64", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro128").IsCollectionWithSize(4).Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithStructMember("stomach", symbols.NewBaseTypeBuilder("char", "std::hash::metro128").IsCollectionWithSize(32).Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint128", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::metro128").IsUnsizedCollection().Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithTypeIdentifier("MetroHash128").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash128*", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithTypeIdentifier("MetroHash128").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash128*", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::metro128").IsUnsizedCollection().Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("uint128", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").WithTypeIdentifier("MetroHash128").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash128*", "std::hash::metro128").Build(), "std::hash::metro128", "<stdlib-path>/hash/metro128.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::metro64
	module = moduleCollection["std::hash::metro64"]
	module.AddVariable(symbols.NewVariableBuilder("K", symbols.NewTypeBuilder("ulong[4]", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).AddStruct(symbols.NewStructBuilder("MetroHash64", "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").IsCollectionWithSize(4).Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("result", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("stomach_64", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").IsCollectionWithSize(4).Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("stomach", symbols.NewBaseTypeBuilder("char", "std::hash::metro64").IsCollectionWithSize(32).Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithStructMember("vseed", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::metro64").IsUnsizedCollection().Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithTypeIdentifier("MetroHash64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash64*", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithTypeIdentifier("MetroHash64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash64*", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::metro64").IsUnsizedCollection().Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("ulong", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").WithTypeIdentifier("MetroHash64").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MetroHash64*", "std::hash::metro64").Build(), "std::hash::metro64", "<stdlib-path>/hash/metro64.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::sha1
	module = moduleCollection["std::hash::sha1"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_BYTES", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_BYTES", symbols.NewTypeBuilder("", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).AddStruct(symbols.NewStructBuilder("Long16", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("l", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").IsCollectionWithSize(16).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Sha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").IsCollectionWithSize(5).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").IsCollectionWithSize(2).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacSha1", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Sha1", "std::hash::sha1").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesTo("hmac::hash{Sha1, HASH_BYTES, BLOCK_BYTES}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithResolvesTo("hmac::pbkdf2{Sha1, HASH_BYTES, BLOCK_BYTES}").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] data").WithContract("@require", "data.len <= uint.max").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char", "std::hash::sha1").IsUnsizedCollection().Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithTypeIdentifier("Sha1").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha1*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("blk", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("blk0", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r0", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r1", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r2", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r3", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r4", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("block", symbols.NewTypeBuilder("Long16*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("wref", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewBaseTypeBuilder("uint", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha1_transform", symbols.NewBaseTypeBuilder("void", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha1").IsCollectionWithSize(5).Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::hash::sha1").Build(), "std::hash::sha1", "<stdlib-path>/hash/sha1.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] state").WithContract("@param", "[&in] buffer").Build()).WithoutSourceCode().Build())

	// Define module std::hash::sha256
	module = moduleCollection["std::hash::sha256"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_SIZE", symbols.NewTypeBuilder("", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_SIZE", symbols.NewTypeBuilder("", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddVariable(symbols.NewVariableBuilder("K", symbols.NewTypeBuilder("uint[64]", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).AddStruct(symbols.NewStructBuilder("Sha256", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("state", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").IsCollectionWithSize(8).Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("bitcount", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacSha256", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Sha256", "std::hash::sha256").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesTo("hmac::hash{Sha256, HASH_SIZE, BLOCK_SIZE}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithResolvesTo("hmac::pbkdf2{Sha256, HASH_SIZE, BLOCK_SIZE}").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@rotr", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ch", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@maj", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_sigma0", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@_sigma1", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sigma0", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sigma1", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] data").WithContract("@require", "data.len <= uint.max").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char", "std::hash::sha256").IsUnsizedCollection().Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithTypeIdentifier("Sha256").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha256*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha256_transform", symbols.NewBaseTypeBuilder("void", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewBaseTypeBuilder("uint*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::hash::sha256").Build(), "std::hash::sha256", "<stdlib-path>/hash/sha256.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] state").WithContract("@param", "[&in] buffer").Build()).WithoutSourceCode().Build())

	// Define module std::hash::sha512
	module = moduleCollection["std::hash::sha512"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_SIZE", symbols.NewTypeBuilder("", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_SIZE", symbols.NewTypeBuilder("", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).AddVariable(symbols.NewVariableBuilder("K", symbols.NewTypeBuilder("ulong[80]", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).AddStruct(symbols.NewStructBuilder("Sha512", "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithStructMember("length", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithStructMember("hash_state", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").IsCollectionWithSize(8).Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char", "std::hash::sha512").IsUnsizedCollection().Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacSha512", "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Sha512", "std::hash::sha512").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithResolvesTo("hmac::hash{Sha512, HASH_SIZE, BLOCK_SIZE}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithResolvesTo("hmac::pbkdf2{Sha512, HASH_SIZE, BLOCK_SIZE}").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("HashTruncationType", "uint", "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SHA512", "<stdlib-path>/hash/sha512.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("truncation_width", symbols.NewTypeBuilder("uint", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build(), *symbols.NewVariableBuilder("initial_state", symbols.NewTypeBuilder("ulong[8]", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()}).WithEnumName("HashTruncationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA384", "<stdlib-path>/hash/sha512.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("truncation_width", symbols.NewTypeBuilder("uint", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build(), *symbols.NewVariableBuilder("initial_state", symbols.NewTypeBuilder("ulong[8]", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()}).WithEnumName("HashTruncationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA512_224", "<stdlib-path>/hash/sha512.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("truncation_width", symbols.NewTypeBuilder("uint", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build(), *symbols.NewVariableBuilder("initial_state", symbols.NewTypeBuilder("ulong[8]", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()}).WithEnumName("HashTruncationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHA512_256", "<stdlib-path>/hash/sha512.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("truncation_width", symbols.NewTypeBuilder("uint", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build(), *symbols.NewVariableBuilder("initial_state", symbols.NewTypeBuilder("ulong[8]", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()}).WithEnumName("HashTruncationType").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ror", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("k", symbols.NewBaseTypeBuilder("int", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ch", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("maj", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("s0", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("s1", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r0", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("r1", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char", "std::hash::sha512").IsUnsizedCollection().Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha512").IsUnsizedCollection().Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] data").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithTypeIdentifier("Sha512").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha512*", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithTypeIdentifier("Sha512").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha512*", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::sha512").IsUnsizedCollection().Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] data").WithContract("@require", "data.len <= ulong.max").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char", "std::hash::sha512").IsUnsizedCollection().Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithTypeIdentifier("Sha512").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sha512*", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sha512_transform", symbols.NewBaseTypeBuilder("void", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewBaseTypeBuilder("ulong*", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "std::hash::sha512").Build(), "std::hash::sha512", "<stdlib-path>/hash/sha512.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] state").WithContract("@param", "[&in] buf").Build()).WithoutSourceCode().Build())

	// Define module std::hash::siphash24
	module = moduleCollection["std::hash::siphash24"]
	module.AddDef(symbols.NewDefBuilder("SipHash24", "std::hash::siphash24", "<stdlib-path>/hash/siphash.c3").WithResolvesToType(symbols.NewTypeBuilder("SipHash", "std::hash::siphash").WithGenericArguments(symbols.NewBaseTypeBuilder("ulong", "std::hash::siphash24").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hash", "std::hash::siphash24", "<stdlib-path>/hash/siphash.c3").WithResolvesTo("siphash::hash { ulong, 2, 4 }").WithoutSourceCode().Build())

	// Define module std::hash::siphash48
	module = moduleCollection["std::hash::siphash48"]
	module.AddDef(symbols.NewDefBuilder("SipHash48", "std::hash::siphash48", "<stdlib-path>/hash/siphash.c3").WithResolvesToType(symbols.NewTypeBuilder("SipHash", "std::hash::siphash").WithGenericArguments(symbols.NewBaseTypeBuilder("ulong", "std::hash::siphash48").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hash", "std::hash::siphash48", "<stdlib-path>/hash/siphash.c3").WithResolvesTo("siphash::hash { ulong, 4, 8 }").WithoutSourceCode().Build())

	// Define module std::hash::siphash24_128
	module = moduleCollection["std::hash::siphash24_128"]
	module.AddDef(symbols.NewDefBuilder("SipHash24_128", "std::hash::siphash24_128", "<stdlib-path>/hash/siphash.c3").WithResolvesToType(symbols.NewTypeBuilder("SipHash", "std::hash::siphash").WithGenericArguments(symbols.NewBaseTypeBuilder("uint128", "std::hash::siphash24_128").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hash", "std::hash::siphash24_128", "<stdlib-path>/hash/siphash.c3").WithResolvesTo("siphash::hash { uint128, 2, 4 }").WithoutSourceCode().Build())

	// Define module std::hash::siphash48_128
	module = moduleCollection["std::hash::siphash48_128"]
	module.AddDef(symbols.NewDefBuilder("SipHash48_128", "std::hash::siphash48_128", "<stdlib-path>/hash/siphash.c3").WithResolvesToType(symbols.NewTypeBuilder("SipHash", "std::hash::siphash").WithGenericArguments(symbols.NewBaseTypeBuilder("uint128", "std::hash::siphash48_128").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hash", "std::hash::siphash48_128", "<stdlib-path>/hash/siphash.c3").WithResolvesTo("siphash::hash { uint128, 4, 8 }").WithoutSourceCode().Build())

	// Define module std::hash::siphash
	module = moduleCollection["std::hash::siphash"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"OutType": symbols.NewGenericParameter("OutType", "std::hash::siphash", "<stdlib-path>/hash/siphash.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("SipHash", "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithStructMember("v", symbols.NewBaseTypeBuilder("ulong", "std::hash::siphash").IsCollectionWithSize(4).Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithStructMember("m", symbols.NewBaseTypeBuilder("long", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithStructMember("m_idx", symbols.NewBaseTypeBuilder("int", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewGenericTypeBuilder("OutType", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::siphash").IsUnsizedCollection().Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("uint128", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithTypeIdentifier("SipHash").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SipHash*", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("uint128", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithTypeIdentifier("SipHash").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SipHash*", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::siphash").IsUnsizedCollection().Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] data : \"Bytes to hash\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewGenericTypeBuilder("OutType", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithTypeIdentifier("SipHash").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SipHash*", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round", symbols.NewBaseTypeBuilder("void", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").WithTypeIdentifier("SipHash").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SipHash*", "std::hash::siphash").Build(), "std::hash::siphash", "<stdlib-path>/hash/siphash.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::whirlpool
	module = moduleCollection["std::hash::whirlpool"]
	module.AddVariable(symbols.NewVariableBuilder("BLOCK_128", symbols.NewTypeBuilder("", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).AddVariable(symbols.NewVariableBuilder("BLOCK_SIZE", symbols.NewTypeBuilder("", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).AddVariable(symbols.NewVariableBuilder("HASH_SIZE", symbols.NewTypeBuilder("", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).AddVariable(symbols.NewVariableBuilder("RC", symbols.NewTypeBuilder("ulong[10]", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).AddVariable(symbols.NewVariableBuilder("ROUNDS", symbols.NewTypeBuilder("", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).AddStruct(symbols.NewStructBuilder("Whirlpool", "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::whirlpool").IsCollectionWithSize(8).Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithStructMember("block", symbols.NewBaseTypeBuilder("char", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithStructMember("block_128", symbols.NewBaseTypeBuilder("int128", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithStructMember("counter_high", symbols.NewBaseTypeBuilder("uint128", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithStructMember("counter_low", symbols.NewBaseTypeBuilder("uint128", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("HmacWhirlpool", "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithResolvesToType(symbols.NewTypeBuilder("Hmac", "std::hash::hmac").WithGenericArguments(symbols.NewTypeBuilder("Whirlpool", "std::hash::whirlpool").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("hmac", "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithResolvesTo("hmac::hash { Whirlpool, HASH_SIZE, BLOCK_SIZE }").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("pbkdf2", "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithResolvesTo("hmac::pbkdf2 { Whirlpool, HASH_SIZE, BLOCK_SIZE }").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("char", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Whirlpool.init", symbols.NewBaseTypeBuilder("void", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Whirlpool*", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("update", symbols.NewBaseTypeBuilder("void", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithTypeIdentifier("Whirlpool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Whirlpool*", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "data.len <= isz.max : \"Update with smaller slices\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("final", symbols.NewBaseTypeBuilder("char", "std::hash::whirlpool").IsUnsizedCollection().Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithTypeIdentifier("Whirlpool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Whirlpool*", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@w_op", symbols.NewBaseTypeBuilder("ulong", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithArgument(symbols.NewVariableBuilder("#src", symbols.NewTypeBuilder("", "").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithArgument(symbols.NewVariableBuilder("$shift", symbols.NewTypeBuilder("", "").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_block", symbols.NewBaseTypeBuilder("void", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").WithTypeIdentifier("Whirlpool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Whirlpool*", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithArgument(symbols.NewVariableBuilder("block", symbols.NewBaseTypeBuilder("char*", "std::hash::whirlpool").Build(), "std::hash::whirlpool", "<stdlib-path>/hash/whirlpool/whirlpool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::hash::wyhash2
	module = moduleCollection["std::hash::wyhash2"]
	module.AddFunction(symbols.NewFunctionBuilder("wyr3", symbols.NewBaseTypeBuilder("ulong", "std::hash::wyhash2").Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").WithArgument(symbols.NewVariableBuilder("in", symbols.NewBaseTypeBuilder("char*", "std::hash::wyhash2").Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::hash::wyhash2").Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("ulong", "std::hash::wyhash2").Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::hash::wyhash2").IsUnsizedCollection().Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::hash::wyhash2").Build(), "std::hash::wyhash2", "<stdlib-path>/hash/wyhash2.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "input.len <= 16 : `wyhash2 is not useable for inputs over 16 bytes in length.`").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("WRITER_BITS", symbols.NewTypeBuilder("int", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).AddStruct(symbols.NewStructBuilder("BitReader", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("BitWriter", "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_bits", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "nbits <= 8").WithContract("@require", "self.len + nbits <= uint.sizeof * 8").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_bits", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/bits.c3").WithTypeIdentifier("BitWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BitWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("bits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbits", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/bits.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "nbits <= 32").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("File", "std::io", "<stdlib-path>/io/file.c3").WithStructMember("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io", "<stdlib-path>/io/file.c3").WithoutSourceCode().Build())

	// Define module std::io::file
	module = moduleCollection["std::io::file"]
	module.AddFunction(symbols.NewFunctionBuilder("open", symbols.NewTypeBuilder("File", "std::io").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("open_path", symbols.NewTypeBuilder("File", "std::io").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exists", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_handle", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_dir", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_size", symbols.NewBaseTypeBuilder("usz", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reopen", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.file != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgDefault("Seek.SET").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.file != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.file != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eof", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.file != null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] buffer").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[out] buffer").WithContract("@require", "self.file != null : `File must be initialized`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("isatty", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_buffer", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Load up to buffer.len characters. Returns io::OVERFLOW if the file is longer\nthan the buffer.").WithContract("@param", "filename : \"The path to the file to read\"").WithContract("@param", "[in] buffer : \"The buffer to read to\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_path", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_temp", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_path_temp", symbols.NewBaseTypeBuilder("char", "std::io::file").IsOptional().IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("save", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::io::file").IsUnsizedCollection().Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void", "std::io::file").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file.c3").WithTypeIdentifier("File").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.file != null : `File must be initialized`").Build()).WithoutSourceCode().Build())

	// Define module std::io::file::mmap
	module = moduleCollection["std::io::file::mmap"]
	module.AddStruct(symbols.NewStructBuilder("FileMmap", "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithStructMember("file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithStructMember("vm", symbols.NewTypeBuilder("VirtualMemory", "std::core::mem::vm").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithStructMember("offset", symbols.NewBaseTypeBuilder("usz", "std::io::file::mmap").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithStructMember("len", symbols.NewBaseTypeBuilder("usz", "std::io::file::mmap").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io::file::mmap").IsUnsizedCollection().Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithTypeIdentifier("FileMmap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FileMmap*", "std::io::file::mmap").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Provides a slice of bytes to the expected mapped range discarding the extra bytes due to misaligment of offset and/or size.").WithContract("@return", "\"Slice of the mapped range where the first byte matches the file's byte at the offset specified to File::file_mmap()\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::io::file::mmap").IsOptional().Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").WithTypeIdentifier("FileMmap").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FileMmap*", "std::io::file::mmap").Build(), "std::io::file::mmap", "<stdlib-path>/io/file_mmap.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Destroys the underlying VirtualMemory object ie. calls munmap()\"").Build()).WithoutSourceCode().Build())

	// Define module std::io::file
	module = moduleCollection["std::io::file"]
	module.AddFunction(symbols.NewFunctionBuilder("mmap_file", symbols.NewTypeBuilder("FileMmap", "std::io::file::mmap").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("READ").Build()).WithArgument(symbols.NewVariableBuilder("shared", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Maps a region of an already-opened file into memory").WithContract("@param", "file : \"Already opened file created on the caller scope\"").WithContract("@param", "offset : \"Byte offset in file, will be rounded down to page size\"").WithContract("@param", "len : \"Size in bytes to map starting from offset, will be rounded up to page size\"").WithContract("@return", "? mem::OUT_OF_MEMORY, vm::ACCESS_DENIED, vm::RANGE_OVERFLOW, vm::INVALID_ARGS, vm::UNKNOWN_ERROR, io::NO_PERMISSION, io::FILE_NOT_VALID, io::WOULD_BLOCK, io::FILE_NOT_FOUND").WithContract("@return", "\"Memory mapped region. Must be released with FileMmap.destroy(). Provided File will not be closed\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mmap_open", symbols.NewTypeBuilder("FileMmap", "std::io::file::mmap").IsOptional().Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("access", symbols.NewTypeBuilder("VirtualMemoryAccess", "std::core::mem::vm").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("READ").Build()).WithArgument(symbols.NewVariableBuilder("shared", symbols.NewBaseTypeBuilder("bool", "std::io::file").Build(), "std::io::file", "<stdlib-path>/io/file_mmap.c3").WithArgDefault("false").Build()).WithDocs(symbols.NewDocCommentBuilder("Maps a region of the given file into memory").WithContract("@param", "filename : \"File path\"").WithContract("@param", "mode : \"File opening mode\"").WithContract("@param", "offset : \"Byte offset in file, will be rounded down to page size\"").WithContract("@param", "len : \"Size in bytes to map starting from offset, will be rounded up to page size\"").WithContract("@return", "? mem::OUT_OF_MEMORY, vm::ACCESS_DENIED, vm::RANGE_OVERFLOW, vm::INVALID_ARGS, vm::UNKNOWN_ERROR, io::NO_PERMISSION, io::FILE_NOT_VALID, io::WOULD_BLOCK, io::FILE_NOT_FOUND").WithContract("@return", "\"Memory mapped region. Must be released with FileMmap.destroy()\"").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("PRINTF_NTOA_BUFFER_SIZE", symbols.NewTypeBuilder("int", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).AddStruct(symbols.NewStructBuilder("Formatter", "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("out_fn", symbols.NewTypeBuilder("OutputFn", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("flags", symbols.NewTypeBuilder("PrintFlags", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("width", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("prec", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("first_fault", symbols.NewBaseTypeBuilder("fault", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("PrintFlags", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("zeropad", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("left", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("plus", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("space", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("hash", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("uppercase", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithStructMember("precision", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FloatType", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("double", "std::io").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("OutputFn", "std::io", "<stdlib-path>/io/formatter.c3").WithResolvesTo("fn void?(void* buffer, char c)").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::io", "<stdlib-path>/io/formatter.c3").WithConstant(symbols.NewFaultConstantBuilder("BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERNAL_BUFFER_EXCEEDED", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FORMAT", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_ENOUGH_ARGUMENTS", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_ARGUMENT", "std::io", "../../../assets/c3c/lib/std/io/formatter.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("is_struct_with_default_print", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("struct_to_format", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("$force_dump", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Introspect a struct and print it to a formatter").WithContract("@require", "$kindof(value) == STRUCT || $kindof(value) == BITSTRUCT : `This macro is only valid on macros`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("ReflectedParam").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReflectedParam*", "std::core::runtime").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_fn", symbols.NewTypeBuilder("OutputFn", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgDefault("null").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print_with_function", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewTypeBuilder("Printable", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_unknown", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("category", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_str", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_null_fn", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@report_fault", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("$fault", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@wrap_bad", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("#action", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("vprintf", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("anys", symbols.NewBaseTypeBuilder("any", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("XDIGITS_H", symbols.NewTypeBuilder("char[16]", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddVariable(symbols.NewVariableBuilder("XDIGITS_L", symbols.NewTypeBuilder("char[16]", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).AddEnum(symbols.NewEnumBuilder("FloatFormatting", "", "std::io", "<stdlib-path>/io/formatter_private.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FLOAT", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EXPONENTIAL", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADAPTIVE", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HEX", "<stdlib-path>/io/formatter_private.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("FloatFormatting").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::io", "<stdlib-path>/io/formatter_private.c3").WithConstant(symbols.NewFaultConstantBuilder("BAD_FORMAT", "std::io", "../../../assets/c3c/lib/std/io/formatter_private.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("print_hex_chars", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("uppercase", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Formatter.first_err", symbols.NewBaseTypeBuilder("fault", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("fault", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjust", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_from_any", symbols.NewBaseTypeBuilder("uint128", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_neg", symbols.NewBaseTypeBuilder("bool*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_any", symbols.NewTypeBuilder("FloatType", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("simple_atoi", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Read a simple integer value, typically for formatting.").WithContract("@param", "[inout] len_ptr : \"the length remaining.\"").WithContract("@param", "[in] buf : \"the buf to read from.\"").WithContract("@param", "maxlen : \"the maximum len that can be read.\"").WithContract("@return", "\"The result of the atoi.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_substr", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pad", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("width", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmt_u", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_chars", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("etoa", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftoa", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gtoa", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoa", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floatformat", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatting", symbols.NewTypeBuilder("FloatFormatting", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_format", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("negative", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntoa_any", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_char", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_reverse", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithTypeIdentifier("Formatter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf_parse_format_field", symbols.NewBaseTypeBuilder("int", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").WithArgument(symbols.NewVariableBuilder("args_ptr", symbols.NewBaseTypeBuilder("any*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("args_index_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_ptr", symbols.NewBaseTypeBuilder("char*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("format_len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("index_ptr", symbols.NewBaseTypeBuilder("usz*", "std::io").Build(), "std::io", "<stdlib-path>/io/formatter_private.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("stderr_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdin_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddVariable(symbols.NewVariableBuilder("stdout_file", symbols.NewTypeBuilder("File", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).AddStruct(symbols.NewStructBuilder("BufferData", "std::io", "<stdlib-path>/io/io.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").WithStructMember("written", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Seek", "", "std::io", "<stdlib-path>/io/io.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SET", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END", "<stdlib-path>/io/io.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Seek").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::io", "<stdlib-path>/io/io.c3").WithConstant(symbols.NewFaultConstantBuilder("ALREADY_EXISTS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("BUSY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CANNOT_READ_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("DIR_NOT_EMPTY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("PARENT_DIR_MISSING", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_CANNOT_DELETE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_IS_PIPE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_DIR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_FOUND", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FILE_NOT_VALID", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ILLEGAL_ARGUMENT", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INCOMPLETE_WRITE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_POSITION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PUSHBACK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NAME_TOO_LONG", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_SEEKABLE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PERMISSION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("OUT_OF_SPACE", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("PATH_COULD_NOT_BE_FOUND", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_ONLY", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("SYMLINK_FAILED", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("TOO_MANY_DESCRIPTORS", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNEXPECTED_EOF", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_ERROR", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNSUPPORTED_OPERATION", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("WOULD_BLOCK", "std::io", "../../../assets/c3c/lib/std/io/io.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("readline", symbols.NewTypeBuilder("String", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("io::stdin()").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Read from a stream (default is stdin) to the next \"\\n\"\nor to the end of the stream, whatever comes first.\n\"\\r\" will be filtered from the String.").WithContract("@param", "stream : `The stream to read from.`").WithContract("@require", "@is_not_instream_if_ptr(stream) : \"The value for 'stream' should have been passed as a pointer and not as a value, please add '&'.\"").WithContract("@require", "@is_instream(stream) : `Make sure that the stream is actually an InStream.`").WithContract("@param", "[inout] allocator : `the allocator to use.`").WithContract("@return", "`The string containing the data read.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("treadline", symbols.NewTypeBuilder("String", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("io::stdin()").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Reads a string, see `readline`, except the it is allocated\non the temporary allocator and does not need to be freed.").WithContract("@param", "stream : `The stream to read from.`").WithContract("@require", "@is_not_instream_if_ptr(stream) : \"The value for 'stream' should have been passed as a pointer and not as a value, please add '&'.\"").WithContract("@require", "@is_instream(stream) : `The stream must implement InStream.`").WithContract("@return", "`The temporary string containing the data read.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readline_to_stream", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out_stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("in_stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("io::stdin()").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Reads a string, see `readline`, the data is passed to an outstream").WithContract("@param", "out_stream : `The stream to write to`").WithContract("@param", "in_stream : `The stream to read from.`").WithContract("@require", "@is_not_instream_if_ptr(in_stream) : \"The value for 'in_stream' should have been passed as a pointer and not as a value, please add '&'.\"").WithContract("@require", "@is_not_outstream_if_ptr(out_stream) : \"The value for 'out_stream' should have been passed as a pointer and not as a value, please add '&'.\"").WithContract("@require", "@is_instream(in_stream) : `The in_stream must implement InStream.`").WithContract("@require", "@is_outstream(out_stream) : `The out_stream must implement OutStream.`").WithContract("@return", "`The number of bytes written`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprint", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Print a value to a stream.").WithContract("@param", "out : `the stream to print to`").WithContract("@param", "x : `the value to print`").WithContract("@require", "@is_outstream(out) : `The output must implement OutStream.`").WithContract("@return", "`the number of bytes printed.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string.\nSee `printf` for details on formatting.").WithContract("@param", "[inout] out : `The OutStream to print to`").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintfn", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string,\nappending '\\n' at the end. See `printf`.").WithContract("@param", "[inout] out : `The OutStream to print to`").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintn", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("\"\"").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(out) : \"The output must implement OutStream\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("print", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Print any value to stdout.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printn", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("\"\"").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Print any value to stdout, appending an '\\n’ after.").WithContract("@param", "x : \"The value to print\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprint", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Print any value to stderr.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintn", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgDefault("\"\"").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Print any value to stderr, appending an '\\n’ after.").WithContract("@param", "x : \"The value to print\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putstream_fn", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_putchar_fn", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string.\nTo print integer numbers, use \"%d\" or \"%x\"/\"%X,\nthe latter gives the hexadecimal representation.\n\nAll types can be printed using \"%s\" which gives\nthe default representation of the value.\n\nTo create a custom output for a type, implement\nthe Printable interface.").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printfn", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string,\nappending '\\n' at the end. See `printf`.").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintf", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string\nto stderr.").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eprintfn", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string,\nto stderr appending '\\n' at the end. See `printf`.").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`the number of characters printed`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bprintf", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/io.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Prints using a 'printf'-style formatting string,\nto a string buffer. See `printf`.").WithContract("@param", "[inout] buffer : `The buffer to print to`").WithContract("@param", "[in] format : `The printf-style format string`").WithContract("@return", "`a slice formed from the \"buffer\" with the resulting length.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("out_buffer_fn", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Libc `putchar`, prints a single character to stdout.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithDocs(symbols.NewDocCommentBuilder("Get standard out.").WithContract("@return", "`stdout as a File`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithDocs(symbols.NewDocCommentBuilder("Get standard err.").WithContract("@return", "`stderr as a File`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithDocs(symbols.NewDocCommentBuilder("Get standard in.").WithContract("@return", "`stdin as a File`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("File*", "std::io").Build(), "std::io", "<stdlib-path>/io/io.c3").WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_chdir", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/chdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/chdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewBaseTypeBuilder("void*", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mode.len > 0").WithContract("@require", "filename.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewBaseTypeBuilder("void*", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mode.len > 0").WithContract("@require", "filename.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fputc", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_open_errno", symbols.NewBaseTypeBuilder("fault", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_seek_errno", symbols.NewBaseTypeBuilder("fault", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_libc.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddVariable(symbols.NewVariableBuilder("native_fclose_fn", symbols.NewTypeBuilder("FcloseFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fopen_fn", symbols.NewTypeBuilder("FopenFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fputc_fn", symbols.NewTypeBuilder("FputcFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fread_fn", symbols.NewTypeBuilder("FreadFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_freopen_fn", symbols.NewTypeBuilder("FreopenFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fseek_fn", symbols.NewTypeBuilder("FseekFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_ftell_fn", symbols.NewTypeBuilder("FtellFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_fwrite_fn", symbols.NewTypeBuilder("FwriteFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("native_remove_fn", symbols.NewTypeBuilder("RemoveFn", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).AddDef(symbols.NewDefBuilder("FcloseFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void?(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*?(String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FputcFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void?(int, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreadFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz?(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FreopenFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void*?(void*, String, String)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FseekFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void?(void*, isz, Seek)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FtellFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz?(void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("FwriteFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn usz?(void*, char[] buffer)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("RemoveFn", "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithResolvesTo("fn void?(String)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fopen", symbols.NewBaseTypeBuilder("void*", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mode.len > 0").WithContract("@require", "filename.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_remove", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Delete a file.").WithContract("@require", "filename.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_freopen", symbols.NewBaseTypeBuilder("void*", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mode.len > 0").WithContract("@require", "filename.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fseek", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("void*", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek_mode", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ftell", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fwrite", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fread", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io::os").IsUnsizedCollection().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_fputc", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/file_nolibc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_stat", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_size", symbols.NewBaseTypeBuilder("usz", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_file_or_dir_exists", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_file", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_is_dir", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/fileinfo.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeBuilder("String", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/getcwd.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/getcwd.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeBuilder("PathList", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_ls", symbols.NewTypeBuilder("PathList", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/ls.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_mkdir", symbols.NewBaseTypeBuilder("bool", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).WithArgument(symbols.NewVariableBuilder("permissions", symbols.NewTypeBuilder("MkdirPermissions", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/mkdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmdir", symbols.NewBaseTypeBuilder("bool", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmdir.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/rmdir.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "dir.str_view().len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_rmtree", symbols.NewBaseTypeBuilder("void", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::os", "<stdlib-path>/io/os/rmtree.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::os
	module = moduleCollection["std::io::os"]
	module.AddEnum(symbols.NewEnumBuilder("NativeSystemDir", "", "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithEnumerator(symbols.NewEnumeratorBuilder("DESKTOP", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOCUMENTS", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VIDEOS", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MUSIC", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOWNLOADS", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PICTURES", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TEMPLATES", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PUBLIC_SHARE", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SAVED_GAMES", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SCREENSHOTS", "<stdlib-path>/io/os/temp_directory.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NativeSystemDir").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("win32_get_known_folder_temp", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("rfid", symbols.NewTypeBuilder("Win32_REFKNOWNFOLDERID", "std::os::win32").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_home_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_user_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("NativeSystemDir", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_home_directory", symbols.NewTypeBuilder("Path", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_temp_directory", symbols.NewTypeBuilder("Path", "std::io::os").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_user_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("NativeSystemDir", "std::io::os").Build(), "std::io::os", "<stdlib-path>/io/os/temp_directory.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io::path
	module = moduleCollection["std::io::path"]
	module.AddVariable(symbols.NewVariableBuilder("DEFAULT_ENV", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_POSIX", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("PREFERRED_SEPARATOR_WIN32", symbols.NewTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_POSIX", symbols.NewTypeBuilder("bool[256]", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddVariable(symbols.NewVariableBuilder("RESERVED_PATH_CHAR_WIN32", symbols.NewTypeBuilder("bool[256]", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).AddStruct(symbols.NewStructBuilder("PathImp", "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("path_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Path", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesToType(symbols.NewTypeBuilder("PathImp", "std::io::path").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathList", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Path", "std::io::path").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PathWalker", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesTo("fn bool? (Path, bool is_dir, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TraverseCallback", "std::io::path", "<stdlib-path>/io/path.c3").WithResolvesTo("fn bool? (Path, bool is_dir, any data)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("MkdirPermissions", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NORMAL", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_ONLY", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_AND_ADMIN", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("MkdirPermissions").Build()).Build()).AddEnum(symbols.NewEnumBuilder("PathEnv", "", "std::io::path", "<stdlib-path>/io/path.c3").WithEnumerator(symbols.NewEnumeratorBuilder("WIN32", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("POSIX", "<stdlib-path>/io/path.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PathEnv").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::io::path", "<stdlib-path>/io/path.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_PATH", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_PARENT", "std::io::path", "../../../assets/c3c/lib/std/io/path.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("cwd", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_dir", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_file", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_size", symbols.NewBaseTypeBuilder("usz", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exists", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcwd", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewBaseTypeBuilder("void", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("", "").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_pathlike(path) : \"Expected a Path or String to chdir\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("home_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("desktop_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("videos_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("music_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("documents_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("screenshots_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("saved_games_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("downloads_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pictures_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("templates_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("public_share_directory", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("delete", symbols.NewBaseTypeBuilder("void", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_pathlike", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("#path", symbols.NewTypeBuilder("", "").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("DEFAULT_ENV").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_posix_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_win32_separator", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ls", symbols.NewTypeBuilder("PathList", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("dir", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("no_dirs", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("no_symlinks", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("\"\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("", "").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("recursive", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("permissions", symbols.NewTypeBuilder("MkdirPermissions", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("NORMAL").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create a directory on a given path, optionally recursive.").WithContract("@param", "path : `The path to create`").WithContract("@require", "@is_pathlike(path) : \"Expected a Path or String to chdir\"").WithContract("@param", "recursive : `If directories in between should be created if they're missing, defaults to false`").WithContract("@param", "permissions : `The permissions to set on the directory`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("", "").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Tries to delete directory, which must be empty.").WithContract("@param", "path : `The path to delete`").WithContract("@require", "@is_pathlike(path) : \"Expected a Path or String to chdir\"").WithContract("@return", "`true if there was a directory to delete, false otherwise`").WithContract("@return", "? INVALID_PATH : `if the path was invalid`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmtree", symbols.NewBaseTypeBuilder("void", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Like [rmdir] but deletes a directory even if it contains items.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("DEFAULT_ENV").Build()).WithDocs(symbols.NewDocCommentBuilder("Creates a new path.").WithContract("@return", "? INVALID_PATH : `if the path was invalid`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("DEFAULT_ENV").Build()).WithDocs(symbols.NewDocCommentBuilder("Creates a new path using the temp allocator.").WithContract("@return", "? INVALID_PATH : `if the path was invalid`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_wstring", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_win32_wstring", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("for_windows", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("for_posix", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("p2", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("append", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Append the string to the current path.").WithContract("@param", "[in] filename").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tappend", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("start_of_base_name", symbols.NewBaseTypeBuilder("usz", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_absolute_path", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_absolute", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_absolute_path", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("absolute", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.env == DEFAULT_ENV : \"This method is only available on native paths\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_basename", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("file_tbasename", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("basename", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("path_tdirname", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("path_dirname", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dirname", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_extension", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("extension", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Test if the path has the given extension, so given the path /foo/bar.c3\nthis would be true matching the extension \"c3\"").WithContract("@param", "[in] extension : `The extension name (not including the leading '.')`").WithContract("@require", "extension.len > 0 : `The extension cannot be empty`").WithContract("@return", "`true if the extension matches`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("extension", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_path", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tpath", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("String").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("volume_name_len", symbols.NewBaseTypeBuilder("usz", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parent", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get the path of the parent. This does not allocate, but returns a slice\nof the path itself.").WithContract("@return", "`The parent of the path as a non-allocated path`").WithContract("@return", "? NO_PARENT : `if this path does not have a parent`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path_str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("DEFAULT_ENV").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("as_zstr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("root_directory", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("walk", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("PathWalker", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Walk the path recursively. PathWalker is run on every file and\ndirectory found. Return true to abort the walk.").WithContract("@require", "self.env == DEFAULT_ENV : \"This method is only available on native paths\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("traverse", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("TraverseCallback", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("any", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Walk the path recursively. TraverseCallback is run for every file and\ndirectory found. Return true to abort the walk.").WithContract("@require", "path.env == DEFAULT_ENV : \"This method is only available on native paths\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("has_suffix", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.allocator != null : \"This Path should never be freed\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithTypeIdentifier("Path").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Path*", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_win32_path_char", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_reserved_path_char", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("path_env", symbols.NewTypeBuilder("PathEnv", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("DEFAULT_ENV").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mkdir", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithArgument(symbols.NewVariableBuilder("recursive", symbols.NewBaseTypeBuilder("bool", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("false").Build()).WithArgument(symbols.NewVariableBuilder("permissions", symbols.NewTypeBuilder("MkdirPermissions", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgDefault("NORMAL").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_rmdir", symbols.NewBaseTypeBuilder("bool", "std::io::path").IsOptional().Build(), "std::io::path", "<stdlib-path>/io/path.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("Path", "std::io::path").Build(), "std::io::path", "<stdlib-path>/io/path.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddVariable(symbols.NewVariableBuilder("MAX_VARS", symbols.NewTypeBuilder("char[*]", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).AddDef(symbols.NewDefBuilder("ReadByteFn", "std::io", "<stdlib-path>/io/stream.c3").WithResolvesTo("fn char?()").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_instream", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_not_instream_if_ptr", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_outstream", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_not_outstream_if_ptr", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("#expr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_any", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] ref").WithContract("@require", "@is_instream(stream) : \"Expected a stream\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_any", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("ref", symbols.NewBaseTypeBuilder("any", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&in] ref : \"the object to write.\"").WithContract("@require", "@is_outstream(stream)").WithContract("@ensure", "return == ref.type.sizeof").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_all", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_fully", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_all", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_using_read_byte", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(s)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte_using_write", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(s)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte_using_read", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(s)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_using_write_byte", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(s)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_using_seek", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_to", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgDefault("{}").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_through_buffer", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("in", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_varint", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x_ptr", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").WithContract("@require", "$kindof(x_ptr) == POINTER && $typeof(x_ptr).inner.kindof.is_int()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_varint", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").WithContract("@require", "$kindof(x).is_int()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_ushort", symbols.NewBaseTypeBuilder("ushort", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_ushort", symbols.NewBaseTypeBuilder("ushort", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_short", symbols.NewBaseTypeBuilder("short", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_short", symbols.NewBaseTypeBuilder("short", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_short", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ushort", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_le_short", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ushort", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_uint", symbols.NewBaseTypeBuilder("uint", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_uint", symbols.NewBaseTypeBuilder("uint", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_int", symbols.NewBaseTypeBuilder("int", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_int", symbols.NewBaseTypeBuilder("int", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_int", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_le_int", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_ulong", symbols.NewBaseTypeBuilder("ulong", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_ulong", symbols.NewBaseTypeBuilder("ulong", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_long", symbols.NewBaseTypeBuilder("long", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_long", symbols.NewBaseTypeBuilder("long", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_long", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ulong", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_le_long", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("ulong", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_uint128", symbols.NewBaseTypeBuilder("uint128", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_uint128", symbols.NewBaseTypeBuilder("uint128", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_be_int128", symbols.NewBaseTypeBuilder("int128", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_le_int128", symbols.NewBaseTypeBuilder("int128", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_be_int128", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_le_int128", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("uint128", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_tiny_bytearray", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").WithContract("@require", "data.len < 256 : \"Data exceeded 255\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_tiny_bytearray", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_short_bytearray", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_outstream(stream)").WithContract("@require", "data.len < 0x1000 : \"Data exceeded 65535\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_short_bytearray", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("skip", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_instream(stream)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wrap_bytes", symbols.NewTypeBuilder("ByteReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream.c3").WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Wrap bytes for reading using io functions.").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ReadBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("write_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("WriteBuffer", "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Buffer reads from a stream.").WithContract("@param", "[inout] self").WithContract("@require", "bytes.len > 0").WithContract("@require", "self.bytes.len == 0 : \"Init may not run on already initialized data\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refill", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("ReadBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ReadBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Buffer writes to a stream. Call `flush` when done writing to the buffer.").WithContract("@param", "[inout] self").WithContract("@require", "bytes.len > 0 : \"Non-empty buffer required\"").WithContract("@require", "self.bytes.len == 0 : \"Init may not run on already initialized data\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_pending", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").WithTypeIdentifier("WriteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("WriteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/buffer.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteBuffer", "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("write_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithStructMember("has_last", symbols.NewBaseTypeBuilder("bool", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithArgDefault("16").Build()).WithDocs(symbols.NewDocCommentBuilder("ByteBuffer provides a streamable read/write buffer.\nmax_read defines how many bytes might be kept before its internal buffer is shrunk.").WithContract("@require", "self.bytes.len == 0 : \"Buffer already initialized.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_read", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("initial_capacity", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithArgDefault("16").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "buf.len > 0").WithContract("@require", "self.bytes.len == 0 : \"Buffer already initialized.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Only the last byte of a successful read can be pushed back.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("grow", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithTypeIdentifier("ByteBuffer").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ByteBuffer.shrink", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteBuffer*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytebuffer.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteReader", "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pushback_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seek", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("isz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("seek", symbols.NewTypeBuilder("Seek", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_to", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("writer", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").WithTypeIdentifier("ByteReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytereader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("ByteWriter", "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@param", "[&inout] allocator").WithContract("@require", "self.bytes.len == 0 : \"Init may not run on already initialized data\"").WithContract("@ensure", "(bool)allocator, self.index == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@require", "self.bytes.len == 0 : \"Init may not run on already initialized data\"").WithContract("@ensure", "self.index == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_with_buffer", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("str_view", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ensure_capacity", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").WithTypeIdentifier("ByteWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ByteWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("reader", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/bytewriter.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@param", "reader").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("LimitReader", "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithStructMember("limit", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("limit", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] wrapped_stream : \"The stream to read from\"").WithContract("@param", "limit : \"The max limit to read\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("available", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").WithTypeIdentifier("LimitReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("LimitReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/limitreader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("MultiReader", "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("readers", symbols.NewTypeBuilder("InStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("index", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("readers", symbols.NewTypeBuilder("InStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@param", "[&inout] allocator").WithContract("@require", "self.readers.len == 0 : \"Init may not run on already initialized data\"").WithContract("@ensure", "self.index == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("readers", symbols.NewTypeBuilder("InStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@require", "self.readers.len == 0 : \"Init may not run on already initialized data\"").WithContract("@ensure", "self.index == 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").WithTypeIdentifier("MultiReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multireader.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("MultiWriter", "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithStructMember("writers", symbols.NewTypeBuilder("OutStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("writers", symbols.NewTypeBuilder("OutStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@param", "[&inout] allocator").WithContract("@require", "writers.len > 0").WithContract("@require", "self.writers.len == 0 : \"Init may not run on already initialized data\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tinit", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("writers", symbols.NewTypeBuilder("OutStream", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@require", "writers.len > 0").WithContract("@require", "self.writers.len == 0 : \"Init may not run on already initialized data\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").WithTypeIdentifier("MultiWriter").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("MultiWriter*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/multiwriter.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("Scanner", "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("wrapped_stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("buf", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("pattern_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithStructMember("read_idx", symbols.NewBaseTypeBuilder("usz", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Scanner provides a way to read delimited data (with newlines as the default).\nThe supplied buffer must be at least as large as the expected data length\nincluding its pattern.").WithContract("@param", "[&in] stream : \"The stream to read data from.\"").WithContract("@require", "buffer.len > 0 : \"Non-empty buffer required.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return and clear any remaining unscanned data.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scan", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgDefault("\"\\n\"").Build()).WithDocs(symbols.NewDocCommentBuilder("Scan the stream for the next split character and return data up to the match.").WithContract("@require", "pattern.len > 0 : \"Non-empty pattern required.\"").WithContract("@require", "self.buf.len > pattern.len : \"Pattern too large.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.find", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("pattern", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Scanner.refill", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("", "").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").WithTypeIdentifier("Scanner").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Scanner*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/scanner.c3").Build()).WithoutSourceCode().Build())

	// Define module std::io
	module = moduleCollection["std::io"]
	module.AddStruct(symbols.NewStructBuilder("TeeReader", "std::io", "<stdlib-path>/io/stream/teereader.c3").WithStructMember("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithStructMember("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tee_reader", symbols.NewTypeBuilder("TeeReader", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Returns a reader that implements InStream and that will write any data read\nfrom the wrapped reader r to the writer w. There is no internal buffering.").WithContract("@param", "[&inout] r : \"Stream r to read from.\"").WithContract("@param", "[&inout] w : \"Stream w to write to what it reads from r.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("TeeReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("InStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("w", symbols.NewTypeBuilder("OutStream", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&inout] self").WithContract("@param", "[&inout] r : \"Stream r to read from.\"").WithContract("@param", "[&inout] w : \"Stream w to write to what it reads from r.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::io").IsUnsizedCollection().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::io").IsOptional().Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").WithTypeIdentifier("TeeReader").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TeeReader*", "std::io").Build(), "std::io", "<stdlib-path>/io/stream/teereader.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("BSD_FLAVOR_SIG", symbols.NewTypeBuilder("bool", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("BUFSIZ", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCKS_PER_SEC", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_FAILURE", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXIT_SUCCESS", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILENAME_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOPEN_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("HAS_MALLOC_SIZE", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("RAND_MAX", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_CUR", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_END", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEEK_SET", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGABRT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGALRM", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGBUS", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCHLD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGCONT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGFPE", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGHUP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGILL", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGINT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGKILL", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGPIPE", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGQUIT", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSEGV", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSTOP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGSYS", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTERM", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTRAP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGTSTP", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIGURG", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDERR_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDIN_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("STDOUT_FD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFBLK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFCHR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFDIR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFIFO", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFLNK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFMT", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFREG", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IFSOCK", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IRUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISGID", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISUID", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_ISVTX", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IWUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S_IXUSR", symbols.NewTypeBuilder("", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TIME_UTC", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOFBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IOLBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("_IONBF", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stderrp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdinp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__stdoutp", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).AddStruct(symbols.NewStructBuilder("DivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("__pos", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("__state", symbols.NewTypeBuilder("Mbstate_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("LongDivResult", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("quot", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("rem", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Mbstate_t", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("__count", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("__value", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TimeSpec", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("s", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", symbols.NewBaseTypeBuilder("ulong", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("ns", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Tm", "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_sec", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_min", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_hour", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_mon", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_year", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_wday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_yday", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_isdst", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_gmtoff", symbols.NewTypeBuilder("TimeOffset", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_zone", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithStructMember("tm_nsec", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFile", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Clock_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CompareFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn int(void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fd", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fpos_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("JmpBuf", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "libc").IsUnsizedCollection().Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Off_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem::vm").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SeekIndex", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SignalFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void(CInt)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TerminateFunction", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("TimeOffset", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Time_t", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::types").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("WChar", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesToType(symbols.NewTypeBuilder("Char32", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("memcpy", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("mem::__memcpy").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("memmove", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("mem::__memcpy").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("memset", "libc", "<stdlib-path>/libc/libc.c3").WithResolvesTo("mem::__memset").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Errno", "libc", "<stdlib-path>/libc/libc.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("e", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abort", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asctime_r", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atexit", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("TerminateFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atof", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoi", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atoll", symbols.NewTypeBuilder("CLongLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bsearch", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("key", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("CompareFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clearerr", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clock", symbols.NewTypeBuilder("Clock_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("difftime", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time1", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("div", symbols.NewTypeBuilder("DivResult", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("numer", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exit", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ferror", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetpos", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("Fpos_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fileno", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fscanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fsetpos", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("Fpos_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ftell", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getchar", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getenv", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gets", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ioctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("request", symbols.NewBaseTypeBuilder("ulong", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("isatty", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("labs", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ldiv", symbols.NewTypeBuilder("LongDivResult", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("number", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("denom", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("result", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memchr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf1", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf2", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memcpy", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memmove", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("memset", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mktime", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perror", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("printf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("items", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("CompareFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nbyte", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readlink", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("pathname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bufsize", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("remove", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rename", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("old_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("new_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rewind", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setbuf", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setenv", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setvbuf", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("snprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sprintf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("srand", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sscanf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcat", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strchr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcoll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcspn", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strcpy", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strdup", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strerror", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("errn", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strftime", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxsize", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strlen", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncat", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strncpy", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dst", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stroul", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strpbrk", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strspn", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str1", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("str2", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strptime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("format", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("tm", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strrchr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strstr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("haystack", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("needle", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtod", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtof", symbols.NewBaseTypeBuilder("float", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtok", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("delim", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtol", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strtoul", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("endptr", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("strxfrm", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("src", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("system", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timegm", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmpnam", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tmpfile", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ungetc", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unsetenv", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmemopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getline", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("linep", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("linecapp", symbols.NewBaseTypeBuilder("usz*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timespec_get", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ts", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nanosleep", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("req", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("remaining", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ctime", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("time", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fcntl", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "libc").IsUnsizedCollection().Build(), "libc", "<stdlib-path>/libc/libc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_setjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_longjmp", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("aligned_alloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("align", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdin", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("longjmp", symbols.NewBaseTypeBuilder("void", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("malloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("calloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("realloc", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fseek", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewTypeBuilder("SeekIndex", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("whence", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("filename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fwrite", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fread", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("nmemb", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fclose", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fflush", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fputc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgets", symbols.NewBaseTypeBuilder("char*", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fgetc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("feof", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putc", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("putchar", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("puts", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("libc_S_ISTYPE", symbols.NewBaseTypeBuilder("bool", "libc").Build(), "libc", "<stdlib-path>/libc/libc.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).WithArgument(symbols.NewVariableBuilder("mask", symbols.NewTypeBuilder("", "").Build(), "libc", "<stdlib-path>/libc/libc.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module libc::errno
	module = moduleCollection["libc::errno"]
	module.AddVariable(symbols.NewVariableBuilder("E2BIG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EACCES", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAGAIN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAUTH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADARCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADEXEC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMACHO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADMSG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADRPC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBUSY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHILD", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEADLK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDEVERR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDOM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EEXIST", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFBIG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFTYPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIDRM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EILSEQ", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EIO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISDIR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMLINK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMULTIHOP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENEEDAUTH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENFILE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOATTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODATA", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENODEV", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOENT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOEXEC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOLINK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMEM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMSG", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSPC", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSTR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOSYS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTBLK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTDIR", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSUP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTTY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENXIO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOVERFLOW", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPERM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPIPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCUNAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGMISMATCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROGUNAVAIL", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTO", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPWROFF", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERANGE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EROFS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERPCMISMATCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHLIBVERS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESPIPE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESRCH", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIME", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETXTBSY", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXDEV", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build()).AddVariable(symbols.NewVariableBuilder("OK", symbols.NewTypeBuilder("Errno", "libc::errno").Build(), "libc::errno", "<stdlib-path>/libc/libc.c3").Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Return a \"timespec\" from a duration.").WithContract("@require", "self >= time::NANO_DURATION_ZERO").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Duration", "std::time").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a duration to a timespec.").WithContract("@require", "self >= time::DURATION_ZERO").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_timespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Time", "std::time").Build(), "libc", "<stdlib-path>/libc/libc_extra.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Convert a timestamp to a timespec.").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt64_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::io").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino64_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/android.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::mem").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/android.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/android.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/android.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_atimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_mtimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_ctimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_birthtimespec", symbols.NewTypeBuilder("TimeSpec", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_blocksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_flags", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_gen", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_lspare", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithStructMember("st_qspare", symbols.NewBaseTypeBuilder("long", "libc").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/darwin.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", symbols.NewBaseTypeBuilder("usz*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::os
	module = moduleCollection["libc::os"]
	module.AddVariable(symbols.NewVariableBuilder("_errno_c3", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__errno_location", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__errno", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__errno", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__error", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_errno", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int*", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_set_errno", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno_set", symbols.NewBaseTypeBuilder("void", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithArgument(symbols.NewVariableBuilder("err", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("errno", symbols.NewBaseTypeBuilder("int", "libc::os").Build(), "libc::os", "<stdlib-path>/libc/os/errno.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fflags_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/freebsd.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::io").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/freebsd.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::io").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino64_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/linux.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::string").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/linux.c3").WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddStruct(symbols.NewStructBuilder("Stat", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_dev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_ino", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_mode", symbols.NewTypeBuilder("Mode_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_nlink", symbols.NewTypeBuilder("Nlink_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_uid", symbols.NewTypeBuilder("Uid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_gid", symbols.NewTypeBuilder("Gid_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_rdev", symbols.NewTypeBuilder("Dev_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("__pad1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_size", symbols.NewTypeBuilder("Off_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_blksize", symbols.NewTypeBuilder("Blksize_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("__pad2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_blocks", symbols.NewTypeBuilder("Blkcnt_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_atime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_atime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_mtime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_mtime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_ctime", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("st_ctime_nsec", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithStructMember("__unused", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsCollectionWithSize(2).Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blkcnt_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Blksize_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dev_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Fflags_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ino_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Nlink_t", "libc", "<stdlib-path>/libc/os/openbsd.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::io").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stat", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat", symbols.NewTypeBuilder("Stat*", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", symbols.NewBaseTypeBuilder("usz*", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/openbsd.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("RTLD_GLOBAL", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LAZY", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_LOCAL", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_NODELETE", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("RTLD_NOW", symbols.NewTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_ONSTACK", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESETHAND", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_RESTART", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SA_SIGINFO", symbols.NewTypeBuilder("CUInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SHUT_RD", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SHUT_RDWR", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("SHUT_WR", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Sigaction", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_handler", symbols.NewTypeBuilder("SignalFunction", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_sigaction", symbols.NewTypeBuilder("SigActionFunction", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_mask", symbols.NewTypeBuilder("Sigset_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("sa_restorer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Stack_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_sp", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ss_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Gid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Pid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "libc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SigActionFunction", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesTo("fn void(CInt, void*, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Sigset_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "libc").IsCollectionWithSize(16).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Uid_t", "libc", "<stdlib-path>/libc/os/posix.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("shutdown", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("sockfd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("how", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("recv", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("length", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("send", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("length", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlopen", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dlsym", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaltstack", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("ss", symbols.NewTypeBuilder("Stack_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("old_ss", symbols.NewTypeBuilder("Stack_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sigaction", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("signum", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("Sigaction*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldaction", symbols.NewTypeBuilder("Sigaction*", "libc").Build(), "libc", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build())

	// Define module libc::termios
	module = moduleCollection["libc::termios"]
	module.AddVariable(symbols.NewVariableBuilder("B0", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B110", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B115200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1152000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B134", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B150", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B1800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B19200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B200", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B230400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B2500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B300", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B3000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B3500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B38400", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B4000000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B460800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B4800", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B50", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B500000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B57600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B576000", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B75", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B921600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("B9600", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("BRKINT", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCAL", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREAD", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS5", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS6", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS7", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CS8", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CSIZE", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("CSTOPB", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHO", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHOE", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHOK", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECHONL", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("HUPCL", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ICANON", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ICRNL", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IEXTEN", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNBRK", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNCR", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IGNPAR", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAXBEL", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("INLCR", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("INPCK", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ISIG", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ISTRIP", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IUCLC", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IUTF8", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXANY", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXOFF", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IXON", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_BAUD", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("NCCS", symbols.NewTypeBuilder("CInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOFLSH", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OCRNL", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OFDEL", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OFILL", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OLCUC", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONLCR", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONLRET", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("ONOCR", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPOST", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARENB", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARMRK", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("PARODD", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIOFF", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCIOFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCION", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOOFF", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCOON", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSADRAIN", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSAFLUSH", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TCSANOW", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOSTOP", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VDISCARD", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOF", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOL", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VEOL2", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VERASE", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VINTR", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VKILL", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VLNEXT", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VMIN", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VQUIT", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VREPRINT", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSTART", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSTOP", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSUSP", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VSWTC", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VT0", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VT1", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VTDLY", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VTIME", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("VWERASE", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Termios", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_iflag", symbols.NewTypeBuilder("Tc_iflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_oflag", symbols.NewTypeBuilder("Tc_oflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_cflag", symbols.NewTypeBuilder("Tc_cflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_lflag", symbols.NewTypeBuilder("Tc_lflags", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_line", symbols.NewTypeBuilder("Cc", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_cc", symbols.NewTypeBuilder("Cc", "libc::termios").IsUnsizedCollection().Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_ispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("c_ospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Tc_cflags", symbols.NewTypeBuilder("CUInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("csize", symbols.NewTypeBuilder("T_csize", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("cstopb", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("cread", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("parenb", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("parodd", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("hupcl", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("clocal", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("addrb", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Tc_iflags", symbols.NewTypeBuilder("CUInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ignbrk", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("brkint", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ignpar", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("parmrk", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("inpck", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("istrip", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("inlcr", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("igncr", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("icrnl", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("iuclc", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ixon", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ixany", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ixoff", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("imaxbel", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("iutf8", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Tc_lflags", symbols.NewTypeBuilder("CUInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("isig", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("icanon", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("xcase", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echo", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echoe", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echok", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echonl", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("noflsh", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("tostop", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echoctl", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echoprt", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("echoke", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("flusho", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("pendin", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("iexten", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("extproc", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("Tc_oflags", symbols.NewTypeBuilder("CUInt", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("opost", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("olcuc", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("onlcr", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ocrnl", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("onocr", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("onlret", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ofill", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ofdel", symbols.NewBaseTypeBuilder("bool", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("nldly", symbols.NewTypeBuilder("T_nldly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("crdly", symbols.NewTypeBuilder("T_crdly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("tabdly", symbols.NewTypeBuilder("T_tabdly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("bsdly", symbols.NewTypeBuilder("T_bsdly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("vtdly", symbols.NewTypeBuilder("T_vtdly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithStructMember("ffdly", symbols.NewTypeBuilder("T_ffdly", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Cc", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VINTR", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VQUIT", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VERASE", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VKILL", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VEOF", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VTIME", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VMIN", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VSWTC", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VSTART", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VSTOP", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VSUSP", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VEOL", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VREPRINT", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VDISCARD", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VWERASE", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VLNEXT", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VEOL2", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Cc").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Speed", "CUInt", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("B0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B50", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B75", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B110", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B134", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B150", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B200", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B300", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B600", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B1200", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B1800", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B2400", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B4800", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B9600", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B19200", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B38400", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B57600", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B115200", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B230400", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B460800", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B500000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B576000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B921600", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B1000000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B1152000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B1500000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B2000000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B2500000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B3000000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B3500000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("B4000000", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAX_BAUD", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Speed").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_bsdly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("BS0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_bsdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BS1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_bsdly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_crdly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("CR0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_crdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CR1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_crdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CR2", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_crdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CR3", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_crdly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_csize", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("CS5", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_csize").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CS6", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_csize").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CS7", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_csize").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CS8", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_csize").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_ffdly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("FF0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_ffdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FF1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_ffdly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_nldly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NL0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_nldly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NL1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_nldly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_tabdly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TAB0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_tabdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TAB1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_tabdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TAB2", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_tabdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TAB3", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_tabdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("XTABS", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_tabdly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("T_vtdly", "char", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VT0", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_vtdly").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("VT1", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("T_vtdly").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Tcactions", "CInt", "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TCOOFF", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCOON", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCIOFF", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCION", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCIFLUSH", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCOFLUSH", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCIOFLUSH", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCSANOW", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCSADRAIN", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TCSAFLUSH", "<stdlib-path>/libc/os/posix.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Tcactions").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("tcgetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsendbreak", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcdrain", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflow", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetospeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetispeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/os/posix.c3").Build()).WithoutSourceCode().Build())

	// Define module libc
	module = moduleCollection["libc"]
	module.AddVariable(symbols.NewVariableBuilder("SD_BOTH", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_RECEIVE", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_SEND", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).AddStruct(symbols.NewStructBuilder("SystemInfo", "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwOemId", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorArchitecture", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wReserved", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwPageSize", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMinimumApplicationAddress", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("lpMaximumApplicationAddress", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwActiveProcessorMask", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwNumberOfProcessors", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwProcessorType", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("dwAllocationGranularity", symbols.NewBaseTypeBuilder("uint", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorLevel", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithStructMember("wProcessorRevision", symbols.NewBaseTypeBuilder("ushort", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("close", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_close").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("difftime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_difftime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fdopen", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fdopen").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fileno", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fileno").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("fseek", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_fseeki64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ftell", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_ftelli64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("isatty", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_isatty").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("mktime", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mktime64").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("timegm", "libc", "<stdlib-path>/libc/os/win32.c3").WithResolvesTo("_mkgmtime64").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__acrt_iob_func", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_close", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_difftime64", symbols.NewBaseTypeBuilder("double", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("time1", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("time2", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fileno", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("stream", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fseeki64", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("long", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ftelli64", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_timezone", symbols.NewTypeBuilder("Errno", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timezone", symbols.NewTypeBuilder("CLong*", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_gmtime64_s", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_isatty", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_localtime64_s", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mkgmtime64", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_mktime64", symbols.NewTypeBuilder("Time_t", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timeptr", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_read", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_setjmp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("frameptr", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfreopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("CFile", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_write", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wremove", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("recv", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("send", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("shutdown", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("how", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_system_info", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("SystemInfo*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("localtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setjmp", symbols.NewTypeBuilder("CInt", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("JmpBuf*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gmtime_r", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("timer", symbols.NewTypeBuilder("Time_t*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewTypeBuilder("Tm*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_size", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("isz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("count", symbols.NewBaseTypeBuilder("usz", "libc").Build(), "libc", "<stdlib-path>/libc/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module libc::termios
	module = moduleCollection["libc::termios"]
	module.AddStruct(symbols.NewStructBuilder("Termios", "libc::termios", "<stdlib-path>/libc/termios.c3").WithStructMember("dummy", symbols.NewBaseTypeBuilder("void*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Cc", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "libc::termios").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Speed", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Tcflags", "libc::termios", "<stdlib-path>/libc/termios.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("send_break", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("drain", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flow", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_ispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_ospeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_ispeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_attr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_attr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sendBreak", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOSpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getISpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setOSpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setISpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("Tcactions", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcgetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsetattr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcsendbreak", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcdrain", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflush", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tcflow", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetospeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfgetispeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetospeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cfsetispeed", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios*", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sendBreak", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("drain", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flush", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_selector", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("flow", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("action", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOSpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getISpeed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setOSpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setISpeed", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("speed", symbols.NewTypeBuilder("Speed", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setAttr", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").WithTypeIdentifier("Termios").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Termios", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("Fd", "libc").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithArgument(symbols.NewVariableBuilder("optional_actions", symbols.NewBaseTypeBuilder("int", "libc::termios").Build(), "libc::termios", "<stdlib-path>/libc/termios.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddDef(symbols.NewDefBuilder("COMPLEXF_IDENTITY", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IDENTITY {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("COMPLEX_IDENTITY", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IDENTITY {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Complex", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesToType(symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Complexf", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesToType(symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("I", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IMAGINARY { double }").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("IMAGINARY", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IMAGINARY { double }").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("IMAGINARYF", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IMAGINARY { float }").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("I_F", "std::math", "<stdlib-path>/math/complex.c3").WithResolvesTo("complex::IMAGINARY { float }").WithoutSourceCode().Build())

	// Define module std::math::complex
	module = moduleCollection["std::math::complex"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::complex", "<stdlib-path>/math/complex.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGINARY", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).AddStruct(symbols.NewStructBuilder("ComplexNumber", "std::math::complex", "<stdlib-path>/math/complex.c3").WithStructMember("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithStructMember("c", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithStructMember("v", symbols.NewGenericTypeBuilder("Real", "std::math::complex").IsCollectionWithSize(2).Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.add", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.add_this", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber*", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.add_real", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.add_each", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.sub", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.sub_this", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber*", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.sub_real", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.sub_real_inverse", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.sub_each", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.scale", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.mul", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.div_real", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.div_real_inverse", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.div", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.inverse", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.conjugate", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.negate", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.equals", symbols.NewBaseTypeBuilder("bool", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.equals_real", symbols.NewBaseTypeBuilder("bool", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ComplexNumber.not_equals", symbols.NewBaseTypeBuilder("bool", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ComplexNumber", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::math::complex").IsOptional().Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").WithTypeIdentifier("ComplexNumber").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ComplexNumber*", "std::math::complex").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::math::complex", "<stdlib-path>/math/complex.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::easing
	module = moduleCollection["std::math::easing"]
	module.AddFunction(symbols.NewFunctionBuilder("linear_none", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("linear_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sine_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("circ_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cubic_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quad_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expo_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgDefault("1.70158f").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgDefault("1.70158f").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("back_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgDefault("1.70158f").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bounce_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_in", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_out", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elastic_inout", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("t", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sq", symbols.NewTypeBuilder("", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cube", symbols.NewTypeBuilder("", "std::math::easing").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::easing", "<stdlib-path>/math/easing.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddVariable(symbols.NewVariableBuilder("DIV_1_SQRT2", symbols.NewTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_2_SQRTPI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DIV_PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("DOUBLE_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("FLOAT_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DEC_DIGITS", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DENORM_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_EPSILON", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MANT_DIG", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MAX_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_10_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("HALF_MIN_EXP", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN10", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG10E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG2E", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_4", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).AddEnum(symbols.NewEnumBuilder("RoundingMode", "int", "std::math", "<stdlib-path>/math/math.c3").WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_ZERO", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TO_NEAREST", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TOWARD_NEG_INFINITY", "<stdlib-path>/math/math.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("RoundingMode").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::math", "<stdlib-path>/math/math.c3").WithConstant(symbols.NewFaultConstantBuilder("OVERFLOW", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("MATRIX_INVERSE_DOESNT_EXIST", "std::math", "../../../assets/c3c/lib/std/math/math.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("deg_to_rad", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof(x)) : `The input must be a numerical value or numerical vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("abs", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof(x)) : `The input must be a numerical value or numerical vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_approx", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("eps", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").WithContract("@require", "values::@is_int(y) || values::@is_float(y) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_approx_rel", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("eps", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").WithContract("@require", "values::@is_int(y) || values::@is_float(y) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sign", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$kindof(x).is_int() : `The input must be an integer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").WithContract("@require", "values::@is_int(y) || values::@is_float(y) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos_ref", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sinp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("cosp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").WithContract("@require", "$kindof(sinp) == POINTER : \"Expected sinp to be a pointer\"").WithContract("@require", "@typematch(sinp, cosp) : \"Expected sinp and cosp to have the same type\"").WithContract("@require", "$defined(*sinp = x) : \"Expected x and *sinp/*cosp to have the same type\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Return a vector with sin / cos of the given angle.").WithContract("@param", "x : `the angle in radians`").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("atanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acosh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asin", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("asinh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) || values::@is_float(x) : \"Expected an integer or floating point value\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ceil", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ceil", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$input", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Ceil for compile time evaluation.").WithContract("@require", "$kindof($input) == FLOAT : \"Only float and double may be used\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Constrain the value to lie within the given interval.").WithContract("@param", "x : \"the value to clamp, may be a number or a numerical vector.\"").WithContract("@param", "lower : \"the lower bounds\"").WithContract("@param", "upper : \"the upper bounds\"").WithContract("@return", "\"lower if x < lower, upper if x > upper, otherwise return x.\"").WithContract("@require", "types::is_numerical($typeof(x)) : `The input must be a numerical value or numerical vector`").WithContract("@require", "$defined(x = lower) : `The lower bound must be convertible to the value type.`").WithContract("@require", "$defined(x = upper) : `The upper bound must be convertible to the value type.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copysign", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(mag) : `The input must be a number value or float vector`").WithContract("@require", "$defined(($typeof(values::promote_int(mag)))mag) : `It's not possible to cast the sign to the type of the magnitude`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cos", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosech", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cosh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cotanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exp2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("floor", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fma", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(a) : `The input must be a number or float vector`").WithContract("@require", "values::@is_promotable_to_floatlike(b) : `The input must be a number or float vector`").WithContract("@require", "values::@is_promotable_to_floatlike(c) : `The input must be a number or float vector`").WithContract("@require", "values::@is_same_vector_type(a, b) : `The input types must be equal`").WithContract("@require", "values::@is_same_vector_type(a, c) : `The input types must match`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hypot", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").WithContract("@require", "values::@is_promotable_to_floatlike(y) : `The input must be a number or a float vector`").WithContract("@require", "values::@is_same_vector_type(x, y) : `The input types must match`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ln", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").WithContract("@require", "values::@is_promotable_to_floatlike(base) : `The base must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@intlog2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int($x) : `The input value must be an integer.`").WithContract("@require", "$x >= 0 : `The input value must be a positive integer.`").WithContract("@return", "`A floored base-2 log of an input integer value.`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log10", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("max", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof(x)) : `The input must be a floating point value or float vector`").WithContract("@require", "@typematch(x, y) : `The input types must be equal`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_numerical($typeof(x)) : `The input must be a numerical value or numerical vector`").WithContract("@require", "types::is_same($typeof(x), $typeof(y)) : `The input types must be equal`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("muladd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::@is_float(a) : `The input must be a floating point value`").WithContract("@require", "types::@has_same(a, b, c) : `The input types must be equal`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nearbyint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pow", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").WithContract("@require", "$defined($typeof(values::promote_int(x)) v = exp) || values::@is_int(exp) : `The input must be an integer, castable to the type of x`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("frexp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_float(x) : `The input must be integer or floating type`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signbit", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_float(x) : `The input must be integer or floating type`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rint", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("round_to_decimals", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("decimal_places", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("roundeven", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sech", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sinh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqr", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sqrt", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_finite", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_float(x) : `The input must be a float`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_nan", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_float(x) : `The input must be a float`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_inf", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_float(x) : `The input must be a float`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanh", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_promotable_to_floatlike(x) : `The input must be a number or a float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trunc", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_floatlike(x) : `The input must be a floating point value or float vector`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lerp", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("reflect", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("normalize", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("select", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mask", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("then_value", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("else_value", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Use a mask to select values from either \"then\" or \"else\" vectors.").WithContract("@param", "mask : \"The mask to use for the select, 'true' will pick the then_value, 'false' the else_value\"").WithContract("@param", "then_value : \"The vector to get elements from where the mask is 'true'\"").WithContract("@param", "else_value : \"The vector to get elements from where the mask is 'false'\"").WithContract("@require", "values::@is_vector(then_value) && values::@is_vector(else_value) : \"'Then' and 'else' must be vectors.\"").WithContract("@require", "@typematch(then_value, else_value) : \"'Then' and 'else' vectors must be of the same type.\"").WithContract("@require", "then_value.len == mask.len : \"Mask and selected vectors must be of the same width.\"").WithContract("@return", "\"a vector of the same type as then/else\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.ceil", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.clamp", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.copysign", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.floor", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.fma", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.muladd", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.nearbyint", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.pow", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.rint", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.round", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.roundeven", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.trunc", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].sum", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgDefault("0.0").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].product", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgDefault("1.0").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].max", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].min", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].ceil", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].clamp", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].copysign", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].fma", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].floor", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].nearbyint", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].pow", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].rint", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].round", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].roundeven", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].trunc", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].dot", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].length", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].distance", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].normalize", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].lerp", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].reflect", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].equals", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.ceil", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.clamp", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.copysign", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.floor", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.fma", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.muladd", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.nearbyint", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.pow", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.rint", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.round", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.roundeven", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.trunc", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].sum", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgDefault("0.0").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].product", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgDefault("1.0").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].max", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].min", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].ceil", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].clamp", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("lower", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("upper", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].copysign", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("mag", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("sgn", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].floor", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].fma", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].nearbyint", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].pow", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].rint", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].round", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].roundeven", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].trunc", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].dot", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].length", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].distance", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].normalize", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].reflect", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].lerp", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].equals", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].sum", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].product", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].and", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].or", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].xor", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].max", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].min", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].dot", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].sum", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].product", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].and", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].or", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].xor", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].max", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].min", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].dot", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].sum", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].product", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].and", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].or", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].xor", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].max", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].min", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].dot", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].sum", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].product", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].and", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].or", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].xor", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].max", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].min", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].dot", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].sum", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].product", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].and", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].or", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].xor", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].max", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].min", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128[<*>].dot", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].sum", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].product", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].and", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].or", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].xor", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].max", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bool[<*>].min", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].sum", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].product", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].and", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].or", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].xor", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].max", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].min", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].dot", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].sum", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].product", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].and", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].or", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].xor", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].max", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].min", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].dot", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].sum", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].product", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].and", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].or", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].xor", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].max", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].min", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].dot", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].sum", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].product", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].and", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].or", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].xor", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].max", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].min", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].dot", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_lt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_le", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_eq", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_gt", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ge", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].comp_ne", symbols.NewBaseTypeBuilder("bool", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].sum", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].product", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].and", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].or", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].xor", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].max", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].min", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128[<*>].dot", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_add", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_sub", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_mul", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.sat_shl", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_add", symbols.NewBaseTypeBuilder("char", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_sub", symbols.NewBaseTypeBuilder("char", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.overflow_mul", symbols.NewBaseTypeBuilder("char", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_add", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_sub", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_mul", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.sat_shl", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_add", symbols.NewBaseTypeBuilder("ichar", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_sub", symbols.NewBaseTypeBuilder("ichar", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.overflow_mul", symbols.NewBaseTypeBuilder("ichar", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_add", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_sub", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_mul", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.sat_shl", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_add", symbols.NewBaseTypeBuilder("ushort", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_sub", symbols.NewBaseTypeBuilder("ushort", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.overflow_mul", symbols.NewBaseTypeBuilder("ushort", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_add", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_sub", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_mul", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.sat_shl", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_add", symbols.NewBaseTypeBuilder("short", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_sub", symbols.NewBaseTypeBuilder("short", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.overflow_mul", symbols.NewBaseTypeBuilder("short", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_add", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_sub", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_mul", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.sat_shl", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_add", symbols.NewBaseTypeBuilder("uint", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_sub", symbols.NewBaseTypeBuilder("uint", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.overflow_mul", symbols.NewBaseTypeBuilder("uint", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_add", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_sub", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_mul", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.sat_shl", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_add", symbols.NewBaseTypeBuilder("int", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_sub", symbols.NewBaseTypeBuilder("int", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.overflow_mul", symbols.NewBaseTypeBuilder("int", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_add", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_sub", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_mul", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.sat_shl", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_add", symbols.NewBaseTypeBuilder("ulong", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_sub", symbols.NewBaseTypeBuilder("ulong", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.overflow_mul", symbols.NewBaseTypeBuilder("ulong", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_add", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_sub", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_mul", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.sat_shl", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_add", symbols.NewBaseTypeBuilder("long", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_sub", symbols.NewBaseTypeBuilder("long", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.overflow_mul", symbols.NewBaseTypeBuilder("long", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_add", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_sub", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_mul", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.sat_shl", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_add", symbols.NewBaseTypeBuilder("uint128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_sub", symbols.NewBaseTypeBuilder("uint128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.overflow_mul", symbols.NewBaseTypeBuilder("uint128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_add", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_sub", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_mul", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.sat_shl", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_add", symbols.NewBaseTypeBuilder("int128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_sub", symbols.NewBaseTypeBuilder("int128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.overflow_mul", symbols.NewBaseTypeBuilder("int128", "std::math").IsOptional().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) : `The input must be an integer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "values::@is_int(x) : `The input must be an integer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint128.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("uint128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_even", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int128.is_odd", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("int128", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_power_of_2", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_underlying_int($typeof(x)) : `is_power_of_2 may only be used on integer types`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_power_of_2", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals_vec", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.high_word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.low_word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.word", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.set_high_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double.set_low_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float.set_word", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("f", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("u", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scalbn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincos", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_sincosf", symbols.NewBaseTypeBuilder("void", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tan", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_tanf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acos", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asin", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanh", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acoshf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinhf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanhf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexp", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_frexpf", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("e", symbols.NewBaseTypeBuilder("int*", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_add_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_sub_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_mul_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_add", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] out : \"Where the result of the addition is stored\"").WithContract("@return", "\"Whether the addition resulted in an integer overflow\"").WithContract("@require", "@typematch(a, b) : \"a and b must be the same type\"").WithContract("@require", "values::@is_flat_intlike(a) &&& values::@is_flat_intlike(b) : \"a and b must both be integer or integer vector based\"").WithContract("@require", "$defined(*out) &&& @typematch(*out, a) : \"out must be a pointer of the same type as a and b\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_sub", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] out : \"Where the result of the subtraction is stored\"").WithContract("@return", "\"Whether the subtraction resulted in an integer overflow\"").WithContract("@require", "@typematch(a, b) : \"a and b must be the same type\"").WithContract("@require", "values::@is_flat_intlike(a) &&& values::@is_flat_intlike(b) : \"a and b must both be integer or integer vector based\"").WithContract("@require", "$defined(*out) &&& @typematch(*out, a) : \"out must be a pointer of the same type as a and b\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("overflow_mul", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("out", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[&out] out : \"Where the result of the multiplication is stored\"").WithContract("@return", "\"Whether the multiplication resulted in an integer overflow\"").WithContract("@require", "@typematch(a, b) : \"a and b must be the same type\"").WithContract("@require", "values::@is_flat_intlike(a) &&& values::@is_flat_intlike(b) : \"a and b must both be integer or integer vector based\"").WithContract("@require", "$defined(*out) &&& @typematch(*out, a) : \"out must be a pointer of the same type as a and b\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("iota", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_vector($Type) || ($Type.kindof == ARRAY &&& types::is_numerical($typefrom($Type.inner)))").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul_div_helper", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char.muldiv", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("char", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar.muldiv", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ichar", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short.muldiv", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("short", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort.muldiv", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ushort", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int.muldiv", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("int", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint.muldiv", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("uint", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long.muldiv", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("long", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong.muldiv", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewBaseTypeBuilder("ulong", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_same_vector_or_scalar", symbols.NewBaseTypeBuilder("bool", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("#vector_value", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("#vector_or_scalar", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("char[<*>].muldiv", symbols.NewBaseTypeBuilder("char", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("char[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ichar[<*>].muldiv", symbols.NewBaseTypeBuilder("ichar", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ichar[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("short[<*>].muldiv", symbols.NewBaseTypeBuilder("short", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("short[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ushort[<*>].muldiv", symbols.NewBaseTypeBuilder("ushort", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ushort[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int[<*>].muldiv", symbols.NewBaseTypeBuilder("int", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("int[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("uint[<*>].muldiv", symbols.NewBaseTypeBuilder("uint", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("uint[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("long[<*>].muldiv", symbols.NewBaseTypeBuilder("long", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("long[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ulong[<*>].muldiv", symbols.NewBaseTypeBuilder("ulong", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ulong[<*>]", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("mul", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("div", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@is_same_vector_or_scalar(self, mul) : `mul must be a vector of the same type as self, or be an integer scalar`").WithContract("@require", "@is_same_vector_or_scalar(self, div) : `div must be a vector of the same type as self, or be an integer scalar`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_gcd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math", "<stdlib-path>/math/math.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "types::is_int($typeof(a)) : `The input must be an integer`").WithContract("@require", "types::is_int($typeof(b)) : `The input must be an integer`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lcm", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("any*", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Calculate the least common multiple for the provided arguments.").WithContract("@require", "$vacount >= 2 : \"At least two arguments are required.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("gcd", symbols.NewTypeBuilder("", "std::math").Build(), "std::math", "<stdlib-path>/math/math.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("any*", "std::math").IsUnsizedCollection().Build(), "std::math", "<stdlib-path>/math/math.c3").IsVarArg().Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Calculate the greatest common divisor for the provided arguments.").WithContract("@require", "$vacount >= 2 : \"At least two arguments are required.\"").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__cos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("C0", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddVariable(symbols.NewVariableBuilder("C3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__cosdf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__cosdf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddStruct(symbols.NewStructBuilder("DoubleInternal", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("FloatInternal", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithStructMember("i", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmod", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fmodf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__fmod.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithArgument(symbols.NewVariableBuilder("iy", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__sindf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__sindf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TAN_T", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("TANDF", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__tandf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithArgument(symbols.NewVariableBuilder("odd", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/__tandf.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("PIO2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_HI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_r", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_r_f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_acosf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/acos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("PIO2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS0_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PS5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddVariable(symbols.NewVariableBuilder("QS4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_r", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_r_f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("z", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_asinf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/asin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("AT", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHI", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANHIF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLO", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATANLOF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("ATF", symbols.NewTypeBuilder("float[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddVariable(symbols.NewVariableBuilder("PI_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_atan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atan2f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_atanh", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_atanhf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/atanh.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_ceil", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_ceilf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ceil.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_cosf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_cos", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/cos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("EXPF_INV_LN2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_LN2_HI", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_LN2_LO", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P1", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P3", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXPF_P4", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_INV_LN2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_LN2_HI", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_LN2_LO", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P4", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_P5", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).AddFunction(symbols.NewFunctionBuilder("exp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("expf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_top12f", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2f", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2_specialcase", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("tmp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("sbits", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithArgument(symbols.NewVariableBuilder("ki", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_top12d", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_exp2", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/exp2.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_fabs", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fabsf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/fabs.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_floor", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_floorf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/floor.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("frexp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("frexpf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/frexp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("ldexp", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ldexpf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithArgument(symbols.NewVariableBuilder("exp", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/ldexp.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("LOGF_L1", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L2", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L3", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_L4", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_LN2_HI", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOGF_LN2_LO", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L1", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L3", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L4", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L5", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_L6", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_LN2_HI", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("LOG_LN2_LO", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddVariable(symbols.NewVariableBuilder("SQRT2F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).AddFunction(symbols.NewFunctionBuilder("log", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("logf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("LG1", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG1_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG2", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG2_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG3", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG3_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG4", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG4_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG5", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG6", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LG7", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_HI", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_HI_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_LO", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddVariable(symbols.NewVariableBuilder("LN2_LO_F", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).AddFunction(symbols.NewFunctionBuilder("_log1p", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_log1pf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/log1p.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("EXP2F_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2F_TABLE_BITS", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP2_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_DATA_WIDTH", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_POLY_ORDER", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("EXP_TABLE_BITS", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S1PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S2PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S3PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("S4PI2", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINT15", symbols.NewTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINTF", symbols.NewTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("WANT_ROUNDING", symbols.NewTypeBuilder("bool", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2F_DATA", symbols.NewTypeBuilder("Exp2fData", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddVariable(symbols.NewVariableBuilder("__EXP2_DATA", symbols.NewTypeBuilder("Exp2Data", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).AddStruct(symbols.NewStructBuilder("Exp2Data", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2N", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2hiN", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("negln2loN", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").IsCollectionWithSize(4).Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("exp2_poly", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Exp2fData", "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("tab", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift_scaled", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("shift", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("invln2_scaled", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithStructMember("poly_scaled", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").IsUnsizedCollection().Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflowf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_uflow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflowf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("uint", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_oflow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewBaseTypeBuilder("ulong", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__math_xflow", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("sign", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("force_eval_add", symbols.NewTypeBuilder("", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/math_nolibc.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("pow", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("powf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/pow.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddVariable(symbols.NewVariableBuilder("INIT_JK", symbols.NewTypeBuilder("int[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPIO2", symbols.NewTypeBuilder("int[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIO2", symbols.NewTypeBuilder("double[*]", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2f", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2_large", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("e0", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("nx", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("prec", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__rem_pio2", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithArgument(symbols.NewVariableBuilder("y", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/rempi.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("caller must handle the case when reduction is not needed: |x| ~<= pi/4").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_round", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_roundf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/round.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_scalbn", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("int", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/scalbn.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_sinf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sin", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincosf", symbols.NewBaseTypeBuilder("void", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", symbols.NewBaseTypeBuilder("float*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", symbols.NewBaseTypeBuilder("float*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sincos", symbols.NewBaseTypeBuilder("void", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("sin", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithArgument(symbols.NewVariableBuilder("cos", symbols.NewBaseTypeBuilder("double*", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/sincos.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("tan", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tanf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/tan.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("sincos_broken", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trig.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("_trunc", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_truncf", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/math/math_nolibc/trunc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddDef(symbols.NewDefBuilder("MATRIX2F_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY2 {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX2_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY2 {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3F_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY3 {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX3_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY3 {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4F_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY4 {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("MATRIX4_IDENTITY", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::IDENTITY4 {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix2f", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix3f", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Matrix4f", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesToType(symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_ortho", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::ortho {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4_perspective", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::perspective {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_ortho", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::ortho {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("matrix4f_perspective", "std::math", "<stdlib-path>/math/matrix.c3").WithResolvesTo("matrix::perspective {float}").WithoutSourceCode().Build())

	// Define module std::math::matrix
	module = moduleCollection["std::math::matrix"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::matrix", "<stdlib-path>/math/matrix.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY3", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).AddVariable(symbols.NewVariableBuilder("IDENTITY4", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).AddStruct(symbols.NewStructBuilder("Matrix2x2", "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix3x3", "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m02", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m12", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m20", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m21", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m22", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(9).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Matrix4x4", "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m00", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m01", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m02", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m03", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m10", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m11", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m12", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m13", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m20", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m21", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m22", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m23", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m30", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m31", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m32", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m33", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithStructMember("m", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(16).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("apply", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("vec", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(4).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("component_mul", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("negate", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("negate", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("negate", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("neq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("neq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("neq", symbols.NewBaseTypeBuilder("bool", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("look_at", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("eye", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transpose", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("determinant", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("adjoint", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix2x2", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inverse", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").IsOptional().Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translate", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_z", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_y", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_x", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeBuilder("Matrix3x3", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(2).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix2x2").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix2x2*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix3x3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix3x3*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("trace", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("scale", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithTypeIdentifier("Matrix4x4").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Matrix4x4*", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").IsCollectionWithSize(3).Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("left", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("right", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("top", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("bottom", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perspective", symbols.NewTypeBuilder("Matrix4x4", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("fov", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("aspect_ratio", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("near", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("far", symbols.NewGenericTypeBuilder("Real", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_component_mul", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_add", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_sub", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat2", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("matrix_look_at", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::math::matrix").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("eye", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).WithArgument(symbols.NewVariableBuilder("up", symbols.NewTypeBuilder("", "").Build(), "std::math::matrix", "<stdlib-path>/math/matrix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math
	module = moduleCollection["std::math"]
	module.AddDef(symbols.NewDefBuilder("QUATERNIONF_IDENTITY", "std::math", "<stdlib-path>/math/quaternion.c3").WithResolvesTo("quaternion::IDENTITY {float}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("QUATERNION_IDENTITY", "std::math", "<stdlib-path>/math/quaternion.c3").WithResolvesTo("quaternion::IDENTITY {double}").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternion", "std::math", "<stdlib-path>/math/quaternion.c3").WithResolvesToType(symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").WithGenericArguments(symbols.NewBaseTypeBuilder("double", "std::math").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Quaternionf", "std::math", "<stdlib-path>/math/quaternion.c3").WithResolvesToType(symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").WithGenericArguments(symbols.NewBaseTypeBuilder("float", "std::math").Build()).Build()).WithoutSourceCode().Build())

	// Define module std::math::quaternion
	module = moduleCollection["std::math::quaternion"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Real": symbols.NewGenericParameter("Real", "std::math::quaternion", "<stdlib-path>/math/quaternion.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddVariable(symbols.NewVariableBuilder("IDENTITY", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).AddStruct(symbols.NewStructBuilder("QuaternionNumber", "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember("i", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember("j", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember("k", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember(",", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember("l", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithStructMember("v", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").IsCollectionWithSize(4).Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.add", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.add_each", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.sub", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.negate", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.sub_each", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.scale", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.normalize", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.length", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.lerp", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.to_matrixf", symbols.NewTypeBuilder("Matrix4f", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("QuaternionNumber.to_matrix", symbols.NewTypeBuilder("Matrix4", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nlerp", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithTypeIdentifier("QuaternionNumber").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("invert", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithTypeIdentifier("QuaternionNumber").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("slerp", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithTypeIdentifier("QuaternionNumber").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("q2", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("amount", symbols.NewGenericTypeBuilder("Real", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mul", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithTypeIdentifier("QuaternionNumber").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("QuaternionNumber", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("into_matrix", symbols.NewTypeBuilder("", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("QuaternionNumber*", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::math::quaternion").Build(), "std::math::quaternion", "<stdlib-path>/math/quaternion.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("default_random", symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).AddVariable(symbols.NewVariableBuilder("default_random_initialized", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).AddDef(symbols.NewDefBuilder("DefaultRandom", "std::math::random", "<stdlib-path>/math/random.c3").WithResolvesToType(symbols.NewTypeBuilder("Sfc64Random", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "is_random(random)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seed_entropy", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Seed the random with some best effort entropy.").WithContract("@require", "is_random(random)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("range", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get the next value between 0 and range (not including range).").WithContract("@require", "is_random(random)").WithContract("@require", "range > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_in_range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get a random in the range [min, max], both included.").WithContract("@require", "is_random(random)").WithContract("@require", "max >= min").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("srand", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Seed the default random function.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get a default random value between 0 and range (not including range)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rand_in_range", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("int", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get a random in the range, both included.").WithContract("@require", "max >= min").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rnd", symbols.NewBaseTypeBuilder("double", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bool", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get 'true' or 'false'").WithContract("@require", "is_random(random)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_float", symbols.NewBaseTypeBuilder("float", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get a float between 0 and 1.0, not including 1.0.").WithContract("@require", "is_random(random)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_double", symbols.NewBaseTypeBuilder("double", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Get a double between 0 and 1.0, not including 1.0.").WithContract("@require", "is_random(random)").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_random", symbols.NewBaseTypeBuilder("bool", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@long_to_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("#function", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@int_to_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("#function", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@short_to_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("#function", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@char_to_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("#function", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@random_value_to_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").WithArgument(symbols.NewVariableBuilder("#function", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init_default_random", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random.c3").IsMacro().WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg128Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg16Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg32Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Lcg64Random", "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").WithTypeIdentifier("Lcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Lcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.lcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_MCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg128Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg16Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg32Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mcg64Random", "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").WithTypeIdentifier("Mcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Mcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.mcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).AddStruct(symbols.NewStructBuilder("Msws128Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws16Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws32Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws64Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Msws8Random", "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state0", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("state1", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl0", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember(",", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithStructMember("weyl1", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").WithTypeIdentifier("Msws8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Msws8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.msws.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg128Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg16Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg32Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pcg64Random", "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").WithTypeIdentifier("Pcg16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Pcg16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.pcg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("MUL_LCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("MUL_MCG64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).AddFunction(symbols.NewFunctionBuilder("make_seed", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("seeder", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithArgument(symbols.NewVariableBuilder("out_buffer", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] input").WithContract("@param", "[inout] out_buffer").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hash", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("", "").Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("entropy", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("entropy", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.seeder.c3").WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("ODD_PHI128", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI16", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI32", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI64", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddVariable(symbols.NewVariableBuilder("ODD_PHI8", symbols.NewTypeBuilder("", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc128Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint128", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc16Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ushort", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc32Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc64Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Sfc8Random", "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "std::math::random").IsCollectionWithSize(4).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc128Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc128Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc64Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc64Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("sfc", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc32Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc32Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("seed", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc16Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc16Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("input", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").WithTypeIdentifier("Sfc8Random").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Sfc8Random*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.sfc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::random
	module = moduleCollection["std::math::random"]
	module.AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_ADDEND", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MASK", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIMPLE_RANDOM_MULTIPLIER", symbols.NewTypeBuilder("long", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("SimpleRandom", "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_seed", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("seed", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int", symbols.NewBaseTypeBuilder("uint", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_bytes", symbols.NewBaseTypeBuilder("void", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::math::random").IsUnsizedCollection().Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "bytes.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_int128", symbols.NewBaseTypeBuilder("uint128", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_long", symbols.NewBaseTypeBuilder("ulong", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_short", symbols.NewBaseTypeBuilder("ushort", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("next_byte", symbols.NewBaseTypeBuilder("char", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").WithTypeIdentifier("SimpleRandom").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SimpleRandom*", "std::math::random").Build(), "std::math::random", "<stdlib-path>/math/random/math.simple_random.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::math_rt
	module = moduleCollection["std::math::math_rt"]
	module.AddStruct(symbols.NewStructBuilder("Int128bits", "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithStructMember("low", symbols.NewBaseTypeBuilder("ulong", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithStructMember("high", symbols.NewBaseTypeBuilder("ulong", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithStructMember("all", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__divti3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@__udivmodti4", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("$return_rem", symbols.NewBaseTypeBuilder("bool", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__umodti3", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__udivti3", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__modti3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__lshrti3", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashrti3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__ashlti3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("uint", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__mulddi3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("ulong", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("ulong", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__multi3", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattisf", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floattidf", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntisf", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__floatuntidf", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunsdfti", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixunssfti", symbols.NewBaseTypeBuilder("uint128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixdfti", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__fixsfti", symbols.NewBaseTypeBuilder("int128", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_i128", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float_from_u128", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixuint", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fixint", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/i128.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::math::math_rt
	module = moduleCollection["std::math::math_rt"]
	module.AddVariable(symbols.NewVariableBuilder("TOINT", symbols.NewTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).AddVariable(symbols.NewVariableBuilder("TOINTF", symbols.NewTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).AddFunction(symbols.NewFunctionBuilder("force_eval_add", symbols.NewTypeBuilder("", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__roundeven", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__roundevenf", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").WithArgument(symbols.NewVariableBuilder("x", symbols.NewBaseTypeBuilder("float", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("__powidf2", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("int", "std::math::math_rt").Build(), "std::math::math_rt", "<stdlib-path>/math/runtime/math_supplemental.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::uuid
	module = moduleCollection["std::math::uuid"]
	module.AddDistinct(symbols.NewDistinctBuilder("Uuid", "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("char", "std::math::uuid").IsCollectionWithSize(16).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("generate", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithDocs(symbols.NewDocCommentBuilder("Generate a version 4 UUID from the default random.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("generate_from_random", symbols.NewTypeBuilder("Uuid", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithArgument(symbols.NewVariableBuilder("random", symbols.NewTypeBuilder("Random", "std::math::random").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Generate a version 4 UUID from the given random.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::math::uuid").IsOptional().Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithTypeIdentifier("Uuid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Uuid*", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").WithTypeIdentifier("Uuid").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Uuid*", "std::math::uuid").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::math::uuid", "<stdlib-path>/math/uuid.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::vector
	module = moduleCollection["std::math::vector"]
	module.AddFunction(symbols.NewFunctionBuilder("double[<*>].sq_magnitude", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].sq_magnitude", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].distance_sq", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].distance_sq", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<2>].transform", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4f", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<2>].rotate", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<2>].angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<2>].transform", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<2>].rotate", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<2>].angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<2>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(2).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].clamp_mag", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].clamp_mag", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("float[<*>].towards", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("double[<*>].towards", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<*>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsUnsizedCollection().Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternionf", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_quat", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("Quaternion", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("float", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewBaseTypeBuilder("double", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewBaseTypeBuilder("float", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("float[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("float[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", symbols.NewTypeBuilder("Matrix4f", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject", symbols.NewBaseTypeBuilder("double", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithTypeIdentifier("double[<3>]").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("double[<3>]", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("projection", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("view", symbols.NewTypeBuilder("Matrix4", "std::math").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewBaseTypeBuilder("float*", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("float*", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalized", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewBaseTypeBuilder("double*", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewBaseTypeBuilder("double*", "std::math::vector").IsCollectionWithSize(3).Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("towards", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("target", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max_distance", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clamp_magnitude", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("max", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("perpendicular3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("cross3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform2", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("transform3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("mat", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("angle3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ortho_normalize3", symbols.NewBaseTypeBuilder("void", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("v2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_by_quat3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("q", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rotate_axis_angle", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("axis", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("angle", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unproject3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m1", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("m2", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("barycenter3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("p", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("refract3", symbols.NewTypeBuilder("", "std::math::vector").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("n", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).WithArgument(symbols.NewVariableBuilder("r", symbols.NewTypeBuilder("", "").Build(), "std::math::vector", "<stdlib-path>/math/vector.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddStruct(symbols.NewStructBuilder("InetAddress", "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("is_ipv6", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("e", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("f", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("g", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("h", symbols.NewBaseTypeBuilder("ushort", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6", symbols.NewBaseTypeBuilder("char", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint128", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip6", symbols.NewBaseTypeBuilder("char", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv6arr", symbols.NewTypeBuilder("UShortBE", "std::core::bitorder").IsCollectionWithSize(8).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("a", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("b", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("c", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("d", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ipv4", symbols.NewBaseTypeBuilder("char", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("val", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithStructMember("ip4", symbols.NewBaseTypeBuilder("char", "std::net").IsCollectionWithSize(16).Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("IpProtocol", "char", "std::net", "<stdlib-path>/net/inetaddr.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNSPECIFIED", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV4", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IPV6", "<stdlib-path>/net/inetaddr.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()}).WithEnumName("IpProtocol").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_tstring", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv6_from_str", symbols.NewTypeBuilder("InetAddress", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ipv4_from_str", symbols.NewTypeBuilder("InetAddress", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_loopback", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_any_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_link_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_site_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_global", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_node_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_site_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_org_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_multicast_link_local", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithTypeIdentifier("InetAddress").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewTypeBuilder("InetAddress*", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").IsOptional().Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai_socktype", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net", "<stdlib-path>/net/inetaddr.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFault(symbols.NewFaultBuilder("", "", "std::net", "<stdlib-path>/net/net.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_URL", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("URL_TOO_LONG", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("GENERAL_ERROR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_IP_STRING", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRINFO_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("LISTEN_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ACCEPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("WRITE_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKOPT_FAILED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("SOCKETS_NOT_INITIALIZED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("STILL_PROCESSING_CALLBACK", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("BAD_SOCKET_DESCRIPTOR", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NOT_A_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_REFUSED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_TIMED_OUT", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ADDRESS_IN_USE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_ALREADY_IN_PROGRESS", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("ALREADY_CONNECTED", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NETWORK_UNREACHABLE", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("OPERATION_NOT_SUPPORTED_ON_SOCKET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CONNECTION_RESET", "std::net", "../../../assets/c3c/lib/std/net/net.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ipv4toint", symbols.NewBaseTypeBuilder("uint", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("int_to_ipv4", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::net", "<stdlib-path>/net/net.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("uint", "std::net").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net", "<stdlib-path>/net/net.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("MSG_PEEK", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AAL5", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AX25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BRIDGE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETROM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_X25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLFREE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLMSG", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLREMOVE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_BUSY_LOOP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_CBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_EBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTODEVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTOIFINDEX", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BPF_EXTENSIONS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BSDCOMPAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUF_LOCK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL_BUDGET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_CNX_ADVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_REUSEPORT_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DOMAIN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_CPU", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_NAPI_ID", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LOCK_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MAX_PACING_RATE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MEMINFO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NETNS_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOFCS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NO_CHECK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEEK_OFF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERGROUPS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERNAME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PREFER_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PRIORITY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PROTOCOL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVMARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RESERVE_MEM", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RXQ_OVFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SELECT_ERR_QUEUE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXREHASH", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXTIME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WIFI_STATUS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ZEROCOPY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/android.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_INET", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNIX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AF_UNSPEC", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_CANONNAME", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICHOST", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_PASSIVE", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPPOTO_IP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_3PC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ADFS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AH", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AHIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_APES", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ARGUS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_AX25", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BHA", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BLT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_BRSATMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CFTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CHAOS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPHB", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_CPNX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DIVERT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_DSTOPTS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EMCON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ENCAP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_EON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ESP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ETHERIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_FRAGMENT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_GRE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HELLO", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_HMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ICMPV6", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDPR", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IDRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IGRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IL", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INLSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_INP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCOMP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPCV", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPEIP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPPC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV4", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IPV6", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_IRTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_KRYPTOLAN", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LARP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF1", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_LEAF2", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MEAS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MHRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MICP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_MUX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ND", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NHRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NONE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_NVPII", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_OSPFIGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PGM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIGP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PIM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PRM", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PUP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_PVP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RAW", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RCCMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ROUTING", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RSVP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_RVD", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATEXPAK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SATMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCCSP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SCTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SDRP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SEP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SRPC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_ST", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SVMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_SWIPE", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCF", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TCP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TPXX", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK1", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TRUNK2", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_TTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_UDP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VINES", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VISA", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_VMTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBEXPAK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WBMON", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_WSN", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XNET", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("IPPROTO_XTP", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_DGRAM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RAW", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_RDM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_SEQPACKET", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_STREAM", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUPPORTS_INET", symbols.NewTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).AddStruct(symbols.NewStructBuilder("AddrInfo", "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_flags", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_family", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_socktype", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithStructMember("ai_next", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Socklen_t", "std::net::os", "<stdlib-path>/net/os/common.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::net::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIFamily", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIFlags", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AIProtocol", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("AISockType", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("SockAddrPtr", "std::net::os", "<stdlib-path>/net/os/common.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::net::os").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getaddrinfo", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("nodename", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("servname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("hints", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("res", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("The getaddrinfo() function is used to get a list of IP addresses and port numbers for host hostname and service servname.").WithContract("@param", "[in] nodename").WithContract("@param", "[in] servname").WithContract("@param", "[in] hints").WithContract("@param", "[out] res").WithContract("@require", "(void*)nodename || (void*)servname : \"One the names must be non-null\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freeaddrinfo", symbols.NewBaseTypeBuilder("void", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("res", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("freeaddrinfo() frees an AddrInfo created by getaddrinfo.").WithContract("@param", "[&in] res").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setsockopt", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", symbols.NewBaseTypeBuilder("void*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Set options on a socket.").WithContract("@param", "[out] optval").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsockopt", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("level", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optname", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optval", symbols.NewBaseTypeBuilder("void*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithArgument(symbols.NewVariableBuilder("optlen", symbols.NewTypeBuilder("Socklen_t*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/common.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Get options on a socket").WithContract("@param", "[in] optval").WithContract("@param", "[inout] optlen").Build()).WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AI_ADDRCONFIG", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_ALL", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_DEFAULT", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICSERV", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_UNUSABLE", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_V4MAPPED_CFG", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_PEEK", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CCITT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CHAOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CNT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_COIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DATAKIT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DECNET", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DLI", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ECMA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_HYLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IEEE80211", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IMPLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISDN", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISO", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LAT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_MAX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NATM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NDRV", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PPP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PUP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ROUTE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SNA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SYSTEM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_UTUN", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_VSOCK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_HDRCMPLT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_KEY", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_RTIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_XTP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLATTRIB", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLEXTEND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNLINK", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRITE", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTTRUNC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LABEL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER_SEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NKE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOADDRERR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOSIGPIPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NREAD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NWRITE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERLABEL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSESHAREUID", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP_MONOTONIC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTMORE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WANTOOBFLAG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/darwin.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("MSG_PEEK", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AAL5", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_AX25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BRIDGE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETROM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_X25", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLFREE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLMSG", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLREMOVE", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_BUSY_LOOP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_CBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ATTACH_REUSEPORT_EBPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTODEVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDTOIFINDEX", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BPF_EXTENSIONS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BSDCOMPAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUF_LOCK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BUSY_POLL_BUDGET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_CNX_ADVICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DETACH_REUSEPORT_BPF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DOMAIN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_CPU", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_INCOMING_NAPI_ID", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LOCK_FILTER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MAX_PACING_RATE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_MEMINFO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NETNS_COOKIE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NOFCS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NO_CHECK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PASSSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEEK_OFF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERGROUPS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERNAME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERPIDFD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERSEC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PREFER_BUSY_POLL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PRIORITY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PROTOCOL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVMARK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RESERVE_MEM", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RXQ_OVFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SELECT_ERR_QUEUE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUFFORCE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXREHASH", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TXTIME", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_WIFI_STATUS", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ZEROCOPY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/linux.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("AI_ADDRCONFIG", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_EXT", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_FQDN", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("AI_NUMERICSERV", symbols.NewTypeBuilder("AIFlags", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_BCAST", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_CMSG_CLOEXEC", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_CTRUNC", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_DONTROUTE", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_DONTWAIT", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_EOR", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_MCAST", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_NOSIGNAL", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_OOB", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_PEEK", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_TRUNC", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_WAITALL", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_WAITFORONE", symbols.NewTypeBuilder("CInt", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BLUETOOTH", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CCITT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CHAOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_CNT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_COIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DATAKIT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DECNET", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_DLI", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_E164", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ECMA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ENCAP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_FRAME", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_HYLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IMPLINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISDN", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ISO", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_KEY", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LAT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LINK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_LOCAL", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_MAX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_MPLS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NATM", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_OSI", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_PUP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_ROUTE", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_SNA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_O_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_HDRCMPLT", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PFLOW", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_PIPEX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_RTIP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_PSEUDO_AF_XTP", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_CLOEXEC", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_DNS", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_NONBLOCK", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOCK_NONBLOCK_INHERIT", symbols.NewTypeBuilder("", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BINDANY", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DOMAIN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_NETPROC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PEERCRED", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_PROTOCOL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEPORT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RTABLE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SPLICE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TIMESTAMP", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ZEROIZE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/openbsd.c3").Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("F_GETFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("F_SETFL", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_pollfd", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("events", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithStructMember("revents", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Posix_nfds_t", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithResolvesToType(symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeSocket", "std::net::os", "<stdlib-path>/net/os/posix.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Fd", "libc").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("af", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fcntl", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("any*", "std::net::os").IsUnsizedCollection().Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("fds", symbols.NewTypeBuilder("Posix_pollfd*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("nfds", symbols.NewTypeBuilder("Posix_nfds_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewBaseTypeBuilder("fault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewBaseTypeBuilder("fault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_valid", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewBaseTypeBuilder("void", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.set_non_blocking", symbols.NewBaseTypeBuilder("void", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/posix.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::os
	module = moduleCollection["std::net::os"]
	module.AddVariable(symbols.NewVariableBuilder("FIOASYNC", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONBIO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("MSG_PEEK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_APPLETALK", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_BTH", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_INET6", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IPX", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_IRDA", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("PLATFORM_AF_NETBIOS", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("CUShort", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SOL_SOCKET", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ACCEPTCONN", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_BROADCAST", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DEBUG", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_DONTROUTE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_ERROR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_KEEPALIVE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_LINGER", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_OOBINLINE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_RCVTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_REUSEADDR", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDBUF", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDLOWAT", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_SNDTIMEO", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_TYPE", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("SO_USELOOPBACK", symbols.NewTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("NativeSocket", "std::net::os", "<stdlib-path>/net/os/win32.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ioctlsocket", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmd", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("argp", symbols.NewTypeBuilder("CULong*", "std::core::cinterop").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closesocket", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("af", symbols.NewTypeBuilder("AIFamily", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("AISockType", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("AIProtocol", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bind", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("int", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("SockAddrPtr", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("address_len", symbols.NewTypeBuilder("Socklen_t*", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.is_valid", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_non_blocking", symbols.NewBaseTypeBuilder("void", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithTypeIdentifier("NativeSocket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("non_blocking", symbols.NewBaseTypeBuilder("bool", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeSocket.close", symbols.NewBaseTypeBuilder("void", "std::net::os").IsOptional().Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_error", symbols.NewBaseTypeBuilder("fault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("socket_error", symbols.NewBaseTypeBuilder("fault", "std::net::os").Build(), "std::net::os", "<stdlib-path>/net/os/win32.c3").WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddVariable(symbols.NewVariableBuilder("POLL_EVENT_DISCONNECT", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_ERROR", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_INVALID", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_OOB", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_READ_PRIO", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_EVENT_WRITE_OOB", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLL_FOREVER", symbols.NewTypeBuilder("Duration", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_READ", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_ANY_WRITE", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_READ", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_OOB_WRITE", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_PRIO_READ", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_READ", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddVariable(symbols.NewVariableBuilder("SUBSCRIBE_WRITE", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).AddStruct(symbols.NewStructBuilder("Poll", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("socket", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("events", symbols.NewTypeBuilder("PollSubscribe", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("revents", symbols.NewTypeBuilder("PollEvent", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Socket", "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("sock", symbols.NewTypeBuilder("NativeSocket", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithStructMember("ai_addr_storage", symbols.NewBaseTypeBuilder("char", "std::net").IsCollectionWithSize(128).Build(), "std::net", "<stdlib-path>/net/socket.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PollEvents", "std::net", "<stdlib-path>/net/socket.c3").WithResolvesToType(symbols.NewTypeBuilder("PollEvent", "std::net").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("PollSubscribes", "std::net", "<stdlib-path>/net/socket.c3").WithResolvesToType(symbols.NewTypeBuilder("PollSubscribe", "std::net").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("PollEvent", "ushort", "std::net", "<stdlib-path>/net/socket.c3").WithEnumerator(symbols.NewEnumeratorBuilder("READ_PRIO", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("READ_OOB", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("READ", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WRITE_OOB", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WRITE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DISCONNECT", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ERROR", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INVALID", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollEvent").Build()).Build()).AddEnum(symbols.NewEnumBuilder("PollSubscribe", "ushort", "std::net", "<stdlib-path>/net/socket.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ANY_READ", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRIO_READ", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OOB_READ", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("READ", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY_WRITE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OOB_WRITE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WRITE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("PollSubscribe").Build()).Build()).AddEnum(symbols.NewEnumBuilder("SocketOption", "char", "std::net", "<stdlib-path>/net/socket.c3").WithEnumerator(symbols.NewEnumeratorBuilder("REUSEADDR", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("REUSEPORT", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEEPALIVE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BROADCAST", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OOBINLINE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DONTROUTE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketOption").Build()).Build()).AddEnum(symbols.NewEnumBuilder("SocketShutdownHow", "", "std::net", "<stdlib-path>/net/socket.c3").WithEnumerator(symbols.NewEnumeratorBuilder("RECEIVE", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("native_value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketShutdownHow").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEND", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("native_value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketShutdownHow").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BOTH", "<stdlib-path>/net/socket.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("native_value", symbols.NewTypeBuilder("CInt", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()}).WithEnumName("SocketShutdownHow").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@loop_over_ai", symbols.NewBaseTypeBuilder("void", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(NativeSocket fd, AddrInfo* ai)", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll", symbols.NewBaseTypeBuilder("ulong", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", symbols.NewTypeBuilder("Poll", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[inout] polls").WithContract("@param", "timeout : \"duration to poll (clamped to CInt.max ms), or POLL_FOREVER.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("poll_ms", symbols.NewBaseTypeBuilder("ulong", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("polls", symbols.NewTypeBuilder("Poll", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout_ms", symbols.NewBaseTypeBuilder("long", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[inout] polls").WithContract("@param", "timeout_ms : \"duration to poll in ms or -1. Clamped to CInt.max\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("new_socket", symbols.NewTypeBuilder("Socket", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_broadcast", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_keepalive", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_reuseaddr", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_dontroute", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_oobinline", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_broadcast", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_keepalive", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_reuseaddr", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_dontroute", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_oobinline", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_option", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("option", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_option", symbols.NewBaseTypeBuilder("bool", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("option", symbols.NewTypeBuilder("SocketOption", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read", symbols.NewBaseTypeBuilder("usz", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_byte", symbols.NewBaseTypeBuilder("char", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write", symbols.NewBaseTypeBuilder("usz", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_byte", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte", symbols.NewBaseTypeBuilder("char", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("peek", symbols.NewBaseTypeBuilder("usz", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("bytes", symbols.NewBaseTypeBuilder("char", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("shutdown", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket.c3").WithTypeIdentifier("Socket").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Socket*", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithArgument(symbols.NewVariableBuilder("how", symbols.NewTypeBuilder("SocketShutdownHow", "std::net").Build(), "std::net", "<stdlib-path>/net/socket.c3").Build()).WithoutSourceCode().Build())

	// Define module std::net
	module = moduleCollection["std::net"]
	module.AddFunction(symbols.NewFunctionBuilder("apply_sockoptions", symbols.NewBaseTypeBuilder("void", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("sockfd", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_from_addrinfo", symbols.NewTypeBuilder("Socket", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("last_error_is_delayed_connect", symbols.NewBaseTypeBuilder("bool", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_with_timeout_from_addrinfo", symbols.NewTypeBuilder("Socket", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_from_addrinfo", symbols.NewTypeBuilder("Socket", "std::net").IsOptional().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("addrinfo", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@network_loop_over_ai", symbols.NewBaseTypeBuilder("void", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").WithArgument(symbols.NewVariableBuilder("network", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewTypeBuilder("", "").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void(fd, ai)", "std::net").Build(), "std::net", "<stdlib-path>/net/socket_private.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::net::tcp
	module = moduleCollection["std::net::tcp"]
	module.AddDistinct(symbols.NewDistinctBuilder("TcpServerSocket", "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TcpSocket", "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("TcpSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgDefault("time::DURATION_ZERO").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgDefault("UNSPECIFIED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeBuilder("TcpSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgDefault("UNSPECIFIED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeBuilder("TcpSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeBuilder("TcpSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen", symbols.NewTypeBuilder("TcpServerSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgDefault("UNSPECIFIED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("accept", symbols.NewTypeBuilder("TcpSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("server_socket", symbols.NewTypeBuilder("TcpServerSocket*", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("listen_to", symbols.NewTypeBuilder("TcpServerSocket", "std::net::tcp").IsOptional().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("backlog", symbols.NewBaseTypeBuilder("uint", "std::net::tcp").Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::tcp", "<stdlib-path>/net/tcp.c3").IsVarArg().Build()).WithoutSourceCode().Build())

	// Define module std::net::udp
	module = moduleCollection["std::net::udp"]
	module.AddDistinct(symbols.NewDistinctBuilder("UdpSocket", "std::net::udp", "<stdlib-path>/net/udp.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Socket", "std::net").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect", symbols.NewTypeBuilder("UdpSocket", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::udp").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgDefault("UNSPECIFIED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_to", symbols.NewTypeBuilder("UdpSocket", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async", symbols.NewTypeBuilder("UdpSocket", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("port", symbols.NewBaseTypeBuilder("uint", "std::net::udp").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").IsVarArg().Build()).WithArgument(symbols.NewVariableBuilder("ip_protocol", symbols.NewTypeBuilder("IpProtocol", "std::net").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgDefault("UNSPECIFIED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("connect_async_to", symbols.NewTypeBuilder("UdpSocket", "std::net::udp").IsOptional().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").WithArgument(symbols.NewVariableBuilder("ai", symbols.NewTypeBuilder("AddrInfo*", "std::net::os").Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SocketOption", "std::net").IsUnsizedCollection().Build(), "std::net::udp", "<stdlib-path>/net/udp.c3").IsVarArg().Build()).WithoutSourceCode().Build())

	// Define module std::net::url
	module = moduleCollection["std::net::url"]
	module.AddStruct(symbols.NewStructBuilder("Url", "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("scheme", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("host", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("port", symbols.NewBaseTypeBuilder("uint", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("username", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("password", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("fragment", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithDocs("Represents the actual (decoded) Url.\n\nAn Url can be parsed from a String with `new_parse()` or `temp_parse()`. The\nparsed fields are decoded. The only field that is not decoded is `query`.\nTo access the decoded query values, use `new_parse_query(query)`.\n\n`Url.to_string()` will re-assemble the fields into a valid Url string with\nproper percent-encoded values.\n\nIf the Url struct fields are filled in manually, use the actual (un-encoded)\nvalues. To create a raw query string, initialize an `UrlQueryValues` map, use\n`UrlQueryValues.add()` to add the query parameters and, finally, call\n`UrlQueryValues.to_string()`.").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("UrlQueryValues", "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("map", symbols.NewTypeBuilder("HashMap", "std::collections::map").WithGenericArguments(symbols.NewTypeBuilder("String", "std::net::url").Build(), symbols.NewTypeBuilder("UrlQueryValueList", "std::net::url").Build()).Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("key_order", symbols.NewTypeBuilder("UrlQueryValueList", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("table", symbols.NewTypeBuilder("Entry*", "std::collections::map").IsUnsizedCollection().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("count", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("threshold", symbols.NewBaseTypeBuilder("uint", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithStructMember("load_factor", symbols.NewBaseTypeBuilder("float", "std::collections::map").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("UrlQueryValueList", "std::net::url", "<stdlib-path>/net/url.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("String", "std::net::url").Build()).Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::net::url", "<stdlib-path>/net/url.c3").WithConstant(symbols.NewFaultConstantBuilder("EMPTY", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_SCHEME", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_USER", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PASSWORD", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_HOST", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_PATH", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INVALID_FRAGMENT", "std::net::url", "../../../assets/c3c/lib/std/net/url.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("tparse", symbols.NewTypeBuilder("Url", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("url_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Parse a URL string into a Url struct.").WithContract("@param", "[in] url_string").WithContract("@require", "url_string.len > 0 : \"the url_string must be len 1 or more\"").WithContract("@return", "\"the parsed Url\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse", symbols.NewTypeBuilder("Url", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("url_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Parse a URL string into a Url struct.").WithContract("@param", "[in] url_string").WithContract("@require", "url_string.len > 0 : \"the url_string must be len 1 or more\"").WithContract("@return", "\"the parsed Url\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("Url").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Url*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("Url").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Url*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_query_to_temp", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Parse the query parameters of the Url into a UrlQueryValues map.").WithContract("@param", "[in] query").WithContract("@return", "\"a UrlQueryValues HashMap\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("parse_query", symbols.NewTypeBuilder("UrlQueryValues", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("query", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Parse the query parameters of the Url into a UrlQueryValues map.").WithContract("@param", "[in] query").WithContract("@param", "[inout] allocator").WithContract("@return", "\"a UrlQueryValues HashMap\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add", symbols.NewTypeBuilder("UrlQueryValues*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("key", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Add copies of the key and value strings to the UrlQueryValues map. These\ncopies are freed when the UrlQueryValues map is freed.").WithContract("@param", "[in] self").WithContract("@param", "key").WithContract("@param", "value").WithContract("@return", "\"a UrlQueryValues map\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithArgument(symbols.NewVariableBuilder("f", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("UrlQueryValues").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UrlQueryValues*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").WithTypeIdentifier("Url").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Url*", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Free an Url struct.").WithContract("@param", "[in] self").Build()).WithoutSourceCode().Build())

	// Define module std::net::url
	module = moduleCollection["std::net::url"]
	module.AddEnum(symbols.NewEnumBuilder("UrlEncodingMode", "char", "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithEnumerator(symbols.NewEnumeratorBuilder("UNRESERVED", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PATH", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HOST", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USERPASS", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("QUERY", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FRAGMENT", "<stdlib-path>/net/url_encoding.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("allowed", symbols.NewTypeBuilder("String", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()}).WithEnumName("UrlEncodingMode").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithConstant(symbols.NewFaultConstantBuilder("INVALID_HEX", "std::net::url", "../../../assets/c3c/lib/std/net/url_encoding.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("should_encode", symbols.NewBaseTypeBuilder("bool", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewBaseTypeBuilder("char", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns true if char c should be encoded according to RFC 3986.").WithContract("@param", "c : \"Character to check if it should be encoded.\"").WithContract("@param", "mode : \"Url encoding mode.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode_len", symbols.NewBaseTypeBuilder("usz", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the length of the percent-encoded string.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("encode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode the string s for a given encoding mode.\nReturned string must be freed.").WithContract("@param", "s : \"String to encode\"").WithContract("@param", "mode : \"Url encoding mode\"").WithContract("@param", "[inout] allocator").WithContract("@return", "\"Percent-encoded String\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tencode", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Encode string s for a given encoding mode, stored on the temp allocator.").WithContract("@param", "s : \"String to encode\"").WithContract("@param", "mode : \"Url encoding mode\"").WithContract("@return", "\"Percent-encoded String\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode_len", symbols.NewBaseTypeBuilder("usz", "std::net::url").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Calculate the length of the percent-decoded string.").WithContract("@return", "? INVALID_HEX").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("decode", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Decode string s for a given encoding mode.\nReturned string must be freed.").WithContract("@param", "s : \"String to decode\"").WithContract("@param", "mode : \"Url encoding mode\"").WithContract("@param", "[inout] allocator").WithContract("@return", "\"Percent-decoded String\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tdecode", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("UrlEncodingMode", "std::net::url").Build(), "std::net::url", "<stdlib-path>/net/url_encoding.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Decode string s for a given encoding mode, stored on the temp allocator.").WithContract("@param", "s : \"String to decode\"").WithContract("@param", "mode : \"Url encoding mode\"").WithContract("@return", "\"Percent-decoded String\"").Build()).WithoutSourceCode().Build())

	// Define module std::os::android
	module = moduleCollection["std::os::android"]
	module.AddStruct(symbols.NewStructBuilder("LogMessage", "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("struct_size", symbols.NewBaseTypeBuilder("usz", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("buffer_id", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("priority", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("file", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("line", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithStructMember("message", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("AborterFunction", "std::os::android", "<stdlib-path>/os/android/log.c3").WithResolvesTo("fn void(ZString abort_message)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("LoggerFunction", "std::os::android", "<stdlib-path>/os/android/log.c3").WithResolvesTo("fn void(LogMessage* log_message)").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("LogId", "", "std::os::android", "<stdlib-path>/os/android/log.c3").WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_MIN", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_MAIN", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_RADIO", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_EVENTS", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_SYSTEM", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_CRASH", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_STATS", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_SECURITY", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_KERNEL", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_MAX", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOG_ID_DEFAULT", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogId").Build()).Build()).AddEnum(symbols.NewEnumBuilder("LogPriority", "", "std::os::android", "<stdlib-path>/os/android/log.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_UNKNOWN", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_DEFAULT", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_VERBOSE", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_DEBUG", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_INFO", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_WARN", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_ERROR", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_FATAL", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANDROID_LOG_SILENT", "<stdlib-path>/os/android/log.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("CInt", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()}).WithEnumName("LogPriority").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("log_write", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("LogPriority", "std::core::log").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("text", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_print", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("LogPriority", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("any*", "std::os::android").IsUnsizedCollection().Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_assert", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("any*", "std::os::android").IsUnsizedCollection().Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_id_is_valid", symbols.NewBaseTypeBuilder("bool", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("LogId", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_buf_write", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("bufID", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("text", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_buf_print", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("bufID", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("any*", "std::os::android").IsUnsizedCollection().Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_write_log_message", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("log_message", symbols.NewTypeBuilder("LogMessage", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_set_logger", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("logger", symbols.NewTypeBuilder("LoggerFunction", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_logd_logger", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("log_message", symbols.NewTypeBuilder("LogMessage", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_stderr_logger", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("log_message", symbols.NewTypeBuilder("LogMessage", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_set_aborter", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("aborter", symbols.NewTypeBuilder("AborterFunction", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_call_aborter", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("abort_message", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_default_aborter", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("abort_message", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_is_loggable", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("default_prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_is_loggable_len", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("isz", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithArgument(symbols.NewVariableBuilder("default_prio", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_set_minimum_priority", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("priority", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_get_minimum_priority", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("log_set_default_tag", symbols.NewBaseTypeBuilder("void", "std::os::android").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").WithArgument(symbols.NewVariableBuilder("tag", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::android", "<stdlib-path>/os/android/log.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::backtrace
	module = moduleCollection["std::os::backtrace"]
	module.AddVariable(symbols.NewVariableBuilder("BACKTRACE_UNKNOWN", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).AddStruct(symbols.NewStructBuilder("Backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("offset", symbols.NewBaseTypeBuilder("uptr", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("object_file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("line", symbols.NewBaseTypeBuilder("uint", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithStructMember("is_inline", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceList", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesToType(symbols.NewTypeBuilder("List", "std::collections::list").WithGenericArguments(symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").Build()).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("symbolize_backtrace", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithResolvesTo("openbsd::symbolize_backtrace").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithConstant(symbols.NewFaultConstantBuilder("SEGMENT_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("EXECUTABLE_PATH_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("IMAGE_NOT_FOUND", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("NO_BACKTRACE_SYMBOLS", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("RESOLUTION_FAILED", "std::os::backtrace", "../../../assets/c3c/lib/std/os/backtrace.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("has_file", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_unknown", symbols.NewBaseTypeBuilder("bool", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::os::backtrace").IsOptional().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free", symbols.NewBaseTypeBuilder("void", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithTypeIdentifier("Backtrace").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Backtrace*", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("uptr", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("function", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("object_file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgDefault("\"\"").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewBaseTypeBuilder("uint", "std::os::backtrace").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgDefault("0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("capture_current", symbols.NewBaseTypeBuilder("void*", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList", "std::os::backtrace").IsOptional().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*", "std::os::backtrace").IsUnsizedCollection().Build(), "std::os::backtrace", "<stdlib-path>/os/backtrace.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os
	module = moduleCollection["std::os"]
	module.AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("num_cpu", symbols.NewBaseTypeBuilder("uint", "std::os").Build(), "std::os", "<stdlib-path>/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::os::env
	module = moduleCollection["std::os::env"]
	module.AddFunction(symbols.NewFunctionBuilder("get_var", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] name").WithContract("@require", "name.len > 0").WithContract("@return", "? NOT_FOUND").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tget_var", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_var", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithArgument(symbols.NewVariableBuilder("overwrite", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgDefault("true").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] name").WithContract("@param", "[in] value").WithContract("@require", "name.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_home_dir", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the current user's home directory.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_config_dir", symbols.NewTypeBuilder("Path", "std::io::path").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the current user's config directory.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("clear_var", symbols.NewBaseTypeBuilder("bool", "std::os::env").Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::env", "<stdlib-path>/os/env.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@param", "[in] name").WithContract("@require", "name.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::env", "<stdlib-path>/os/env.c3").WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddVariable(symbols.NewVariableBuilder("EPIOCGPARAMS", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPIOCSPARAMS", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLERR", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLET", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLEXCLUSIVE", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLHUP", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLIN", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLMSG", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLONESHOT", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLOUT", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLPRI", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLRDBAND", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLRDHUP", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLRDNORM", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLWAKEUP", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLWRBAND", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLLWRNORM", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLL_CTL_ADD", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLL_CTL_DEL", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLL_CTL_MOD", symbols.NewTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPOLL_IOC_TYPE", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("IOCPARM_MASK", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("IOC_IN", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("IOC_INOUT", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("IOC_OUT", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddVariable(symbols.NewVariableBuilder("IOC_VOID", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).AddStruct(symbols.NewStructBuilder("EpollData", "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("fd", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("u32", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("u64", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("EpollEvent", "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("events", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("data", symbols.NewTypeBuilder("EpollData", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("EpollParams", "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("busy_poll_usecs", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("busy_poll_budget", symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("prefer_busy_poll", symbols.NewBaseTypeBuilder("char", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithStructMember("__pad", symbols.NewBaseTypeBuilder("char", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("EpollEvents", "uint", "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLIN", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLPRI", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLOUT", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLRDNORM", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLRDBAND", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLWRNORM", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLWRBAND", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLMSG", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLERR", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLHUP", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLRDHUP", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLEXCLUSIVE", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLWAKEUP", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLONESHOT", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EPOLLET", "<stdlib-path>/os/linux/epoll.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("EpollEvents").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("@ioctl_IO", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$y", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ioctl_IOR", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$y", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ioctl_IOW", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$y", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ioctl_IOWR", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$y", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@ioctl_ION", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$x", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$y", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$n", symbols.NewTypeBuilder("", "").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_create", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Creates an epoll instance. Returns an fd for the new instance.\n* The \"size\" parameter is a hint specifying the number of file\n* descriptors to be associated with the new instance.  \n* The fd returned by epoll_create() should be closed with close().").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_create1", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Same as epoll_create but with an FLAGS parameter.\n* The unused SIZE parameter has been dropped.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_ctl", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("EpollEvent*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Manipulate an epoll instance \"epfd\". Returns 0 in case of success,\n* -1 in case of error ( the \"errno\" variable will contain the\n* specific error code ) The \"op\" parameter is one of the EPOLL_CTL_*\n* constants defined above. The \"fd\" parameter is the target of the\n* operation. The \"event\" parameter describes which events the caller\n* is interested in and any associated user data.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_wait", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("EpollEvent*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Wait for events on an epoll instance \"epfd\". Returns the number of\n* triggered events returned in \"events\" buffer. Or -1 in case of\n* error with the \"errno\" variable set to the specific error code. The\n* \"events\" parameter is a buffer that will contain triggered\n* events. The \"maxevents\" is the maximum number of events to be\n* returned ( usually size of \"events\" ). The \"timeout\" parameter\n* specifies the maximum wait time in milliseconds (-1 == infinite).").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_pwait", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("EpollEvent*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("Sigset_t*", "libc").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Same as epoll_wait, but the thread's signal mask is temporarily\n* and atomically replaced with the one provided as parameter.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("epoll_pwait2", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("EpollEvent*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("Sigset_t*", "libc").Build(), "std::os::linux", "<stdlib-path>/os/linux/epoll.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* Same as epoll_pwait, but the timeout as a timespec.").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_usable_size", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::linux
	module = moduleCollection["std::os::linux"]
	module.AddVariable(symbols.NewVariableBuilder("EI_NIDENT", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddVariable(symbols.NewVariableBuilder("PT_PHDR", symbols.NewTypeBuilder("", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).AddStruct(symbols.NewStructBuilder("Elf32_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", symbols.NewBaseTypeBuilder("char", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf32_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", symbols.NewTypeBuilder("Elf32_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", symbols.NewTypeBuilder("Elf32_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Ehdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ident", symbols.NewBaseTypeBuilder("char", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_type", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_machine", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_version", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_entry", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phoff", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shoff", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_flags", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_ehsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phentsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_phnum", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shentsize", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shnum", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("e_shstrndx", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Elf64_Phdr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_type", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_flags", symbols.NewTypeBuilder("Elf64_Word", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_offset", symbols.NewTypeBuilder("Elf64_Off", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_vaddr", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_paddr", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_filesz", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_memsz", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("p_align", symbols.NewTypeBuilder("Elf64_Xword", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Linux_Dl_info", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_fbase", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_sname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dli_saddr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Linux_dl_phdr_info_32", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_addr", symbols.NewTypeBuilder("Elf32_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_phdr", symbols.NewTypeBuilder("Elf32_Phdr*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_phnum", symbols.NewTypeBuilder("Elf32_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_adds", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_subs", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_tsl_modid", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_tls_data", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Linux_dl_phdr_info_64", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_addr", symbols.NewTypeBuilder("Elf64_Addr", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_phdr", symbols.NewTypeBuilder("Elf64_Phdr*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_phnum", symbols.NewTypeBuilder("Elf64_Half", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_adds", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_subs", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_tsl_modid", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithStructMember("dlpi_tls_data", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dl_iterate_phdr_callback32", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("fn CInt(Linux_dl_phdr_info_32*, usz, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Dl_iterate_phdr_callback64", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesTo("fn CInt(Linux_dl_phdr_info_64*, usz, void*)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf32_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Addr", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Half", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Lword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Off", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Sxword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Word", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Elf64_Xword", "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::linux").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("inet_ntop", symbols.NewBaseTypeBuilder("char*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("int", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("char*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("Socklen_t", "std::net::os").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("htonl", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("hostlong", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* The htonl() function converts the unsigned integer hostlong from host byte order to network byte order.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("htons", symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("hostshort", symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* The htons() function converts the unsigned short integer hostshort from host byte order to network byte order.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntohl", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("netlong", symbols.NewBaseTypeBuilder("uint", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* The ntohl() function converts the unsigned integer netlong from network byte order to host byte order.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ntohs", symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("netshort", symbols.NewBaseTypeBuilder("ushort", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* The ntohs() function converts the unsigned short integer netshort from network byte order to host byte order.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("bzero", symbols.NewBaseTypeBuilder("void", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("char*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("* The bzero() function erases the data in the n bytes of the memory\n* starting at the location pointed to by s, by writing zeros (bytes\n* containing '\\0') to that area.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readlink", symbols.NewBaseTypeBuilder("isz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("buf", symbols.NewBaseTypeBuilder("char*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("bufsize", symbols.NewBaseTypeBuilder("usz", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Linux_Dl_info*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dl_iterate_phdr64", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("Dl_iterate_phdr_callback64", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dl_iterate_phdr32", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("callback", symbols.NewTypeBuilder("Dl_iterate_phdr_callback32", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("elf_module_image_base", symbols.NewBaseTypeBuilder("ulong", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_from_exec", symbols.NewBaseTypeBuilder("void", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_from_dlinfo", symbols.NewBaseTypeBuilder("void", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Linux_Dl_info*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_line_parse", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("string", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("func_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("is_inlined", symbols.NewBaseTypeBuilder("bool", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_addr2line", symbols.NewBaseTypeBuilder("void", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr2line", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("func_name", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_element", symbols.NewBaseTypeBuilder("void", "std::os::linux").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::linux").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList", "std::os::backtrace").IsOptional().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*", "std::os::linux").IsUnsizedCollection().Build(), "std::os::linux", "<stdlib-path>/os/linux/linux.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddDef(symbols.NewDefBuilder("CFOptionFlags", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFAllocatorContextRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFAllocatorRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("default_allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.dealloc", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.alloc", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.get_preferred_size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("req_size", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("CFAllocatorRef.set_default", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorCreate", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("CFAllocatorContextRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorDeallocate", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetDefault", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorSetDefault", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorAllocate", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", symbols.NewTypeBuilder("CFOptionFlags", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFAllocatorGetPreferredSizeForSize", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithArgument(symbols.NewVariableBuilder("hint", symbols.NewTypeBuilder("CFOptionFlags", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_allocator.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddDef(symbols.NewDefBuilder("CFArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithResolvesToType(symbols.NewTypeBuilder("CFArray*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFArray", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("CFType", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFArrayCallBacksRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFMutableArray", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("CFArray", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFMutableArrayRef", "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CFMutableArray*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCount", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithTypeIdentifier("CFArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFArray*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getValueAtIndex", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithTypeIdentifier("CFArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFArray*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreate", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("values", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("num_values", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", symbols.NewTypeBuilder("CFArrayCallBacksRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCopy", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("array", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendArray", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithTypeIdentifier("CFMutableArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFMutableArray*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherArray", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("otherRange", symbols.NewTypeBuilder("CFRange", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("appendValue", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithTypeIdentifier("CFMutableArray").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFMutableArray*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("void*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("macos_CFArrayCreateMutable", symbols.NewTypeBuilder("CFMutableArrayRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("CFAllocatorRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("capacity", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithArgument(symbols.NewVariableBuilder("callBacks", symbols.NewTypeBuilder("CFArrayCallBacksRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/cf_array.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin::cocoa
	module = moduleCollection["std::os::darwin::cocoa"]
	module.AddFunction(symbols.NewFunctionBuilder("nsApplicationMain", symbols.NewBaseTypeBuilder("int", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").WithArgument(symbols.NewVariableBuilder("argc", symbols.NewBaseTypeBuilder("int", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewBaseTypeBuilder("char*", "std::os::darwin::cocoa").Build(), "std::os::darwin::cocoa", "<stdlib-path>/os/macos/cocoa.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::cf
	module = moduleCollection["std::os::macos::cf"]
	module.AddStruct(symbols.NewStructBuilder("CFRange", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("location", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithStructMember("length", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFIndex", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CFStringRef", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithResolvesToType(symbols.NewTypeBuilder("CFString*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFString", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("CFType", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFType", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("CFTypeRef", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("CFType*", "std::os::macos::cf").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("CFStringEncoding", "uint", "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithEnumerator(symbols.NewEnumeratorBuilder("INVALID_ID", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAC_ROMAN", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WINDOWS_LATIN_1", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ISO_LATIM_1", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NEXT_STEP_LATIN", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ASCII", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNICODE", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF8", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NON_LOSSY_ASCII", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF16", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF16BE", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF16LE", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF32", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF32BE", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTF32LE", "<stdlib-path>/os/macos/core_foundation.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("CFStringEncoding").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("getCStringPtr", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithTypeIdentifier("CFString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFString*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithArgument(symbols.NewVariableBuilder("encoding", symbols.NewTypeBuilder("CFStringEncoding", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCString", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithTypeIdentifier("CFString").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFString*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithArgument(symbols.NewVariableBuilder("encoding", symbols.NewTypeBuilder("CFStringEncoding", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("retain", symbols.NewTypeBuilder("CFTypeRef", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithTypeIdentifier("CFType").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFType*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithTypeIdentifier("CFType").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFType*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getRetainCount", symbols.NewTypeBuilder("CFIndex", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").WithTypeIdentifier("CFType").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("CFType*", "std::os::macos::cf").Build(), "std::os::macos::cf", "<stdlib-path>/os/macos/core_foundation.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", symbols.NewTypeBuilder("", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).AddStruct(symbols.NewStructBuilder("Darwin_Dl_info", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_fbase", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_sname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("dli_saddr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Darwin_mach_timebase_info", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("numer", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("denom", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Darwin_segment_command_64", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmd", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("cmdsize", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("segname", symbols.NewBaseTypeBuilder("char", "std::os::darwin").IsCollectionWithSize(16).Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmaddr", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("vmsize", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("fileoff", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("filesize", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("maxprot", symbols.NewBaseTypeBuilder("int", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("initprot", symbols.NewBaseTypeBuilder("int", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("nsects", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithStructMember("flags", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_data_t", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithResolvesToType(symbols.NewTypeBuilder("Darwin_mach_timebase_info", "std::os::darwin").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Darwin_mach_timebase_info_t", "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithResolvesToType(symbols.NewTypeBuilder("Darwin_mach_timebase_info", "std::os::darwin").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sysctl", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("namelen", symbols.NewTypeBuilder("CUInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldp", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldlenp", symbols.NewBaseTypeBuilder("usz*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newp", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("newlen", symbols.NewBaseTypeBuilder("usz", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("darwin_NSGetExecutablePath", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("uint*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getsegbyname", symbols.NewTypeBuilder("Darwin_segment_command_64*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("segname", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_image_count", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_dyld_get_image_vmaddr_slide", symbols.NewBaseTypeBuilder("iptr", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("image_index", symbols.NewBaseTypeBuilder("uint", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dladdr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("info", symbols.NewTypeBuilder("Darwin_Dl_info*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_timebase_info", symbols.NewBaseTypeBuilder("void", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("timebase", symbols.NewTypeBuilder("Darwin_mach_timebase_info_data_t*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mach_absolute_time", symbols.NewBaseTypeBuilder("ulong", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("executable_path", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_address", symbols.NewBaseTypeBuilder("uptr", "std::os::darwin").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_load_element", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("execpath", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("load_address", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList", "std::os::backtrace").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").IsUnsizedCollection().Build(), "std::os::darwin", "<stdlib-path>/os/macos/darwin.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddEnum(symbols.NewEnumBuilder("NSSearchPathDirectory", "NSUInteger", "std::os::darwin", "<stdlib-path>/os/macos/general.c3").WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DEMO_APPLICATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DEVELOPER_APPLICATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADMIN_APPLICATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LIBRARY", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DEVELOPER", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOCUMENTATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOCUMENT", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CORE_SERVICE", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AUTOSAVED_INFORMATION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DESKTOP", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CACHES", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_SUPPORT", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOWNLOADS", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("INPUT_METHODS", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOVIES", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MUSIC", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PICTURES", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRINTER_DESCRIPTION", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHARED_PUBLIC", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PREFERENCE_PANES", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_SCRIPTS", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ITEM_REPLACEMENT", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ALL_APPLICATIONS", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ALL_LIBRARIES", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TRASH", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDirectory").Build()).Build()).AddEnum(symbols.NewEnumBuilder("NSSearchPathDomainMask", "NSUInteger", "std::os::darwin", "<stdlib-path>/os/macos/general.c3").WithEnumerator(symbols.NewEnumeratorBuilder("USER", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDomainMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LOCAL", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDomainMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NETWORK", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDomainMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEM", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDomainMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ALL", "<stdlib-path>/os/macos/general.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("NSSearchPathDomainMask").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("nsSearchPathForDirectoriesInDomains", symbols.NewTypeBuilder("CFArrayRef", "std::os::macos::cf").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").WithArgument(symbols.NewVariableBuilder("directory", symbols.NewTypeBuilder("NSSearchPathDirectory", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("domainMask", symbols.NewTypeBuilder("NSSearchPathDomainMask", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("expandTilde", symbols.NewBaseTypeBuilder("bool", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("find_first_directory_temp", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").WithArgument(symbols.NewVariableBuilder("directory", symbols.NewTypeBuilder("NSSearchPathDirectory", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("domainMask", symbols.NewTypeBuilder("NSSearchPathDomainMask", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/general.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::darwin
	module = moduleCollection["std::os::darwin"]
	module.AddFunction(symbols.NewFunctionBuilder("malloc_size", symbols.NewBaseTypeBuilder("usz", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").WithArgument(symbols.NewVariableBuilder("ptr", symbols.NewBaseTypeBuilder("void*", "std::os::darwin").Build(), "std::os::darwin", "<stdlib-path>/os/macos/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::macos::objc
	module = moduleCollection["std::os::macos::objc"]
	module.AddDef(symbols.NewDefBuilder("NSInteger", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NSUInteger", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::os::backtrace").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ObjcId", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("SendVoid", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithResolvesTo("fn void*(void*, ObjcSelector)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcClass", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcIvar", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcMethod", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ObjcSelector", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("ApplicationActivationPolicy", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("REGULAR", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ACCESSORY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PROHIBITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("ApplicationActivationPolicy").Build()).Build()).AddEnum(symbols.NewEnumBuilder("BackingStore", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("RETAINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONRETAINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BUFFERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("BackingStore").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventMask", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_MOVED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_ENTERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_EXITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLAGS_CHANGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPKIT_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEM_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PERIODIC", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR_UPDATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SCROLL_WHEEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_POINT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_PROXIMITY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SWIPE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ROTATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BEGIN_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMART_MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DIRECT_TOUCH", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ANY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventMask").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventModifierFlag", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("CAPS_LOCK", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SHIFT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CONTROL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OPTION", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("COMMAND", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMERIC_PAD", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FUNCTION", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HELP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventModifierFlag").Build()).Build()).AddEnum(symbols.NewEnumBuilder("EventType", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_MOVED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("LEFT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RIGHT_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_ENTERED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MOUSE_EXITED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("KEY_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FLAGS_CHANGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPKIT_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYSTEM_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APPLICATION_DEFINED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PERIODIC", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CURSOR_UPDATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SCROLL_WHEEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_POINT", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TABLET_PROXIMITY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DOWN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_UP", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OTHER_MOUSE_DRAGGED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SWIPE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ROTATE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("BEGIN_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("END_GESTURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SMART_MAGNIFY", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("QUICK_LOOK", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PRESSURE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DIRECT_TOUCH", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CHANGE_MODE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("long", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("EventType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("StatusItemLength", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("VARIABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("StatusItemLength").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SQUARE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("StatusItemLength").Build()).Build()).AddEnum(symbols.NewEnumBuilder("WindowStyleMask", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithEnumerator(symbols.NewEnumeratorBuilder("BORDERLESS", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TITLED", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("CLOSABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MINIATURIZABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RESIZABLE", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TEXTURED_BACKGROUND", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNIFIED_TITLE_AND_TOOLBAR", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FULL_SCREEN", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FULL_SIZE_CONTENT_VIEW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UTILITY_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DOC_MODAL_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONACTIVATING_PANEL", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("HUD_WINDOW", "<stdlib-path>/os/macos/objc.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("val", symbols.NewTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()}).WithEnumName("WindowStyleMask").Build()).Build()).AddFault(symbols.NewFaultBuilder("", "", "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithConstant(symbols.NewFaultConstantBuilder("CLASS_NOT_FOUND", "std::os::macos::objc", "../../../assets/c3c/lib/std/os/macos/objc.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNKNOWN_EVENT", "std::os::macos::objc", "../../../assets/c3c/lib/std/os/macos/objc.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.name", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.superclass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.responds_to", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("sel", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.method", symbols.NewTypeBuilder("ObjcMethod", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcSelector.equals", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ObjcClass.equals", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("a", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("b", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("alloc", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("release", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_by_name", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").IsOptional().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("c", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_get_list", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").IsUnsizedCollection().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("msgSend", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("any*", "std::os::macos::objc").IsUnsizedCollection().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").IsVarArg().Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sel_getUid", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("msg_send", symbols.NewTypeBuilder("", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("", "").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$selector", symbols.NewTypeBuilder("ZString", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("any*", "std::os::macos::objc").IsUnsizedCollection().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").IsVarArg().Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@autoreleasepool", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("objc_autoreleasePoolPush", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("objc_autoreleasePoolPop", symbols.NewBaseTypeBuilder("void", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getClass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getClassList", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("ObjcClass*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer_count", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lookUpClass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getName", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getSuperclass", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_getClassMethod", symbols.NewTypeBuilder("ObjcMethod", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_respondsToSelector", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sel_registerName", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_addIvar", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("double", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("class_addMethod", symbols.NewBaseTypeBuilder("bool", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ObjcSelector", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("imp", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("types", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getInstanceVariable", symbols.NewTypeBuilder("ObjcIvar", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("outValue", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setInstanceVariable", symbols.NewTypeBuilder("ObjcIvar", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("id", symbols.NewTypeBuilder("ObjcId", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("value", symbols.NewBaseTypeBuilder("void*", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocateClassPair", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("cls", symbols.NewTypeBuilder("ObjcClass", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithArgument(symbols.NewVariableBuilder("extraBytes", symbols.NewBaseTypeBuilder("uint", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("event_type_from", symbols.NewTypeBuilder("EventType", "std::os::macos::objc").IsOptional().Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").WithArgument(symbols.NewVariableBuilder("val", symbols.NewBaseTypeBuilder("int", "std::os::macos::objc").Build(), "std::os::macos::objc", "<stdlib-path>/os/macos/objc.c3").Build()).WithoutSourceCode().Build())

	// Define module std::math::nolibc
	module = moduleCollection["std::math::nolibc"]
	module.AddFunction(symbols.NewFunctionBuilder("__stack_chk_fail", symbols.NewBaseTypeBuilder("void", "std::math::nolibc").Build(), "std::math::nolibc", "<stdlib-path>/os/nolibc.c3").WithoutSourceCode().Build())

	// Define module std::os::openbsd
	module = moduleCollection["std::os::openbsd"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DDB", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_FS", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_GAP_UNUSED", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_ALLOWPOWERDOWN", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BATTERY", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPUSPEED", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKCOUNT", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPUFOUND", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPUONLINE", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PERFPOLICY", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM64", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_POWER", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PRODUCT", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_SENSORS", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_SERIALNO", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_SETPERF", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_SMT", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_UCOMNAMES", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM64", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_UUID", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VENDOR", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VERSION", symbols.NewTypeBuilder("", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols_fmt", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("addrlist", symbols.NewBaseTypeBuilder("void*", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::os::openbsd").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("fmt", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_line_parse", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").IsOptional().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr2line", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_addr2line", symbols.NewBaseTypeBuilder("void", "std::os::openbsd").IsOptional().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr2line", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_from_exec", symbols.NewBaseTypeBuilder("void", "std::os::openbsd").IsOptional().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("fun", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_add_element", symbols.NewBaseTypeBuilder("void", "std::os::openbsd").IsOptional().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("BacktraceList*", "std::os::backtrace").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("fun", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("obj", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList", "std::os::backtrace").IsOptional().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*", "std::os::openbsd").IsUnsizedCollection().Build(), "std::os::openbsd", "<stdlib-path>/os/openbsd/general.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os
	module = moduleCollection["std::os"]
	module.AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewBaseTypeBuilder("void", "std::os").Build(), "std::os", "<stdlib-path>/os/os.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::os").Build(), "std::os", "<stdlib-path>/os/os.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Exit the process with a given exit code. This will typically call 'exit' in LibC").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fastexit", symbols.NewBaseTypeBuilder("void", "std::os").Build(), "std::os", "<stdlib-path>/os/os.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::os").Build(), "std::os", "<stdlib-path>/os/os.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Exit the process with a given exit code. This will typically call '_Exit' in LibC\nusually bypassing '@finalizer' functions.").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_BOOTTIME_ALARM", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_COARSE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_FAST", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_PRECISE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_MONOTONIC_RAW_APPROX", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROCESS_CPUTIME_ID", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_PROF", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_ALARM", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_COARSE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_FAST", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_REALTIME_PRECISE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_SECOND", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_TAI", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_THREAD_CPUTIME_ID", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_FAST", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_PRECISE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_UPTIME_RAW_APPROX", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddVariable(symbols.NewVariableBuilder("CLOCK_VIRTUAL", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).AddFunction(symbols.NewFunctionBuilder("clock_gettime", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").WithArgument(symbols.NewVariableBuilder("type", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/clock.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("DT_BLK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_CHR", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_DIR", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_FIFO", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_LNK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_REG", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_SOCK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_UNKNOWN", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("DT_WHT", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("USE_DARWIN_INODE64", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_dirent", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_fileno", symbols.NewTypeBuilder("Ino_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_off", symbols.NewTypeBuilder("Off_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_reclen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_type", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", symbols.NewBaseTypeBuilder("char", "std::os::posix").IsCollectionWithSize(4).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad0", symbols.NewBaseTypeBuilder("char", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_namelen", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("d_pad1", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char", "std::os::posix").IsCollectionWithSize(1024).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithStructMember("name", symbols.NewBaseTypeBuilder("char", "std::os::posix").IsUnsizedCollection().Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Mode_t", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::posix").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("DIRPtr", "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rmdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mkdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode_t", symbols.NewBaseTypeBuilder("ushort", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("chdir", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getcwd", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pwd", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("len", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pipe", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("pipes", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").IsCollectionWithSize(2).Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("access", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeBuilder("Posix_dirent*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("opendir", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("closedir", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readdir", symbols.NewTypeBuilder("Posix_dirent*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("DIRPtr", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("_SC_PAGESIZE", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("environ", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/general.c3").Build()).AddFunction(symbols.NewFunctionBuilder("sysconf", symbols.NewTypeBuilder("CLong", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/general.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/general.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddFunction(symbols.NewFunctionBuilder("posix_memalign", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").WithArgument(symbols.NewVariableBuilder("memptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("MADV_DONTNEED", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MADV_NORMAL", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MADV_RANDOM", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MADV_SEQUENTIAL", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MADV_WILLNEED", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_ANONYMOUS", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_FAILED", symbols.NewTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_FILE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_PRIVATE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAP_SHARED", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("PROT_EXEC", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("PROT_NONE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("PROT_READ", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddVariable(symbols.NewVariableBuilder("PROT_WRITE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).AddFunction(symbols.NewFunctionBuilder("mmap", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#5", symbols.NewTypeBuilder("Off_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("munmap", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mprotect", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("madvise", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getpagesize", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/mman.c3").WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("WNOHANG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WUNTRACES", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__WCOREFLAG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("__W_CONTINUED", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("backtrace_jmpbuf", symbols.NewTypeBuilder("JmpBuf", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Posix_spawn_file_actions_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__allocated", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__used", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__actions", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("__pad", symbols.NewBaseTypeBuilder("int", "std::os::posix").IsCollectionWithSize(16).Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Posix_spawnattr_t", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithStructMember("opaque", symbols.NewBaseTypeBuilder("void*", "std::os::posix").IsCollectionWithSize(42).Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("BacktraceFn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("fn CInt(void** buffer, CInt size)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_addclose", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_addclose").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_adddup2", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_adddup2").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_destroy", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_destroy").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawn_file_actions_init", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawn_file_actions_init").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("spawnp", "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithResolvesTo("posix_spawnp").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_addclose", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn_file_actions_adddup2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("newfd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("get_nprocs_conf", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawnp", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", symbols.NewTypeBuilder("Posix_spawnattr_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("posix_spawn", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file", symbols.NewBaseTypeBuilder("char*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("file_actions", symbols.NewTypeBuilder("Posix_spawn_file_actions_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("attrp", symbols.NewTypeBuilder("Posix_spawnattr_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("argv", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("envp", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getpid", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("kill", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitpid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("pid", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stat_loc", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("raise", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace_symbols_fd", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fd", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wEXITSTATUS", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wTERMSIG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wSTOPSIG", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFEXITED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSIGNALED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFSTOPPED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wIFCONTINUED", symbols.NewBaseTypeBuilder("bool", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wWCOREDUMP", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("status", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_EXITCODE", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("ret", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("w_STOPCODE", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("backtrace", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_ERRORCHECK", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_NORMAL", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddVariable(symbols.NewVariableBuilder("PTHREAD_MUTEX_RECURSIVE", symbols.NewTypeBuilder("", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).AddDef(symbols.NewDefBuilder("PosixThreadFn", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithResolvesTo("fn void*(void*)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_t", "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_create", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cancel", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_t*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_detach", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_equal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("this", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_exit", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_join", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_kill", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("sig", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_once", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_once_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_self", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcancelstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("state", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldstate", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setcanceltype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("oldtype", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_testcancel", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getinheritsched", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedparam", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_sched_param*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getschedpolicy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getscope", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstacksize", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getstackaddr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_getdetachstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setinheritsched", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedparam", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_sched_param*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setschedpolicy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setscope", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstacksize", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("usz", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setstackaddr", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_attr_setdetachstate", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_attr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprioceiling", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_getprotocol", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_gettype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprioceiling", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_setprotocol", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutexattr_settype", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_mutexattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_lock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_trylock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_mutex_unlock", symbols.NewTypeBuilder("Errno", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_condattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_broadcast", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_condattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_signal", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_timedwait", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("TimeSpec*", "libc").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cond_wait", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_cond_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_mutex_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_rdlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_tryrdlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_trywrlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_unlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlock_wrlock", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlock_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_destroy", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_getpshared", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt*", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_init", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_rwlockattr_setpshared", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_rwlockattr_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_create", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_key_t*", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_key_delete", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_getspecific", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_setspecific", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Pthread_key_t", "std::thread::os").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("value_ptr", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_atfork", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("prepare", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("parent", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("child", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_pop", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("execute", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pthread_cleanup_push", symbols.NewBaseTypeBuilder("void", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithArgument(symbols.NewVariableBuilder("routine", symbols.NewTypeBuilder("PosixThreadFn", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithArgument(symbols.NewVariableBuilder("routine_arg", symbols.NewBaseTypeBuilder("void*", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sched_yield", symbols.NewBaseTypeBuilder("int", "std::os::posix").Build(), "std::os::posix", "<stdlib-path>/os/posix/threads.c3").WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddDistinct(symbols.NewDistinctBuilder("Pthread_attr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::thread::os").IsCollectionWithSize(7).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_cond_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::thread::os").IsCollectionWithSize(6).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_condattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_key_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_mutex_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::thread::os").IsCollectionWithSize(5).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_mutexattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_once_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_rwlock_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::thread::os").IsCollectionWithSize(7).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_rwlockattr_t", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Pthread_sched_param", "std::thread::os", "<stdlib-path>/os/posix/threads.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build()).WithoutSourceCode().Build())

	// Define module std::os::process
	module = moduleCollection["std::os::process"]
	module.AddVariable(symbols.NewVariableBuilder("EMPTY_ENVIRONMENT", symbols.NewTypeBuilder("ZString[1]", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).AddStruct(symbols.NewStructBuilder("SubProcess", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdin_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stdout_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("stderr_file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("hEventError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("child", symbols.NewTypeBuilder("Pid_t", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("return_status", symbols.NewBaseTypeBuilder("int", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("is_alive", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddBitstruct(symbols.NewBitstructBuilder("SubProcessOptions", symbols.NewBaseTypeBuilder("int", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("combined_stdout_stderr", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("inherit_environment", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("read_async", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("no_window", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("search_user_path", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithStructMember("inherit_stdio", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::os::process", "<stdlib-path>/os/subprocess.c3").WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_CREATE_PIPE", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDIN", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDOUT", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_OPEN_STDERR", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_START_PROCESS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("FAILED_TO_INITIALIZE_ACTIONS", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_JOIN_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("PROCESS_TERMINATION_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("READ_FAILED", "std::os::process", "../../../assets/c3c/lib/std/os/subprocess.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("create_named_pipe_helper", symbols.NewBaseTypeBuilder("void", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("rd", symbols.NewBaseTypeBuilder("void*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("wr", symbols.NewBaseTypeBuilder("void*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("convert_command_line_win32", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeBuilder("SubProcess", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!environment || !options.inherit_environment").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_command_line", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "command_line.len > 0").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("copy_env", symbols.NewTypeBuilder("ZString*", "std::core::string").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("mem", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("execute_stdout_to_buffer", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::os::process").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewTypeBuilder("SubProcess", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("command_line", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("options", symbols.NewTypeBuilder("SubProcessOptions", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithArgument(symbols.NewVariableBuilder("environment", symbols.NewTypeBuilder("String", "std::core::string").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgDefault("{}").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!environment || !options.inherit_environment").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stdout", symbols.NewTypeBuilder("File", "std::io").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stderr", symbols.NewTypeBuilder("File", "std::io").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewTypeBuilder("CInt", "std::core::cinterop").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("bool", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminate", symbols.NewBaseTypeBuilder("void", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_win32", symbols.NewBaseTypeBuilder("usz", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("event_handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "size <= Win32_DWORD.max").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_from_file_posix", symbols.NewBaseTypeBuilder("usz", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithArgument(symbols.NewVariableBuilder("file", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stdout", symbols.NewBaseTypeBuilder("usz", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("read_stderr", symbols.NewBaseTypeBuilder("usz", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_running", symbols.NewBaseTypeBuilder("bool", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("write_to_stdin", symbols.NewBaseTypeBuilder("usz", "std::os::process").IsOptional().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").WithTypeIdentifier("SubProcess").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("SubProcess*", "std::os::process").Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewBaseTypeBuilder("char", "std::os::process").IsUnsizedCollection().Build(), "std::os::process", "<stdlib-path>/os/subprocess.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("getSystemTimeAsFileTime", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Win32_FILETIME*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("queryPerformanceFrequency", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").WithArgument(symbols.NewVariableBuilder("lpFrequency", symbols.NewTypeBuilder("Win32_LARGE_INTEGER*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("queryPerformanceCounter", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").WithArgument(symbols.NewVariableBuilder("lpPerformanceCount", symbols.NewTypeBuilder("Win32_LARGE_INTEGER*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/clock.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ARCHIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_COMPRESSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_EA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_ENCRYPTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_HIDDEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_INTEGRITY_STREAM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NORMAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_NO_SCRUB_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_OFFLINE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_PINNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_READONLY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_RECALL_ON_OPEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_REPARSE_POINT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SPARSE_FILE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_SYSTEM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_TEMPORARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_UNPINNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_ATTRIBUTE_VIRTUAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("GENERIC_WRITE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("MAX_PATH", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPEN_EXISTING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_FILE_ATTRIBUTE_DATA", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftCreationTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastAccessTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("ftLastWriteTime", symbols.NewTypeBuilder("Win32_FILETIME", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("nFileSizeLow", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved0", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwReserved1", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cFileName", symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").IsCollectionWithSize(260).Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("cAlternateFileName", symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").IsCollectionWithSize(14).Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwFileType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("dwCreatorType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithStructMember("wFinderFlags", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WIN32_FIND_DATAW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_GET_FILEEX_INFO_LEVELS", "", "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithEnumerator(symbols.NewEnumeratorBuilder("STANDARD", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAX", "<stdlib-path>/os/win32/files.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_GET_FILEEX_INFO_LEVELS").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("closeHandle", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createPipe", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hReadPipe", symbols.NewTypeBuilder("Win32_PHANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hWritePipe", symbols.NewTypeBuilder("Win32_PHANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getFileAttributesExW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_GET_FILEEX_INFO_LEVELS", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pathFileExistsW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getTempPathW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("nBufferLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setCurrentDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Win32_LPCTSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("removeDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createDirectoryW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpPathName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpPipeAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteFileW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findFirstFileW", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", symbols.NewTypeBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findNextFileW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFindFileData", symbols.NewTypeBuilder("Win32_LPWIN32_FIND_DATAW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("findClose", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFindFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createFileA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("lpFileName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwDesiredAccess", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwShareMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationDisposition", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlagsAndAttributes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("hTemplateFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("readFile", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("nNumberOfBytesToRead", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesRead", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", symbols.NewTypeBuilder("Win32_LPOVERLAPPED", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wgetcwd", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("buffer", symbols.NewTypeBuilder("Char16*", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxlen", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wcslen", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("str", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_open_osfhandle", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("osfhandle", symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_get_osfhandle", symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_fdopen", symbols.NewTypeBuilder("CFile", "libc").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("fd", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_access", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("ZString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_waccess", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("path", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("mode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_wfullpath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").WithArgument(symbols.NewVariableBuilder("absPath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("relPath", symbols.NewTypeBuilder("WString", "std::core::string").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxLength", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/files.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("createSolidBrush", symbols.NewTypeBuilder("Win32_HBRUSH", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setTextColor", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_COLORREF", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setBkMode", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("textOut", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/gdi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ERROR_ACCESS_DENIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ADAP_HDW_ERR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_ASSIGNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ALREADY_EXISTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ARENA_TRASHED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ATOMIC_LOCKS_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_AUTODATASEG_EXCEEDS_64K", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ARGUMENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_COMMAND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DEV_TYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_DRIVER_LEVEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_ENVIRONMENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_EXE_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FILE_TYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_LENGTH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NETPATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_NET_RESP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PATHNAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_PIPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_REM_ADAP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_THREADID_ADDR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BAD_UNIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BROKEN_PIPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUFFER_OVERFLOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_BUSY_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CALL_NOT_IMPLEMENTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANCEL_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_COPY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CANNOT_MAKE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHECKOUT_REQUIRED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CHILD_NOT_COMPLETE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_COMMITMENT_LIMIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CRC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_CURRENT_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DELETE_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_FEATURE_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEVICE_SUPPORT_IN_PROGRESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DEV_NOT_EXIST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECTORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIRECT_ACCESS_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_EMPTY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DIR_NOT_ROOT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISCARDED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_CHANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_RESOURCES_EXHAUSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DISK_TOO_FRAGMENTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DRIVE_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUPLICATE_PRIVILEGES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DUP_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_DYNLINK_FROM_INVALID_RING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_DIDNT_FIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EAS_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_FILE_CORRUPT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_LIST_INCONSISTENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EA_TABLE_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ENVVAR_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXCL_SEM_ALREADY_OWNED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MACHINE_TYPE_MISMATCH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_EXE_MARKED_INVALID", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FAIL_I24", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILENAME_EXCED_RANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_CHECKED_OUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_EXISTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FILE_TOO_LARGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_FORMS_AUTH_REQUIRED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_GEN_FAILURE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_DISK_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_HANDLE_EOF", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INFLOOP_IN_RELOC_CHAIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INSUFFICIENT_BUFFER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ACCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ADDRESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_AT_INTERRUPT_TIME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_BLOCK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_CATEGORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EA_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EVENT_COUNT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXCEPTION_HANDLER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_EXE_SIGNATURE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FLAG_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_FUNCTION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LEVEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LIST_FORMAT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_LOCK_RANGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MINALLOCSIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_MODULETYPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_NAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_OPLOCK_PROTOCOL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_ORDINAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PARAMETER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_PASSWORD", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGDPL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SEGMENT_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_SIGNAL_NUMBER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STACKSEG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_STARTING_CODESEG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TARGET_HANDLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_TOKEN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_INVALID_VERIFY_SWITCH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IOPL_NOT_ENABLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_INCOMPLETE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IO_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_PATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_JOIN_TARGET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_PATH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_IS_SUBST_TARGET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_ITERATED_DATA_EXCEEDS_64K", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_JOIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_JOIN_TO_SUBST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LABEL_TOO_LONG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_FAILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_LOCK_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MAX_THRDS_REACHED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_META_EXPANSION_TOO_LONG", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MOD_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MORE_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_MR_MID_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NEGATIVE_SEEK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NESTING_NOT_ALLOWED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETNAME_DELETED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_ACCESS_DENIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NETWORK_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NET_WRITE_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOTIFICATION_GUID_ALREADY_DEFINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ALLOWED_ON_SYSTEM_FILE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_DOS_DISK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_ENOUGH_MEMORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_JOINED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_LOCKED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_OWNER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_READY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SAME_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUBSTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NOT_SUPPORTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_DATA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_FILES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_ITEMS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_MORE_SEARCH_HANDLES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_PROC_SLOTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_RANGES_PROCESSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SIGNAL_SENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_SPOOL_SPACE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_NO_VOLUME_LABEL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPEN_FAILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OPLOCK_NOT_GRANTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUTOFMEMORY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_PAPER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_OUT_OF_STRUCTURES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PARTIAL_COPY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PATH_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_BUSY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_LOCAL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PIPE_NOT_CONNECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINTQ_FULL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PRINT_CANCELLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_PROC_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_READ_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REDIR_PAUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RELOC_CHAIN_XEEDS_SEGLIM", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REM_NOT_LIST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_REQ_NOT_ACCEP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2SEG_MUST_BE_MOVABLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_RING2_STACK_IN_USE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SAME_DRIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SCOPE_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECTOR_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SECURITY_STREAM_IS_INCONSISTENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEEK_ON_DEVICE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_IS_SET", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_NOT_FOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_OWNER_DIED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_TIMEOUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SEM_USER_LIMIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_BUFFER_EXCEEDED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_PAUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHARING_VIOLATION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_PENDING", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SIGNAL_REFUSED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_JOIN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SUBST_TO_SUBST", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_SYSTEM_TRACE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_THREAD_1_INACTIVE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TIMEOUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_CMDS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MODULES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_MUXWAITERS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_NAMES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_OPEN_FILES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_POSTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEMAPHORES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SEM_REQUESTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_SESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_TOO_MANY_TCBS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNDEFINED_SCOPE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_UNEXP_NET_ERR", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VC_DISCONNECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_DELETED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_VIRUS_INFECTED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WAIT_NO_CHILDREN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_FAULT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRITE_PROTECT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("ERROR_WRONG_DISK", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_TIMEOUT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").Build()).AddFunction(symbols.NewFunctionBuilder("getLastError", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/general.c3").WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddFunction(symbols.NewFunctionBuilder("_aligned_malloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_realloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_recalloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("num", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_free", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_msize", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_malloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_realloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_aligned_offset_recalloc", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("num", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("alignment", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithArgument(symbols.NewVariableBuilder("offset", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("_msize", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").WithArgument(symbols.NewVariableBuilder("memblock", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/heap.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddDef(symbols.NewDefBuilder("Win32_PDLL_DIRECTORY_COOKIE", "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DLL_DIRECTORY_COOKIE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_DLL_DIRECTORY_COOKIE", "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadLibraryA", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpLibFileName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadLibraryW", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpLibFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadLibraryExA", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpLibFileName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadLibraryExW", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpLibFileName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freeLibrary", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hLibModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("freeLibraryAndExitThread", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hLibModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwExitCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", symbols.NewTypeBuilder("Win32_LPSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleFileNameW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpFilename", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleA", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleW", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleExA", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("phModule", symbols.NewTypeBuilder("Win32_HMODULE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleHandleExW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpModuleName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("phModule", symbols.NewTypeBuilder("Win32_HMODULE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("disableThreadLibraryCalls", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hLibModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getProcAddress", symbols.NewTypeBuilder("Win32_FARPROC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("addDllDirectory", symbols.NewTypeBuilder("Win32_DLL_DIRECTORY_COOKIE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("newDirectory", symbols.NewTypeBuilder("Win32_PCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("removeDllDirectory", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("cookie", symbols.NewTypeBuilder("Win32_DLL_DIRECTORY_COOKIE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setDefaultDllDirectories", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").WithArgument(symbols.NewVariableBuilder("directoryFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/libloaderapi.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddEnum(symbols.NewEnumBuilder("Win32_AllocationType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("MEM_COMMIT", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_RESERVE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_RESET", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_RESET_UNDO", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_LARGE_PAGES", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_PHYSICAL", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_TOP_DOWN", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_WRITE_WATCH", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_AllocationType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_FreeType", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("MEM_DECOMMIT", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_FreeType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_RELEASE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_FreeType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_COALESCE_PLACEHOLDERS", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_FreeType").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MEM_PRESERVE_PLACEHOLDER", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_FreeType").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_Protect", "Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_EXECUTE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_EXECUTE_READ", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_EXECUTE_READWRITE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_EXECUTE_WRITECOPY", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_NOACCESS", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_READONLY", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_READWRITE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_WRITECOPY", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_TARGETS_INVALID", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_TARGETS_NO_UPDATE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_GUARD", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_NOCACHE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PAGE_WRITECOMBINE", "<stdlib-path>/os/win32/memoryapi.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_Protect").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("virtualAlloc", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithArgument(symbols.NewVariableBuilder("lpAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwSize", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("flAllocationType", symbols.NewTypeBuilder("Win32_AllocationType", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("flProtect", symbols.NewTypeBuilder("Win32_Protect", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("virtualAlloc2", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithArgument(symbols.NewVariableBuilder("process", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("baseAddress", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocationType", symbols.NewTypeBuilder("Win32_AllocationType", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("pageProtection", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("extendedParameters", symbols.NewTypeBuilder("Win32_MEM_EXTENDED_PARAMETER*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("parameterCount", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("virtualFree", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithArgument(symbols.NewVariableBuilder("lpAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwSize", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFreeType", symbols.NewTypeBuilder("Win32_FreeType", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("virtualProtect", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithArgument(symbols.NewVariableBuilder("lpAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwSize", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("flNewProtect", symbols.NewTypeBuilder("Win32_Protect", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpflOldProtect", symbols.NewTypeBuilder("Win32_Protect*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("allocation_granularity", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/memoryapi.c3").WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ACCESS_SYSTEM_SECURITY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_NO_WINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_PROTECTED_PROCESS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("CREATE_UNICODE_ENVIRONMENT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_FIRST_PIPE_INSTANCE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_OVERLAPPED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("FILE_FLAG_WRITE_THROUGH", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_INHERIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("HANDLE_FLAG_PROTECT_FROM_CLOSE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_AMD64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_ARM64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_I386", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_IA64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_TARGET_HOST", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("IMAGE_FILE_MACHINE_UNKNOWN", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("INFINITE", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCEPT_REMOTE_CLIENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_DUPLEX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_INBOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_ACCESS_OUTBOUND", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_NOWAIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_BYTE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_READMODE_MESSAGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_REJECT_REMOTE_CLIENTS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_BYTE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_TYPE_MESSAGE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("PIPE_WAIT", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("STARTF_USESTDHANDLES", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_CASE_INSENSITIVE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_DEFERRED_LOADS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_IGNORE_CVREC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_ANYTHING", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_LOAD_LINES", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_NO_CPP", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_OMAP_FIND_NEAREST", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYMOPT_UNDNAME", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("UNDNAME_COMPLETE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_ABANDONED", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_FAILED", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_IO_COMPLETION", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WAIT_OBJECT_0", symbols.NewTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_DAC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("WRITE_OWNER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddVariable(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).AddStruct(symbols.NewStructBuilder("Symbol", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("sym", symbols.NewTypeBuilder("Win32_SYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithStructMember("buffer", symbols.NewBaseTypeBuilder("char", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INIT_ONCE_FN", "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithResolvesTo("fn Win32_BOOL(Win32_INIT_ONCE* initOnce, void* parameter, void** context)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initializeCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("deleteCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createMutex", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("releaseMutex", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enterCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("leaveCriticalSection", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tryEnterCriticalSection", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initializeSRWLock", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquireSRWLockExclusive", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("acquireSRWLockShared", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("releaseSRWLockExclusive", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("releaseSRWLockShared", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tryAcquireSRWLockExclusive", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tryAcquireSRWLockShared", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initializeConditionVariable", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("conditionVariable", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wakeConditionVariable", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("conditionVariable", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wakeAllConditionVariable", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("conditionVariable", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleepConditionVariableCS", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("conditionVariable", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("section", symbols.NewTypeBuilder("Win32_CRITICAL_SECTION*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleepConditionVariableSRW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("conditionVariable", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lock", symbols.NewTypeBuilder("Win32_SRWLOCK*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("initOnceExecuteOnce", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("initOnce", symbols.NewTypeBuilder("Win32_INIT_ONCE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("initFn", symbols.NewTypeBuilder("Win32_INIT_ONCE_FN", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("parameter", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForSingleObject", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hHandle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForSingleObjectEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hHandle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bAlertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForMultipleObjects", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("nCount", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpHandles", symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWaitAll", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("waitForMultipleObjectsEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("nCount", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpHandles", symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWaitAll", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMilliseconds", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bAlertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resetEvent", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("event", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEvent", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("interlockedCompareExchange", symbols.NewBaseTypeBuilder("long", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dest", symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exchange", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("comperand", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleepEx", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("alertable", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("attributes", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stack", symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_id", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeThread", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("exit_code", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getExitCodeProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpExitCode", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exitThread", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("dwExitCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("terminateProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("uExitCode", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcessId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getCurrentThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setHandleInformation", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hObject", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwMask", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createEventA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpEventAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bManualReset", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInitialState", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createProcessW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpApplicationName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCommandLine", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpThreadAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bInheritHandles", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwCreationFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpEnvironment", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCurrentDirectory", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpStartupInfo", symbols.NewTypeBuilder("Win32_LPSTARTUPINFOW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpProcessInformation", symbols.NewTypeBuilder("Win32_LPPROCESS_INFORMATION", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createNamedPipeA", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwOpenMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwPipeMode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nMaxInstances", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nOutBufferSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nInBufferSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nDefaultTimeOut", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpSecurityAttributes", symbols.NewTypeBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getOverlappedResult", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpOverlapped", symbols.NewTypeBuilder("Win32_LPOVERLAPPED", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpNumberOfBytesTransferred", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("bWait", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getEnvironmentVariableW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBuffer", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setEnvironmentVariableW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpValue", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getSystemInfo", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("lpSystemInfo", symbols.NewTypeBuilder("Win32_LPSYSTEM_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("enumProcessModules", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lphModule", symbols.NewTypeBuilder("Win32_HMODULE*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpcbNeeded", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleInformation", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpmodinfo", symbols.NewTypeBuilder("Win32_LPMODULEINFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symAddrIncludeInlineTrace", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symQueryInlineTrace", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startContext", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("startRetAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curContext", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("curFrameIndex", symbols.NewTypeBuilder("Win32_LPDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromInlineContext", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_PDWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("Win32_PSYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromInlineContext", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("inlineContext", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwModuleBaseAddress", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line64", symbols.NewTypeBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlWalkFrameChain", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_PVOID*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symInitialize", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("userSearchPath", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("fInvadeProcess", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symCleanup", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symLoadModuleEx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hFile", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("imageName", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleName", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("baseOfDll", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dllSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("data", symbols.NewTypeBuilder("Win32_PMODLOAD_DATA", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stackWalk64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("machineType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("stackFrame", symbols.NewTypeBuilder("Win32_LPSTACKFRAME64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("contextRecord", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("readMemoryRoutine", symbols.NewTypeBuilder("Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("functionTableAccessRoutine", symbols.NewTypeBuilder("Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("getModuleBaseRoutine", symbols.NewTypeBuilder("Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("translateAddress", symbols.NewTypeBuilder("Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureContext", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("contextRecord", symbols.NewTypeBuilder("Win32_PCONTEXT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFunctionTableAccess64", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("addrBase", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleBase64", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getModuleBaseNameA", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("hModule", symbols.NewTypeBuilder("Win32_HMODULE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpBaseName", symbols.NewTypeBuilder("Win32_LPSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("nSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symSetOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("symOptions", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("imageNtHeader", symbols.NewTypeBuilder("Win32_PIMAGE_NT_HEADERS", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("base", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unDecorateSymbolName", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("Win32_PCSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("outputString", symbols.NewTypeBuilder("Win32_PSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("maxStringLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symFromAddr", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("displacement", symbols.NewTypeBuilder("Win32_PDWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("symbol", symbols.NewTypeBuilder("Win32_PSYMBOL_INFO", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetLineFromAddr64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("pdwDisplacement", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("line", symbols.NewTypeBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("rtlCaptureStackBackTrace", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("framesToSkip", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("framesToCapture", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTrace", symbols.NewTypeBuilder("Win32_PVOID*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backTraceHash", symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symGetModuleInfo64", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("qwAddr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("moduleInfo", symbols.NewTypeBuilder("Win32_PIMAGEHLP_MODULE64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("load_modules", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("symbolize_backtrace", symbols.NewTypeBuilder("BacktraceList", "std::os::backtrace").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("backtrace", symbols.NewBaseTypeBuilder("void*", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("resolve_backtrace", symbols.NewTypeBuilder("Backtrace", "std::os::backtrace").IsOptional().Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("addr", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithArgument(symbols.NewVariableBuilder("process", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/process.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FOLDERID_DESKTOP", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_DOCUMENTS", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_DOWNLOADS", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_MUSIC", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_PICTURES", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_PROFILE", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_SAVED_GAMES", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_SCREENSHOTS", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_TEMPLATES", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOLDERID_VIDEOS", symbols.NewTypeBuilder("Win32_KNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_KNOWNFOLDERID", "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("Win32_GUID", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_REFKNOWNFOLDERID", "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("Win32_KNOWNFOLDERID*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("shGetKnownFolderPath", symbols.NewTypeBuilder("Win32_HRESULT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").WithArgument(symbols.NewVariableBuilder("rfid", symbols.NewTypeBuilder("Win32_REFKNOWNFOLDERID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).WithArgument(symbols.NewVariableBuilder("hToken", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ppszPath", symbols.NewTypeBuilder("Win32_PWSTR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/shell32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("ARM64_MAX_BREAKPOINTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("ARM64_MAX_WATCHPOINTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_ALL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_CONTROL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_DEBUG_REGISTERS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FLOATING_POINT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_FULL", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_INTEGER", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("CONTEXT_AMD64_SEGMENTS", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE_VALUE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_ADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segment", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mode", symbols.NewTypeBuilder("Win32_ADDRESS_MODE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_AMD64_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p1Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p2Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p3Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p4Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p5Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("p6Home", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segCs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segDs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segEs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segFs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segGs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("segSs", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("eFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr0", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr1", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr2", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr3", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr6", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dr7", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rax", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rcx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbx", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rbp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rsi", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rdi", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r8", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r9", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r10", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r11", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r12", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r13", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r14", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("r15", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("rip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fltSave", symbols.NewTypeBuilder("Win32_XMM_SAVE_AREA32", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("d", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("header", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("legacy", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm0", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm1", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm2", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm3", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm4", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm5", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm6", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm7", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm8", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm9", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm10", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm11", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm12", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm13", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm14", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmm15", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("s", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorRegister", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").IsCollectionWithSize(26).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("vectorControl", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("debugControl", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchToRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastBranchFromRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionToRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lastExceptionFromRip", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("contextFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cpsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x0", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x1", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x2", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x3", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x4", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x5", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x6", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x7", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x8", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x9", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x10", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x11", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x12", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x13", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x14", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x15", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x16", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x17", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x18", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x19", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x20", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x21", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x22", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x23", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x24", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x25", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x26", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x27", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x28", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("x", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsCollectionWithSize(31).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sp", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pc", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("v", symbols.NewTypeBuilder("Win32_ARM64_NT_NEON128", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpcr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fpsr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bcr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bvr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wcr", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wvr", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_ARM64_NT_NEON128", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_FILETIME", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwLowDateTime", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwHighDateTime", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_GUID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data1", symbols.NewTypeBuilder("CULong", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data2", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data3", symbols.NewTypeBuilder("CUShort", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data4", symbols.NewBaseTypeBuilder("char", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("key", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumber", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileName", symbols.NewTypeBuilder("Win32_PCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfImage", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numSyms", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("symType", symbols.NewTypeBuilder("Win32_SYM_TYPE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("moduleName", symbols.NewTypeBuilder("Win32_CHAR", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageName", symbols.NewTypeBuilder("Win32_CHAR", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedImageName", symbols.NewTypeBuilder("Win32_CHAR", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loadedPdbName", symbols.NewTypeBuilder("Win32_CHAR", "std::os::win32").IsCollectionWithSize(256).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVSig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cVData", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbSig70", symbols.NewTypeBuilder("Win32_GUID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbAge", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pdbUnmatched", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dbgUnmatched", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lineNumbers", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("globalSymbols", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeInfo", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sourceIndexed", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("publics", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machineType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_DATA_DIRECTORY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtualAddress", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("machine", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSections", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("timeDateStamp", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointerToSymbolTable", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfSymbols", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfOptionalHeader", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("characteristics", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("signature", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileHeader", symbols.NewTypeBuilder("Win32_IMAGE_FILE_HEADER", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("optionalHeader", symbols.NewTypeBuilder("Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_IMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("magic", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorLinkerVersion", symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorLinkerVersion", symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfInitializedData", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfUninitializedData", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addressOfEntryPoint", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("baseOfCode", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("imageBase", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sectionAlignment", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("fileAlignment", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorOperatingSystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorOperatingSystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorImageVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorImageVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("majorSubsystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("minorSubsystemVersion", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32VersionValue", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeaders", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("checkSum", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("subsystem", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dllCharacteristics", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackReserve", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStackCommit", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapReserve", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfHeapCommit", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("loaderFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("numberOfRvaAndSizes", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataDirectory", symbols.NewTypeBuilder("Win32_IMAGE_DATA_DIRECTORY", "std::os::win32").IsCollectionWithSize(16).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_KDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thread", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackStack", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("thCallbackBStore", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nextCallback", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("framePointer", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiCallUserMode", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("keUserCallbackDispatcher", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("systemRangeStart", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kiUserExceptionDispatcher", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackBase", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("stackLimit", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buildVersion", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTableSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubFunctionTable", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubOffset", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("retpolineStubSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved0", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_LARGE_INTEGER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lowPart", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("highPart", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("quadPart", symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_M128A", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("low", symbols.NewTypeBuilder("Win32_ULONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("high", symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("ssig", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("data", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpBaseOfDll", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfImage", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("entryPoint", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_OVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internal", symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("internalHigh", symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offset", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("offsetHigh", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("pointer", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hEvent", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_PROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hProcess", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hThread", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwThreadId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nLength", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpSecurityDescriptor", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("bInheritHandle", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrPC", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrReturn", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrFrame", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrStack", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("addrBStore", symbols.NewTypeBuilder("Win32_ADDRESS64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("funcTableEntry", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("params", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsCollectionWithSize(4).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("far", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("virtual", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").IsCollectionWithSize(3).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("kdHelp", symbols.NewTypeBuilder("Win32_KDHELP64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("win32_StartupInfo", symbols.NewTypeBuilder("Win32_STARTUPINFOW", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpAttributeList", symbols.NewTypeBuilder("Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", symbols.NewTypeBuilder("Win32_LPBYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_STARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cb", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpDesktop", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpTitle", symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwY", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwXCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwYCountChars", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFillAttribute", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wShowWindow", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("cbReserved2", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpReserved2", symbols.NewTypeBuilder("Win32_LPBYTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdInput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdOutput", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("hStdError", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("sizeOfStruct", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("typeIndex", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").IsCollectionWithSize(2).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("index", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("modBase", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("flags", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("value", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("address", symbols.NewTypeBuilder("Win32_ULONG64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("register", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("scope", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tag", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("nameLen", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maxNameLen", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("name", symbols.NewTypeBuilder("Win32_CHAR", "std::os::win32").IsCollectionWithSize(1).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwOemId", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorArchitecture", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wReserved", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwPageSize", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMinimumApplicationAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("lpMaximumApplicationAddress", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwActiveProcessorMask", symbols.NewTypeBuilder("Win32_DWORD_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwNumberOfProcessors", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwProcessorType", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dwAllocationGranularity", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorLevel", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("wProcessorRevision", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_UNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("length", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("maximum_length", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("buffer", symbols.NewTypeBuilder("Win32_PWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_XMM_SAVE_AREA32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("controlWord", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("statusWord", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("tagWord", symbols.NewTypeBuilder("Win32_UCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved1", symbols.NewTypeBuilder("Win32_UCHAR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorOpcode", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorOffset", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("errorSelector", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved2", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataOffset", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("dataSelector", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved3", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("mxCsr_Mask", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("floatRegisters", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("xmmRegisters", symbols.NewTypeBuilder("Win32_M128A", "std::os::win32").IsCollectionWithSize(16).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithStructMember("reserved4", symbols.NewTypeBuilder("Win32_UCHAR", "std::os::win32").IsCollectionWithSize(96).Build(), "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_ALL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_ALL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_CONTROL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_CONTROL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("CONTEXT_FULL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("CONTEXT_AMD64_FULL").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_BYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("CChar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("CChar", "std::core::cinterop").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_COLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_CONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_AMD64_CONTEXT", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_DWORD_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_FARPROC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_FLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("float", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HACCEL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBITMAP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HBRUSH", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCOLORSPACE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONV", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCONVLIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HCURSOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDDEDATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDESK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDROP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HDWP", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HFONT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGDIOBJ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HGLOBAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HHOOK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HICON", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HINSTANCE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HKL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HLOCAL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMENU", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMETAFILE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMODULE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HMONITOR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPALETTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HPEN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRGN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HRSRC", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HSZ", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWINSTA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_HWND", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("short", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ichar", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_INT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LANGID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LCTYPE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LGRPID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("long", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPADDRESS64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ADDRESS64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOL*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCOLORREF", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPMODULEINFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MODULEINFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_OVERLAPPED*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PROCESS_INFORMATION*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPROC_THREAD_ATTRIBUTE_LIST", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SECURITY_ATTRIBUTES*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTACKFRAME64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STACKFRAME64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOEXW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STARTUPINFOEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTARTUPINFOW", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_STARTUPINFOW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSYSTEM_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SYSTEM_INFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LRESULT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NTSTATUS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOL", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOL*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBOOLEAN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BOOLEAN*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_BYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCONTEXT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CONTEXT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UNICODE_STRING*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("WString", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORD64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORDLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PDWORDPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_DWORD_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFLOAT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_FLOAT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PFUNCTION_TABLE_ACCESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_PVOID(Win32_HANDLE ahProcess, Win32_DWORD64 addrBase)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PGET_MODULE_BASE_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_DWORD64 address)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HALF_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PHKEY", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HKEY*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_LINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGEHLP_LINE64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGEHLP_MODULE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGEHLP_MODULE64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_FILE_HEADER", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_FILE_HEADER*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_NT_HEADERS", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_NT_HEADERS*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PIMAGE_OPTIONAL_HEADER64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_IMAGE_OPTIONAL_HEADER64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("int*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT16*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT8*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_INT_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PKDHELP64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_KDHELP64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLCID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PDWORD", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONGLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PLONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONG_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMODLOAD_DATA", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MODLOAD_DATA*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_SIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("iptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_POINTER_UNSIGNED", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPROCESS_INFORMATION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PROCESS_INFORMATION*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PREAD_PROCESS_MEMORY_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_BOOL(Win32_HANDLE hProcess, Win32_DWORD64 qwBaseAddress, Win32_PVOID lpBuffer, Win32_DWORD nSize, Win32_LPDWORD lpNumberOfBytesRead)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSECURITY_ATTRIBUTES", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SECURITY_ATTRIBUTES*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SHORT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSYMBOL_INFO", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SYMBOL_INFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_TBYTE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_TCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTRANSLATE_ADDRESS_ROUTINE64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesTo("fn Win32_DWORD64(Win32_HANDLE hProcess, Win32_HANDLE hThread, Win32_LPADDRESS64 lpaddr)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PTSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPWSTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUHALFPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UHALF_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT16*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT8*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUINTPTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG32*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG64*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONGLONG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ULONG_PTR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUNICODE_STRING", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UNICODE_STRING*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PUSHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_USHORT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PVOID", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WORD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_QWORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SC_LOCK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SERVICE_STATUS_HANDLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("short", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SOCKET", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_SSIZE_T", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("isz", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TBYTE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_TCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WCHAR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UHALF_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT16", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT8", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_UINT_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uptr", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG32", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("uint", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG64", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONGLONG", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ULONG_PTR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USHORT", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_USN", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_LONGLONG", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WCHAR", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Char16", "std::core::string").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WORD", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WPARAM", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_UINT_PTR", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_CONDITION_VARIABLE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_CRITICAL_SECTION", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::os::win32").IsCollectionWithSize(5).Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_INIT_ONCE", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Win32_SRWLOCK", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_ADDRESS_MODE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1616", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_1632", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_REAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDR_MODE_FLAT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_ADDRESS_MODE").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_SYM_TYPE", "", "std::os::win32", "<stdlib-path>/os/win32/types.c3").WithEnumerator(symbols.NewEnumeratorBuilder("SYM_NONE", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_COFF", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_CV", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_PDB", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_EXPORT", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DEFERRED", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_SYM", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_DIA", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SYM_VIRTUAL", "<stdlib-path>/os/win32/types.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_SYM_TYPE").Build()).Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddStruct(symbols.NewStructBuilder("Win32_COORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("x", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("y", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_FOCUS_EVENT_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("bSetFocus", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_INPUT_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("eventType", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("event", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_KEY_EVENT_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("bKeyDown", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("wRepeatCount", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("wVirtualKeyCode", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("wVirtualScanCode", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("uChar", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwControlKeyState", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MENU_EVENT_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwCommandId", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_MOUSE_EVENT_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwMousePosition", symbols.NewTypeBuilder("Win32_COORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwButtonState", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwControlKeyState", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwEventFlags", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WINDOW_BUFFER_SIZE_RECORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithStructMember("dwSize", symbols.NewTypeBuilder("Win32_COORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PCOORD", "std::os::win32", "<stdlib-path>/os/win32/wincon.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_COORD*", "std::os::win32").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddStruct(symbols.NewStructBuilder("Win32_POINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("x", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("y", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_RECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("left", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("top", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("right", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("bottom", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("cx", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("cy", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SOCKADDR", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("sa_family", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("sa_data", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").IsCollectionWithSize(14).Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WSABUF", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("len", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithStructMember("buf", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPSOCKADDR", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SOCKADDR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSABUF", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSABUF*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPOINT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_POINT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PRECT", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_RECT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSIZE", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SIZE*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PSOCKADDR", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_SOCKADDR*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSABUF", "std::os::win32", "<stdlib-path>/os/win32/windef.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSABUF*", "std::os::win32").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddStruct(symbols.NewStructBuilder("Win32_MEM_EXTENDED_PARAMETER", "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("type", symbols.NewTypeBuilder("Win32_MEM_EXTENDED_PARAMETER_TYPE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("attribute", symbols.NewTypeBuilder("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("nodeNumber", symbols.NewTypeBuilder("Win32_DWORD64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("pointer", symbols.NewTypeBuilder("Win32_PVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("size", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("handle", symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithStructMember("uLong", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMEM_EXTENDED_PARAMETER", "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MEM_EXTENDED_PARAMETER*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMEM_EXTENDED_PARAMETER_TYPE", "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MEM_EXTENDED_PARAMETER_TYPE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE", "Win32_DWORD64", "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithEnumerator(symbols.NewEnumeratorBuilder("NONPAGED", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONPAGED_LARGE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NONPAGED_HUGE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("EC_CODE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_ATTRIBUTE").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Win32_MEM_EXTENDED_PARAMETER_TYPE", "CInt", "std::os::win32", "<stdlib-path>/os/win32/winnt.c3").WithEnumerator(symbols.NewEnumeratorBuilder("INVALID_TYPE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ADDRESS_REQUIREMENTS", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NUMA_NODE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("PARTITION_HANDLE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("USER_PHYSICAL_HANDLE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("ATTRIBUTE_FLAGS", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("IMAGE_MACHINE", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAX", "<stdlib-path>/os/win32/winnt.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("Win32_MEM_EXTENDED_PARAMETER_TYPE").Build()).Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("GWLP_HINSTANCE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_HWNDPARENT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_ID", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_USERDATA", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWLP_WNDPROC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_EXSTYLE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_HINSTANCE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_HWNDPARENT", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_ID", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_STYLE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_USERDATA", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("GWL_WNDPROC", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ABORTRETRYIGNORE", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_CANCELTRYCONTINUE", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONASTERISK", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONERROR", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONEXCLAMATION", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONHAND", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONINFORMATION", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONQUESTION", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONSTOP", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_ICONWARNING", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_OK", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_OKCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_RETRYCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_USERICON", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_YESNO", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("MB_YESNOCANCEL", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_BORDER", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CAPTION", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CHILD", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CHILDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CLIPCHILDREN", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_CLIPSIBLINGS", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_DISABLED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_DLGFRAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_GROUP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_HSCROLL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_ICONIC", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MAXIMIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MAXIMIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MINIMIZE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_MINIMIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_OVERLAPPED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_OVERLAPPEDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_POPUP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_POPUPWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_SIZEBOX", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_SYSMENU", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TABSTOP", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_THICKFRAME", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TILED", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_TILEDWINDOW", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_VISIBLE", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddVariable(symbols.NewVariableBuilder("WS_VSCROLL", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_MSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hwnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("message", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("wParam", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lParam", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("time", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("pt", symbols.NewTypeBuilder("Win32_POINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lPrivate", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_PAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hdc", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fErase", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("rcPaint", symbols.NewTypeBuilder("Win32_RECT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fRestore", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("fIncUpdate", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("rgbReserved", symbols.NewTypeBuilder("Win32_BYTE", "std::os::win32").IsCollectionWithSize(32).Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_WNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbSize", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("style", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpfnWndProc", symbols.NewTypeBuilder("Win32_WNDPROC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbClsExtra", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("cbWndExtra", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hInstance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hIcon", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hCursor", symbols.NewTypeBuilder("Win32_HCURSOR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hbrBackground", symbols.NewTypeBuilder("Win32_HBRUSH", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpszMenuName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("lpszClassName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithStructMember("hIconSm", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ATOM", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("ushort", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_NPWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PMSG", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PPAINTSTRUCT", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_PAINTSTRUCT*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWNDCLASSEXW", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WNDPROC", "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithResolvesTo("fn Win32_LRESULT(Win32_HWND, Win32_UINT, Win32_WPARAM, Win32_LPARAM)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("beginPaint", symbols.NewTypeBuilder("Win32_HDC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_LPPAINTSTRUCT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("callWindowProcW", symbols.NewTypeBuilder("Win32_LRESULT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpPrevWndFunc", symbols.NewTypeBuilder("Win32_WNDPROC", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("msg", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("wParam", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lParam", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("createWindowExW", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#4", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#5", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#6", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#7", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#8", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#9", symbols.NewTypeBuilder("Win32_HMENU", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#10", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#11", symbols.NewTypeBuilder("Win32_LPVOID", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("defWindowProcW", symbols.NewTypeBuilder("Win32_LRESULT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("Win32_WPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("Win32_LPARAM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("dispatchMessage", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpMsg", symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("endPaint", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_LPPAINTSTRUCT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getMessageW", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_LPMSG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#2", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#3", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getUpdateRect", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpRect", symbols.NewTypeBuilder("Win32_LPRECT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("bErase", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongPtrW", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongW", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadCursorW", symbols.NewTypeBuilder("Win32_HCURSOR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("instance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("cursorName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("loadIconW", symbols.NewTypeBuilder("Win32_HICON", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("instance", symbols.NewTypeBuilder("Win32_HINSTANCE", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("iconName", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("messageBoxW", symbols.NewBaseTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpText", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("lpCaption", symbols.NewTypeBuilder("Win32_LPCWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("uType", symbols.NewTypeBuilder("Win32_UINT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("postQuitMessage", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("registerClassExW", symbols.NewTypeBuilder("Win32_ATOM", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_WNDCLASSEXW*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongPtrW", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("Win32_LONG_PTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongW", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("Win32_LONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("showWindow", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("translateMessage", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("lpMsg", symbols.NewTypeBuilder("Win32_MSG*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("updateWindow", symbols.NewTypeBuilder("Win32_BOOL", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("getWindowLongPtr", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("setWindowLongPtr", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").WithArgument(symbols.NewVariableBuilder("hWnd", symbols.NewTypeBuilder("Win32_HWND", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("nIndex", symbols.NewTypeBuilder("CInt", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).WithArgument(symbols.NewVariableBuilder("dwNewLong", symbols.NewTypeBuilder("", "").Build(), "std::os::win32", "<stdlib-path>/os/win32/winuser.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddStruct(symbols.NewStructBuilder("Win32_addrinfo", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_flags", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_family", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_socktype", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_protocol", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("Win32_SOCKADDR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_next", symbols.NewTypeBuilder("Win32_ADDRINFO*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_addrinfoW", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_flags", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_family", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_socktype", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_protocol", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_addrlen", symbols.NewTypeBuilder("Win32_SIZE_T", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_canonname", symbols.NewTypeBuilder("Win32_PWSTR", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_addr", symbols.NewTypeBuilder("Win32_SOCKADDR*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithStructMember("ai_next", symbols.NewTypeBuilder("Win32_addrinfo*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ADDRINFO", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_addrinfo", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ADDRINFOA", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ADDRINFO", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_ADDRINFOW", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_addrinfoW", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PADDRINFOA", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_ADDRINFO*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PADDRINFOW", "std::os::win32", "<stdlib-path>/os/win32/ws2def.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_addrinfoW*", "std::os::win32").Build()).WithoutSourceCode().Build())

	// Define module std::os::win32
	module = moduleCollection["std::os::win32"]
	module.AddVariable(symbols.NewVariableBuilder("FIONBIO", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("FIONREAD", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLERR", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLHUP", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLIN", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLNVAL", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLOUT", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLPRI", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDBAND", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLRDNORM", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRBAND", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("POLLWRNORM", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_BOTH", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_RECEIVE", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SD_SEND", symbols.NewTypeBuilder("", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SIOCATMARK", symbols.NewTypeBuilder("int", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("_SS_PAD1SIZE", symbols.NewTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("_SS_PAD2SIZE", symbols.NewTypeBuilder("usz", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).AddStruct(symbols.NewStructBuilder("Win32_InAddr", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("s_un_b", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("s_un_w", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("s_addr", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SOCKADDR_IN", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("sin_family", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("sin_port", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("sin_addr", symbols.NewTypeBuilder("Win32_InAddr", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("sin_zero", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").IsCollectionWithSize(8).Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_SOCKADDR_STORAGE", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("ss_family", symbols.NewTypeBuilder("Win32_USHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("__ss_pad1", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("__ss_align", symbols.NewTypeBuilder("Win32_INT64", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("__ss_pad2", symbols.NewTypeBuilder("Win32_CHAR*", "std::os::win32").IsUnsizedCollection().Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("Win32_pollfd", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("fd", symbols.NewTypeBuilder("Win32_SOCKET", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("events", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithStructMember("revents", symbols.NewTypeBuilder("Win32_SHORT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPFN_WSARECV", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("fn CInt(\n\tWin32_SOCKET socket,\n\tWin32_LPWSABUF buffers,\n\tWin32_DWORD buffer_count,\n\tWin32_LPDWORD bytes,\n\tWin32_LPDWORD flags,\n\tWin32_LPWSAOVERLAPPED overlapped,\n\tWin32_LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine\n)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPFN_WSARECVFROM", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("fn CInt(\n\tWin32_SOCKET socket,\n\tWin32_LPWSABUF buffers,\n\tWin32_DWORD buffer_count,\n\tWin32_LPDWORD bytes,\n\tWin32_LPDWORD flags,\n\tWin32_SOCKADDR* addr,\n\tWin32_LPINT addr_len,\n\tWin32_LPWSAOVERLAPPED overlapped,\n\tWin32_LPWSAOVERLAPPED_COMPLETION_ROUTINE completion_routine\n)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPFn_ACCEPTEX", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("fn bool(\n\tWin32_SOCKET,\n\tWin32_SOCKET,\n\tWin32_PVOID,\n\tWin32_DWORD,\n\tWin32_DWORD,\n\tWin32_DWORD,\n\tWin32_LPDWORD,\n\tvoid*\n)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPFn_CONNECTEX", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("fn bool(\n\tWin32_SOCKET,\n\tWin32_SOCKADDR*,\n\tWin32_INT,\n\tWin32_PVOID,\n\tWin32_DWORD,\n\tWin32_LPDWORD,\n\tvoid*\n)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSAOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSAOVERLAPPED*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSAOVERLAPPED_COMPLETION_ROUTINE", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesTo("fn void (\n\tWin32_DWORD dwError,\n\tWin32_DWORD cbTransferred,\n\tWin32_LPWSAOVERLAPPED\n\tlpOverlapped,\n\tWin32_DWORD dwFlags\n)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_LPWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSAPOLLFD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_PWSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_WSAPOLLFD*", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WSAOVERLAPPED", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_OVERLAPPED", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Win32_WSAPOLLFD", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithResolvesToType(symbols.NewTypeBuilder("Win32_pollfd", "std::os::win32").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("WSAError", "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wsaPoll", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("fdArray", symbols.NewTypeBuilder("Win32_LPWSAPOLLFD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("fds", symbols.NewTypeBuilder("Win32_ULONG", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewTypeBuilder("Win32_INT", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wsaGetLastError", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wsaSetLastError", symbols.NewBaseTypeBuilder("void", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("error", symbols.NewTypeBuilder("WSAError", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wsaStartup", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithArgument(symbols.NewVariableBuilder("$arg#0", symbols.NewTypeBuilder("Win32_WORD", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithArgument(symbols.NewVariableBuilder("$arg#1", symbols.NewBaseTypeBuilder("void*", "std::os::win32").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wsaCleanup", symbols.NewTypeBuilder("CInt", "std::core::cinterop").Build(), "std::os::win32", "<stdlib-path>/os/win32/wsa.c3").WithoutSourceCode().Build())

	// Define module std::os::win32::wsa
	module = moduleCollection["std::os::win32::wsa"]
	module.AddVariable(symbols.NewVariableBuilder("EACCESS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRINUSE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EADDRNOTAVAIL", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EAFNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EALREADY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EBADF", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECANCELLED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNABORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNREFUSED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ECONNRESET", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDESTADDRREQ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDISCON", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EDQUOT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EFAULT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EHOSTUNREACH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINPROGRESS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINTR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVAL", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROCTABLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EINVALIDPROVIDER", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EISCONN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ELOOP", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMFILE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EMSGSIZE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENAMETOOLONG", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETRESET", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENETUNREACH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOBUFS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOMORE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOPROTOOPT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTCONN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTEMPTY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ENOTSOCK", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EOPNOTSUPP", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPFNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROCLIM", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTONOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROTOTYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EPROVIDERFAILEDINIT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EREMOTE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESHUTDOWN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESOCKTNOSUPPORT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ESTALE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETIMEDOUT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("ETOOMANYREFS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EUSERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("EWOULDBLOCK", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_CANCELLED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("E_NO_MORE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOST_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_HANDLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("INVALID_PARAMETER", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_INCOMPLETE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("IO_PENDING", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOTINITIALISED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NOT_ENOUGH_MEMORY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_DATA", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_RECOVERY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("OPERATION_ABORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ADMISSION_FAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_OBJECT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_BAD_STYLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERCOUNT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERSTYLE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFILTERTYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWCOUNT", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWDESC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EFLOWSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EOBJLENGTH", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPOLICYOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPROVSPECBUF", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFILTERSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EPSFLOWSPEC", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESDMODEOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESERVICETYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_ESHAPERATEOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_EUNKOWNPSOBJ", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_GENERIC_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_RECEIVERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_NO_SENDERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_POLICY_FAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RECEIVERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_REQUEST_CONFIRMED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_RESERVED_PETYPE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_SENDERS", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("QOS_TRAFFIC_CTRL_ERROR", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("REFUSED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SERVICE_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSCALLFAILURE", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("SYSNOTREADY", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TRY_AGAIN", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("TYPE_NOT_FOUND", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build()).AddVariable(symbols.NewVariableBuilder("VERNOTSUPPORTED", symbols.NewTypeBuilder("WSAError", "std::os::win32::wsa").Build(), "std::os::win32::wsa", "<stdlib-path>/os/win32/wsa.c3").Build())

	// Define module std::os::posix
	module = moduleCollection["std::os::posix"]
	module.AddFunction(symbols.NewFunctionBuilder("xdg_user_dir_lookup", symbols.NewTypeBuilder("String", "std::core::string").IsOptional().Build(), "std::os::posix", "<stdlib-path>/os/xdg.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::os::posix", "<stdlib-path>/os/xdg.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::os::posix", "<stdlib-path>/os/xdg.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("binarysearch", symbols.NewBaseTypeBuilder("usz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("x", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/binarysearch.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Perform a binary search over the sorted array and return the index\nin [0, array.len) where x would be inserted or cmp(i) is true and cmp(j) is true for j in [i, array.len).").WithContract("@require", "@list_is_by_ref(list) : \"Expected a list passed by reference or a slice\"").WithContract("@require", "@is_sortable(list) : \"The list must be sortable\"").WithContract("@require", "@is_valid_cmp_fn(cmp, list, context) : \"Expected a comparison function which compares values\"").WithContract("@require", "@is_valid_context(cmp, context) : \"Expected a valid context\"").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("countingsort", symbols.NewBaseTypeBuilder("void", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("key_fn", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Sort list using the counting sort algorithm.").WithContract("@require", "@list_is_by_ref(list) : \"Expected the list to be passed by reference\"").WithContract("@require", "@is_sortable(list) : \"The list must be indexable and support .len or .len()\"").WithContract("@require", "@is_cmp_key_fn(key_fn, list) : \"Expected a transformation function which returns an unsigned integer.\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("insertionsort_indexed", symbols.NewBaseTypeBuilder("void", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quicksort_indexed", symbols.NewBaseTypeBuilder("void", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("start", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("end", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/countingsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort::cs
	module = moduleCollection["std::sort::cs"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"KeyFn": symbols.NewGenericParameter("KeyFn", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":  symbols.NewGenericParameter("Type", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("IS_SLICE", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddVariable(symbols.NewVariableBuilder("KEY_BY_VALUE", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddVariable(symbols.NewVariableBuilder("LIST_HAS_REF", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddVariable(symbols.NewVariableBuilder("NO_KEY_FN", symbols.NewTypeBuilder("bool", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).AddDef(symbols.NewDefBuilder("CmpCallback", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesTo("fn int(ElementType*, ElementType*, KeyFn)").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Counts", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::sort::cs").IsCollectionWithSize(256).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Indexs", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("char", "std::sort::cs").IsCollectionWithSize(256).Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("KeyFnReturnType", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewTypeBuilder("ElementType", "std::sort::cs").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ListType", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::os::backtrace").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Ranges", "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithResolvesToType(symbols.NewBaseTypeBuilder("usz", "std::sort::cs").IsCollectionWithSize(257).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get", symbols.NewTypeBuilder("", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get", symbols.NewTypeBuilder("", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get_ref", symbols.NewTypeBuilder("", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get_ref", symbols.NewTypeBuilder("", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("csort", symbols.NewBaseTypeBuilder("void", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("usz", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("usz", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("key_fn", symbols.NewGenericTypeBuilder("KeyFn", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("byte_idx", symbols.NewBaseTypeBuilder("uint", "std::sort::cs").Build(), "std::sort::cs", "<stdlib-path>/sort/countingsort.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("insertionsort", symbols.NewBaseTypeBuilder("void", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/insertionsort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Sort list using the quick sort algorithm.").WithContract("@require", "@list_is_by_ref(list) : \"Expected a list passed by reference, or slice passed by value\"").WithContract("@require", "@is_sortable(list) : \"The list must be indexable and support .len or .len()\"").WithContract("@require", "@is_valid_cmp_fn(cmp, list, context) : \"Expected a comparison function which compares values\"").Build()).WithoutSourceCode().Build())

	// Define module std::sort::is
	module = moduleCollection["std::sort::is"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"CmpFn":   symbols.NewGenericParameter("CmpFn", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Context": symbols.NewGenericParameter("Context", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":    symbols.NewGenericParameter("Type", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("IS_SLICE", symbols.NewTypeBuilder("bool", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::net::url").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ListType", "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::math").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get", symbols.NewTypeBuilder("ElementType", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get_ref", symbols.NewTypeBuilder("ElementType*", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("isort", symbols.NewBaseTypeBuilder("void", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("usz", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("usz", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("comp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::is").Build(), "std::sort::is", "<stdlib-path>/sort/insertionsort.c3").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("quicksort", symbols.NewBaseTypeBuilder("void", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Sort list using the quick sort algorithm.").WithContract("@require", "@list_is_by_ref(list) : \"Expected a list passed by reference or be a slice\"").WithContract("@require", "@is_sortable(list) : \"The list must be indexable and support .len or .len()\"").WithContract("@require", "@is_valid_cmp_fn(cmp, list, context) : \"Expected a comparison function which compares values\"").WithContract("@require", "@is_valid_context(cmp, context) : \"Expected a valid context\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("quickselect", symbols.NewTypeBuilder("", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("k", symbols.NewBaseTypeBuilder("isz", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/quicksort.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Select the (k+1)th smallest element in an unordered list using Hoare's\nselection algorithm (Quickselect). k should be between 0 and len-1. The data\nlist will be partially sorted.").WithContract("@require", "@list_is_by_ref(list) : \"Expected a list passed by reference or be a slice\"").WithContract("@require", "@is_sortable(list) : \"The list must be indexable and support .len or .len()\"").WithContract("@require", "@is_valid_cmp_fn(cmp, list, context) : \"expected a comparison function which compares values\"").WithContract("@require", "@is_valid_context(cmp, context) : \"Expected a valid context\"").Build()).WithoutSourceCode().Build())

	// Define module std::sort::qs
	module = moduleCollection["std::sort::qs"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{
		"CmpFn":   symbols.NewGenericParameter("CmpFn", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Context": symbols.NewGenericParameter("Context", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
		"Type":    symbols.NewGenericParameter("Type", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0)),
	}).AddVariable(symbols.NewVariableBuilder("IS_SLICE", symbols.NewTypeBuilder("bool", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).AddStruct(symbols.NewStructBuilder("StackElementItem", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithStructMember("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ElementType", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::core::types").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ListType", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesToType(symbols.NewTypeBuilder("", "std::os::macos::objc").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("Stack", "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithResolvesToType(symbols.NewTypeBuilder("StackElementItem", "std::sort::qs").IsCollectionWithSize(64).Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get_ref", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_get_ref", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_set", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("list_set", symbols.NewTypeBuilder("", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("i", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("v", symbols.NewTypeBuilder("", "").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qsort", symbols.NewBaseTypeBuilder("void", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("qselect", symbols.NewTypeBuilder("ElementType", "std::sort::qs").IsOptional().Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("ListType", "std::sort::cs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("low", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("high", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("k", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "low <= k : \"kth smallest element is smaller than lower bounds\"").WithContract("@require", "k <= high : \"kth smallest element is larger than upper bounds\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@partition", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("ListType", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("h", symbols.NewBaseTypeBuilder("isz", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewGenericTypeBuilder("CmpFn", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).WithArgument(symbols.NewVariableBuilder("context", symbols.NewGenericTypeBuilder("Context", "std::sort::qs").Build(), "std::sort::qs", "<stdlib-path>/sort/quicksort.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("@list_is_by_ref", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_sortable", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@list_is_by_ref(#list) : \"Expected the list to be passed by ref or be a slice\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_any_sortable", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_context", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_valid_cmp_fn", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@list_is_by_ref(#list) : \"Expected the list to be passed by ref or be a slice\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_any_valid_cmp_fn", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#context", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@is_cmp_key_fn", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").WithArgument(symbols.NewVariableBuilder("#key_fn", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).WithArgument(symbols.NewVariableBuilder("#list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sort.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "@list_is_by_ref(#list) : \"Expected the list to be passed by ref or be a slice\"").Build()).WithoutSourceCode().Build())

	// Define module std::sort
	module = moduleCollection["std::sort"]
	module.AddFunction(symbols.NewFunctionBuilder("is_sorted", symbols.NewBaseTypeBuilder("bool", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgDefault("EMPTY_MACRO_SLOT").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Returns true if list is sorted in either ascending or descending order.").WithContract("@require", "@is_any_sortable(list) : \"The list must be indexable and support .len or .len()\"").WithContract("@require", "@is_any_valid_cmp_fn(cmp, list, ctx) : \"Expected a comparison function which compares values\"").WithContract("@require", "@is_valid_context(cmp, ctx) : \"Expected a valid context\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sort_cmp", symbols.NewBaseTypeBuilder("int", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("@sort_cmp_slice", symbols.NewBaseTypeBuilder("int", "std::sort").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").WithArgument(symbols.NewVariableBuilder("list", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("pos", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("cmp", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).WithArgument(symbols.NewVariableBuilder("ctx", symbols.NewTypeBuilder("", "").Build(), "std::sort", "<stdlib-path>/sort/sorted.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::thread::channel
	module = moduleCollection["std::thread::channel"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("BufferedChannelImpl", "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("closed", symbols.NewBaseTypeBuilder("bool", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("size", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("elems", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("sendx", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("send_waiting", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("send_cond", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("readx", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("read_waiting", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("read_cond", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithStructMember("buf", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").IsUnsizedCollection().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("BufferedChannel", "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::thread::channel").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithTypeIdentifier("BufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BufferedChannel*", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithArgument(symbols.NewVariableBuilder("size", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithArgDefault("1").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithTypeIdentifier("BufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BufferedChannel*", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithTypeIdentifier("BufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithTypeIdentifier("BufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").WithTypeIdentifier("BufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("BufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/buffered_channel.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread
	module = moduleCollection["std::thread"]
	module.AddFault(symbols.NewFaultBuilder("", "", "std::thread", "<stdlib-path>/threads/fixed_pool.c3").WithConstant(symbols.NewFaultConstantBuilder("THREAD_QUEUE_FULL", "std::thread", "../../../assets/c3c/lib/std/threads/fixed_pool.c3").WithFaultName("").Build()).Build())

	// Define module std::thread::threadpool
	module = moduleCollection["std::thread::threadpool"]
	module.AddStruct(symbols.NewStructBuilder("FixedThreadPool", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("queue", symbols.NewTypeBuilder("QueueItem", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("qindex", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("num_threads", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("stop", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("stop_now", symbols.NewBaseTypeBuilder("bool", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("pool", symbols.NewTypeBuilder("Thread", "std::thread").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("notify", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("QueueItem", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("func", symbols.NewTypeBuilder("ThreadPoolFn", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithStructMember("args", symbols.NewBaseTypeBuilder("any", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ThreadPoolFn", "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithResolvesTo("fn void(any[] args)").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("threads", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("queue_size", symbols.NewBaseTypeBuilder("usz", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!self.initialized : \"ThreadPool must not be already initialized\"").WithContract("@require", "threads > 0 && threads < 0x1000 : `Threads should be greater than 0 and less than 0x1000`").WithContract("@require", "queue_size < 0x10000 : `Queue size must be less than 65536`").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Stop all the threads and cleanup the pool.\nAny pending work will be dropped.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stop_and_destroy", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Stop all the threads and cleanup the pool.\nAny pending work will be processed.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("FixedThreadPool.@shutdown", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("#stop", symbols.NewTypeBuilder("", "").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").IsOptional().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithTypeIdentifier("FixedThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("FixedThreadPool*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadPoolFn", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewTypeBuilder("any*", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").IsVarArg().Build()).WithDocs(symbols.NewDocCommentBuilder("Push a new job to the pool.\nreturn Excuse if the queue is full, in which case the job is ignored.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_work", symbols.NewBaseTypeBuilder("int", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("self_arg", symbols.NewBaseTypeBuilder("void*", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("free_qitem", symbols.NewBaseTypeBuilder("void", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").WithArgument(symbols.NewVariableBuilder("item", symbols.NewTypeBuilder("QueueItem", "std::thread::threadpool").Build(), "std::thread::threadpool", "<stdlib-path>/threads/fixed_pool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::cpu
	module = moduleCollection["std::thread::cpu"]
	module.AddVariable(symbols.NewVariableBuilder("CTL_DEBUG", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_HW", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_KERN", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MACHDEP", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_MAXID", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_NET", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_UNSPEC", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_USER", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VFS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("CTL_VM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BUS_FREQ", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_BYTEORDER", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CACHELINE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_CPU_FREQ", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKNAMES", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_DISKSTATS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_EPOCH", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_FLOATINGPT", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1DCACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L1ICACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2CACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L2SETTINGS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3CACHESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_L3SETTINGS", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MACHINE_ARCH", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MAXID", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_MODEL", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_NCPU", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PAGESIZE", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_PHYSMEM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_USERMEM", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddVariable(symbols.NewVariableBuilder("HW_VECTORUNIT", symbols.NewTypeBuilder("", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_cpu", symbols.NewBaseTypeBuilder("uint", "std::thread::cpu").Build(), "std::thread::cpu", "<stdlib-path>/threads/os/cpu.c3").WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddDistinct(symbols.NewDistinctBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeTimedMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("int", "std::thread::os").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeMutex.lock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeMutex.try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("NativeMutex.unlock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_none.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddVariable(symbols.NewVariableBuilder("current_thread", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("mutex", symbols.NewTypeBuilder("Pthread_mutex_t", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("pthread", symbols.NewTypeBuilder("Pthread_t", "std::os::posix").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithStructMember("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("Pthread_cond_t", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("Pthread_once_t", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("NativeTimedMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithResolvesToType(symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!self.is_initialized() : \"Mutex is already initialized\"").WithContract("@ensure", "self.is_initialized()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Mutex was not initialized\"").WithContract("@ensure", "!self.is_initialized()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "self.is_initialized() : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.is_initialized()").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.is_initialized()").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout_duration", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::net").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.is_initialized()").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_until", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.is_initialized()").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("callback", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewBaseTypeBuilder("int", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").WithArgument(symbols.NewVariableBuilder("nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_posix.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::os
	module = moduleCollection["std::thread::os"]
	module.AddStruct(symbols.NewStructBuilder("NativeConditionVariable", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("cond_var", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("srw_lock", symbols.NewTypeBuilder("Win32_SRWLOCK", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("owner_thread", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("recursive", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("locks", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeOnceFlag", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("init_once", symbols.NewTypeBuilder("Win32_INIT_ONCE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("NativeTimedMutex", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("srw_lock", symbols.NewTypeBuilder("Win32_SRWLOCK", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("cond_var", symbols.NewTypeBuilder("Win32_CONDITION_VARIABLE", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("owner_thread", symbols.NewTypeBuilder("Win32_DWORD", "std::os::win32").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("recursive", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithStructMember("locks", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NativeThread", "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Win32_HANDLE", "std::os::win32").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("is_initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!mtx.initialized : \"Mutex is already initialized\"").WithContract("@require", "!type.timed").WithContract("@ensure", "mtx.initialized").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::net").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").WithContract("@require", "mtx.owner_thread != win32::getCurrentThreadId() : \"Mutex was not unlocked before destroying it\"").WithContract("@ensure", "!mtx.initialized").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("MutexType", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "type.timed").WithContract("@require", "!mtx.initialized : \"Mutex is already initialized\"").WithContract("@ensure", "mtx.initialized").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").WithContract("@require", "mtx.owner_thread != win32::getCurrentThreadId() : \"Mutex was not unlocked before destroying it\"").WithContract("@ensure", "!mtx.initialized").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_cond_var", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("lock_timeout", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::net::url").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("unlock", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeTimedMutex").WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("signal", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::net::url").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("broadcast", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::net::url").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("timedwait", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("NativeConditionVariable*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("timeout", symbols.NewBaseTypeBuilder("uint", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::io").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_timeout_duration", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::core::mem::allocator").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("wait_until", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeConditionVariable").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("mtx", symbols.NewTypeBuilder("NativeMutex*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "mtx.initialized : \"Mutex was not initialized\"").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("create", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("args", symbols.NewBaseTypeBuilder("void*", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("detach", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_exit", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_yield", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("call_once", symbols.NewBaseTypeBuilder("void", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeOnceFlag").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("join", symbols.NewBaseTypeBuilder("int", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_thread_current", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("equals", symbols.NewBaseTypeBuilder("bool", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithTypeIdentifier("NativeThread").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_sleep_nano", symbols.NewBaseTypeBuilder("void", "std::thread::os").IsOptional().Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").WithArgument(symbols.NewVariableBuilder("ns", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::thread::os", "<stdlib-path>/threads/os/thread_win32.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread::pool
	module = moduleCollection["std::thread::pool"]
	module.AddStruct(symbols.NewStructBuilder("QueueItem", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("ThreadPool", "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("queue", symbols.NewTypeBuilder("QueueItem", "std::thread::threadpool").IsUnsizedCollection().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("qindex", symbols.NewBaseTypeBuilder("usz", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("num_threads", symbols.NewBaseTypeBuilder("usz", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("initialized", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("stop_now", symbols.NewBaseTypeBuilder("bool", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("pool", symbols.NewTypeBuilder("Thread", "std::thread").IsUnsizedCollection().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithStructMember("notify", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "!self.initialized : \"ThreadPool must not be already initialized\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Stop all the threads and cleanup the pool.\nAny pending work will be dropped.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("stop_and_destroy", symbols.NewBaseTypeBuilder("void", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Stop all the threads and cleanup the pool.\nAny pending work will be processed.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ThreadPool.@shutdown", symbols.NewBaseTypeBuilder("void", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("#stop", symbols.NewTypeBuilder("", "").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::thread::pool").IsOptional().Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithTypeIdentifier("ThreadPool").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("ThreadPool*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Push a new job to the pool.\nReturns whether the queue is full, in which case the job is ignored.").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("process_work", symbols.NewBaseTypeBuilder("int", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread::pool").Build(), "std::thread::pool", "<stdlib-path>/threads/pool.c3").Build()).WithoutSourceCode().Build())

	// Define module std::thread
	module = moduleCollection["std::thread"]
	module.AddBitstruct(symbols.NewBitstructBuilder("MutexType", symbols.NewBaseTypeBuilder("int", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithStructMember("timed", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithStructMember("recursive", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("OnceFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn void()").WithoutSourceCode().Build()).AddDef(symbols.NewDefBuilder("ThreadFn", "std::thread", "<stdlib-path>/threads/thread.c3").WithResolvesTo("fn int(void* arg)").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("ConditionVariable", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeConditionVariable", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Mutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeMutex", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("OnceFlag", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeOnceFlag", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("RecursiveMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("Mutex", "std::thread").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Thread", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("NativeThread", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TimedMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(false).WithBaseType(symbols.NewTypeBuilder("NativeTimedMutex", "std::thread::os").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("TimedRecursiveMutex", "std::thread", "<stdlib-path>/threads/thread.c3").WithInline(true).WithBaseType(symbols.NewTypeBuilder("TimedMutex", "std::thread").Build()).WithoutSourceCode().Build()).AddFault(symbols.NewFaultBuilder("", "", "std::thread", "<stdlib-path>/threads/thread.c3").WithConstant(symbols.NewFaultConstantBuilder("INIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("DESTROY_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("LOCK_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("UNLOCK_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("SIGNAL_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("WAIT_TIMEOUT", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("DETACH_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("JOIN_FAILED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("INTERRUPTED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).WithConstant(symbols.NewFaultConstantBuilder("CHANNEL_CLOSED", "std::thread", "../../../assets/c3c/lib/std/threads/thread.c3").WithFaultName("").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.init", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.is_initialized", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("RecursiveMutex.init", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.destroy", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.lock", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.unlock", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.init", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedRecursiveMutex.init", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.destroy", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.lock", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.lock_timeout", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.try_lock", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("TimedMutex.unlock", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("fence", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("$ordering", symbols.NewTypeBuilder("AtomicOrdering", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Mutex.@in_lock", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("@body", symbols.NewTypeBuilder("fn void()", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.init", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.destroy", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.signal", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.broadcast", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("Mutex*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait_timeout", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("Mutex*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("#ms_or_duration", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "$defined(Duration d = #ms_or_duration) ||| $defined(ulong l = #ms_or_duration)").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ConditionVariable.wait_until", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("cond", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("mutex", symbols.NewTypeBuilder("Mutex*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("").WithContract("@return", "? thread::WAIT_TIMEOUT, thread::WAIT_FAILED").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.create", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("thread_fn", symbols.NewTypeBuilder("ThreadFn", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("arg", symbols.NewBaseTypeBuilder("void*", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithDocs(symbols.NewDocCommentBuilder("Create and start a thread.").WithContract("@require", "thread_fn != null : \"A non null thread function is required\"").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.detach", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.join", symbols.NewBaseTypeBuilder("int", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Thread.equals", symbols.NewBaseTypeBuilder("bool", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("thread", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Thread", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("OnceFlag.call", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("flag", symbols.NewTypeBuilder("", "").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).WithArgument(symbols.NewVariableBuilder("func", symbols.NewTypeBuilder("OnceFn", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("yield", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("current", symbols.NewTypeBuilder("Thread", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("exit", symbols.NewBaseTypeBuilder("void", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("result", symbols.NewBaseTypeBuilder("int", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ms", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ms", symbols.NewBaseTypeBuilder("ulong", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sleep_ns", symbols.NewBaseTypeBuilder("void", "std::thread").IsOptional().Build(), "std::thread", "<stdlib-path>/threads/thread.c3").WithArgument(symbols.NewVariableBuilder("ns", symbols.NewTypeBuilder("NanoDuration", "std::thread").Build(), "std::thread", "<stdlib-path>/threads/thread.c3").Build()).IsMacro().WithoutSourceCode().Build())

	// Define module std::thread::channel
	module = moduleCollection["std::thread::channel"]
	module.SetGenericParameters(map[string]*symbols.GenericParameter{"Type": symbols.NewGenericParameter("Type", "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3", symbols.NewRange(0, 0, 0, 0), symbols.NewRange(0, 0, 0, 0))}).AddStruct(symbols.NewStructBuilder("UnbufferedChannelImpl", "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("buf", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("closed", symbols.NewBaseTypeBuilder("bool", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("send_mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("send_waiting", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("send_cond", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("read_mu", symbols.NewTypeBuilder("Mutex", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("read_waiting", symbols.NewBaseTypeBuilder("usz", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithStructMember("read_cond", symbols.NewTypeBuilder("ConditionVariable", "std::thread").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("UnbufferedChannel", "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("void*", "std::thread::channel").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("init", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithTypeIdentifier("UnbufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnbufferedChannel*", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("destroy", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithTypeIdentifier("UnbufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnbufferedChannel*", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("push", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithTypeIdentifier("UnbufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnbufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithArgument(symbols.NewVariableBuilder("val", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("pop", symbols.NewGenericTypeBuilder("Type", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithTypeIdentifier("UnbufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnbufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("close", symbols.NewBaseTypeBuilder("void", "std::thread::channel").IsOptional().Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").WithTypeIdentifier("UnbufferedChannel").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("UnbufferedChannel", "std::thread::channel").Build(), "std::thread::channel", "<stdlib-path>/threads/unbuffered_channel.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::clock
	module = moduleCollection["std::time::clock"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("mark", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock*", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_nano_duration", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub_nano_duration", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_duration", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub_duration", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("nano_diff", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_now", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").WithTypeIdentifier("Clock").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::clock", "<stdlib-path>/time/clock.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::datetime
	module = moduleCollection["std::time::datetime"]
	module.AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_date", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("JANUARY").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("1").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "day >= 1 && day < 32").WithContract("@require", "hour >= 0 && hour < 24").WithContract("@require", "min >= 0 && min < 60").WithContract("@require", "sec >= 0 && sec < 60").WithContract("@require", "us >= 0 && us <= 999_999").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_date_tz", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("JANUARY").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("1").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "day >= 1 && day < 32").WithContract("@require", "hour >= 0 && hour < 24").WithContract("@require", "min >= 0 && min < 60").WithContract("@require", "sec >= 0 && sec < 60").WithContract("@require", "us >= 0 && us <= 999_999").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_local", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("with_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Update timestamp to gmt_offset while keeping the date and time\nvalues unchanged.").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("with_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Update timestamp to gmt_offset while keeping the date and time\nvalues unchanged.").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Update the date and time values to gmt_offset while keeping the\ntimestamp unchanged.").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").WithContract("@ensure", "self.time == return.time").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_gmt_offset", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Update the date and time values to gmt_offset while keeping the\ntimestamp unchanged.").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").WithContract("@ensure", "self.time == return.time").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_date", symbols.NewBaseTypeBuilder("void", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("year", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("JANUARY").Build()).WithArgument(symbols.NewVariableBuilder("day", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("1").Build()).WithArgument(symbols.NewVariableBuilder("hour", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("min", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("sec", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithArgument(symbols.NewVariableBuilder("us", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgDefault("0").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "day >= 1 && day < 32").WithContract("@require", "hour >= 0 && hour < 24").WithContract("@require", "min >= 0 && min <= 60").WithContract("@require", "sec >= 0 && sec < 60").WithContract("@require", "us >= 0 && us <= 999_999").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("set_time", symbols.NewBaseTypeBuilder("void", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_us", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub_us", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_years", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_months", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("months", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_us", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub_us", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("d", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_years", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_months", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("months", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_time", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_time_tz", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").WithContract("@ensure", "time == return.time").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("after", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("before", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("compare", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_years", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime*", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewBaseTypeBuilder("double", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("from", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("eq", symbols.NewBaseTypeBuilder("bool", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/datetime.c3").Build()).WithoutSourceCode().Build())

	// Define module std::time::datetime
	module = moduleCollection["std::time::datetime"]
	module.AddEnum(symbols.NewEnumBuilder("DateTimeFormat", "", "std::time::datetime", "<stdlib-path>/time/format.c3").WithEnumerator(symbols.NewEnumeratorBuilder("ANSIC", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("UNIXDATE", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RUBYDATE", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC822", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC822Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC850", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC1123", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC1123Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339Z", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339MS", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("RFC3339ZMS", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DATETIME", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DATEONLY", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TIMEONLY", "<stdlib-path>/time/format.c3").WithAssociativeValues([]symbols.Variable{}).WithEnumName("DateTimeFormat").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("type", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("tformat", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("TzDateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("TzDateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("format", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithTypeIdentifier("DateTime").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("allocator", symbols.NewTypeBuilder("Allocator", "std::core::mem::allocator").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithArgument(symbols.NewVariableBuilder("dt_format", symbols.NewTypeBuilder("DateTimeFormat", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_numeric_tzsuffix", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the timezone offset in the format of \"+HHMM\" or \"-HHMM\"").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("temp_numeric_tzsuffix_colon", symbols.NewTypeBuilder("String", "std::core::string").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").WithArgument(symbols.NewVariableBuilder("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time::datetime").Build(), "std::time::datetime", "<stdlib-path>/time/format.c3").Build()).WithDocs(symbols.NewDocCommentBuilder("Returns the timezone offset in the format of \"+HH:MM\" or \"-HH:MM\"").WithContract("@require", "gmt_offset >= -12 * 3600 && gmt_offset <= 14 * 3600").Build()).WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_darwin.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_posix.c3").WithoutSourceCode().Build())

	// Define module std::time::os
	module = moduleCollection["std::time::os"]
	module.AddVariable(symbols.NewVariableBuilder("WINDOWS_TICK_US", symbols.NewTypeBuilder("ulong", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddVariable(symbols.NewVariableBuilder("WIN_TO_UNIX_EPOCH_US", symbols.NewTypeBuilder("ulong", "std::time::os").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").Build()).AddFunction(symbols.NewFunctionBuilder("native_clock", symbols.NewTypeBuilder("Clock", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("native_timestamp", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time::os", "<stdlib-path>/time/os/time_win32.c3").WithoutSourceCode().Build())

	// Define module std::time
	module = moduleCollection["std::time"]
	module.AddVariable(symbols.NewVariableBuilder("DAY", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("DURATION_ZERO", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FAR_FUTURE", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FAR_PAST", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("FOREVER", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("HOUR", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MIN", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MONTH", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("MS", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("NANO_DURATION_ZERO", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("SEC", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("US", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("WEEK", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddVariable(symbols.NewVariableBuilder("YEAR", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).AddStruct(symbols.NewStructBuilder("DateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", symbols.NewTypeBuilder("Weekday", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", symbols.NewBaseTypeBuilder("ushort", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddStruct(symbols.NewStructBuilder("TzDateTime", "std::time", "<stdlib-path>/time/time.c3").WithStructMember("date_time", symbols.NewTypeBuilder("DateTime", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("gmt_offset", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("usec", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("sec", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("min", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("hour", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("day", symbols.NewBaseTypeBuilder("char", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("month", symbols.NewTypeBuilder("Month", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("weekday", symbols.NewTypeBuilder("Weekday", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("year_day", symbols.NewBaseTypeBuilder("ushort", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithStructMember("time", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Clock", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("ulong", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Duration", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("NanoDuration", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddDistinct(symbols.NewDistinctBuilder("Time", "std::time", "<stdlib-path>/time/time.c3").WithInline(false).WithBaseType(symbols.NewBaseTypeBuilder("long", "std::time").Build()).WithoutSourceCode().Build()).AddEnum(symbols.NewEnumBuilder("Month", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("JANUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FEBRUARY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MARCH", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("APRIL", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("MAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JUNE", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("JULY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("AUGUST", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SEPTEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("OCTOBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("NOVEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("DECEMBER", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("days", symbols.NewTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("leap", symbols.NewTypeBuilder("bool", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Month").Build()).Build()).AddEnum(symbols.NewEnumBuilder("Weekday", "char", "std::time", "<stdlib-path>/time/time.c3").WithEnumerator(symbols.NewEnumeratorBuilder("MONDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("TUESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("WEDNESDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("THURSDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("FRIDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SATURDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).WithEnumerator(symbols.NewEnumeratorBuilder("SUNDAY", "<stdlib-path>/time/time.c3").WithAssociativeValues([]symbols.Variable{*symbols.NewVariableBuilder("name", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build(), *symbols.NewVariableBuilder("abbrev", symbols.NewTypeBuilder("String", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()}).WithEnumName("Weekday").Build()).Build()).AddFunction(symbols.NewFunctionBuilder("us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("ms", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sec", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("min", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("hour", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("l", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("from_float", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("s", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("now", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_seconds", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::core::builtin").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("seconds", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_minutes", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("minutes", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_hours", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("hours", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_days", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("days", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_weeks", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::io::path").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("weeks", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("add_duration", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::io::path").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("sub_duration", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("compare_to", symbols.NewBaseTypeBuilder("int", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_seconds", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::net::url").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_us", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::compression::qoi").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_sec", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::os::backtrace").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_min", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::io").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_hour", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::core::string").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_days", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("diff_weeks", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Time").WithArgument(symbols.NewVariableBuilder("time", symbols.NewTypeBuilder("", "std::encoding::json").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("other", symbols.NewTypeBuilder("Time", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_sec", symbols.NewBaseTypeBuilder("double", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "std::core::types").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "std::net::url").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_duration", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("nd", symbols.NewTypeBuilder("", "std::os::process").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_nano", symbols.NewTypeBuilder("NanoDuration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", symbols.NewTypeBuilder("", "std::net").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_ms", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("Duration").WithArgument(symbols.NewVariableBuilder("td", symbols.NewTypeBuilder("", "std::core::mem::vm").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("Duration.mult", symbols.NewTypeBuilder("Duration", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").WithArgument(symbols.NewVariableBuilder("#td", symbols.NewTypeBuilder("", "").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("#val", symbols.NewBaseTypeBuilder("long", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).IsMacro().WithoutSourceCode().Build()).AddFunction(symbols.NewFunctionBuilder("to_format", symbols.NewBaseTypeBuilder("usz", "std::time").IsOptional().Build(), "std::time", "<stdlib-path>/time/time.c3").WithTypeIdentifier("NanoDuration").WithArgument(symbols.NewVariableBuilder("self", symbols.NewTypeBuilder("NanoDuration*", "std::time").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithArgument(symbols.NewVariableBuilder("formatter", symbols.NewTypeBuilder("Formatter*", "std::io").Build(), "std::time", "<stdlib-path>/time/time.c3").Build()).WithoutSourceCode().Build())
	return parsedModules
}
